
DE1_SoC_ADC.elf:     file format elf32-littlenios2
DE1_SoC_ADC.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01080000 paddr 0x01080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01080020 paddr 0x01080020 align 2**12
         filesz 0x0000c19c memsz 0x0000c19c flags r-x
    LOAD off    0x0000d1bc vaddr 0x0108c1bc paddr 0x0108dc14 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x0000f66c vaddr 0x0108f66c paddr 0x0108f66c align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01080000  01080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01080020  01080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000bcbc  010801b8  010801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000348  0108be74  0108be74  0000ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0108c1bc  0108dc14  0000d1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0108f66c  0108f66c  0000f66c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000ec14  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d40  00000000  00000000  0000ec38  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000227b5  00000000  00000000  0000f978  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008e18  00000000  00000000  0003212d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00009f6c  00000000  00000000  0003af45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001784  00000000  00000000  00044eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002c93  00000000  00000000  00046638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000104a9  00000000  00000000  000492cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00059774  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  000597a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005d0ea  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0005d0ed  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005d0f0  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005d0f1  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005d0f2  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005d0f6  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005d0fa  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0005d0fe  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0005d107  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0005d110  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  0005d119  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003c  00000000  00000000  0005d125  2**0
                  CONTENTS, READONLY
 28 .jdi          00004a0f  00000000  00000000  0005d161  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0006110b  00000000  00000000  00061b70  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01080000 l    d  .entry	00000000 .entry
01080020 l    d  .exceptions	00000000 .exceptions
010801b8 l    d  .text	00000000 .text
0108be74 l    d  .rodata	00000000 .rodata
0108c1bc l    d  .rwdata	00000000 .rwdata
0108f66c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE1_SoC_ADC_bsp//obj/HAL/src/crt0.o
01080200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
01080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01080f6c l     F .text	00000034 __sprint_r
0108bff6 l     O .rodata	00000010 blanks.3515
0108c006 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01082f30 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0108496c l     F .text	00000008 __fp_lock
01084974 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0108c1bc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0108c03c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0108c184 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
01088cb4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01089488 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01089688 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010897a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
010897cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
010898c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010899b8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01089aa4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01089c7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0108dc04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01089ecc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0108a008 l     F .text	00000038 alt_dev_reg
0108cb78 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0108a2f8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0108a4fc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0108ab38 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0108adb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0108b258 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0108b390 l     F .text	00000050 alt_get_errno
0108b3e0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
010872c4 g     F .text	00000074 _mprec_log10
010873b4 g     F .text	00000084 __any_on
01088024 g     F .text	00000064 _isatty_r
0108c06c g     O .rodata	00000028 __mprec_tinytens
01089bc4 g     F .text	00000078 alt_main
01080d9c g     F .text	00000044 __ashldi3
01080e48 g     F .text	00000084 _puts_r
0108f6c8 g     O .bss	00000100 alt_irq
01088088 g     F .text	0000006c _lseek_r
0108dc14 g       *ABS*	00000000 __flash_rwdata_start
010890bc g     F .text	0000005c __eqdf2
0108f958 g       *ABS*	00000000 __alt_heap_start
01080e0c g     F .text	0000003c printf
01087bd8 g     F .text	0000005c __sseek
010849fc g     F .text	0000010c __sinit
01085694 g     F .text	0000009c _setlocale_r
01084988 g     F .text	00000064 __sfmoreglue
01089c5c g     F .text	00000020 __malloc_unlock
0108628c g     F .text	00000128 memmove
010849ec g     F .text	00000010 _cleanup
01086490 g     F .text	000000a8 _Balloc
01089174 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
01080000 g     F .entry	0000001c __reset
01080020 g       *ABS*	00000000 __flash_exceptions_start
01087fbc g     F .text	00000068 _fstat_r
0108f684 g     O .bss	00000004 errno
0108f68c g     O .bss	00000004 alt_argv
01095bd8 g       *ABS*	00000000 _gp
0108c9f8 g     O .rwdata	00000180 alt_fd_list
0108b7bc g     F .text	00000090 alt_find_dev
01086194 g     F .text	000000f8 memcpy
0108497c g     F .text	0000000c _cleanup_r
01080850 g     F .text	000000d4 __floatsidf
0108b318 g     F .text	00000078 alt_io_redirect
0108923c g     F .text	0000005c __ltdf2
0108be74 g       *ABS*	00000000 __DTOR_END__
01080ecc g     F .text	00000014 puts
01087220 g     F .text	000000a4 __ratio
0108a6fc g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01080de0 g     F .text	0000002c _printf_r
010895a8 g     F .text	00000008 __udivsi3
01089918 g     F .text	000000a0 isatty
0108c0bc g     O .rodata	000000c8 __mprec_tens
01085730 g     F .text	0000000c __locale_charset
0108ba14 g     F .text	0000008c alt_icache_flush
0108f680 g     O .bss	00000004 __malloc_top_pad
0108dbe0 g     O .rwdata	00000004 __mb_cur_max
0108573c g     F .text	0000000c _localeconv_r
01086890 g     F .text	0000003c __i2b
01085050 g     F .text	000004e4 __sfvwrite_r
01087a98 g     F .text	00000064 _sbrk_r
010880f4 g     F .text	0000006c _read_r
0108c5bc g     O .rwdata	0000000c __lc_ctype
0108dbfc g     O .rwdata	00000004 alt_max_fd
01080c54 g     F .text	00000104 __unpack_d
01087e6c g     F .text	0000013c _fclose_r
0108493c g     F .text	00000030 fflush
0108f67c g     O .bss	00000004 __malloc_max_sbrked_mem
01089008 g     F .text	00000054 __adddf3
01086f94 g     F .text	00000148 __b2d
01088728 g     F .text	0000058c __umoddi3
01089af4 g     F .text	000000d0 lseek
0108dbd8 g     O .rwdata	00000004 _global_impure_ptr
01087438 g     F .text	000005fc _realloc_r
0108f958 g       *ABS*	00000000 __bss_end
0108b168 g     F .text	000000f0 alt_iic_isr_register
0108b698 g     F .text	00000104 alt_tick
01088160 g     F .text	000005c8 __udivdi3
0108c094 g     O .rodata	00000028 __mprec_bigtens
01086674 g     F .text	00000104 __s2b
0108936c g     F .text	0000011c __floatunsidf
01086d34 g     F .text	00000058 __mcmp
01084c14 g     F .text	00000018 __fp_lock_all
0108b11c g     F .text	0000004c alt_ic_irq_enabled
0108b600 g     F .text	00000098 alt_alarm_stop
0108f694 g     O .bss	00000004 alt_irq_active
010800ec g     F .exceptions	000000cc alt_irq_handler
0108c9d0 g     O .rwdata	00000028 alt_dev_null
0108ad74 g     F .text	00000044 alt_dcache_flush_all
01086778 g     F .text	00000068 __hi0bits
01089298 g     F .text	000000d4 __fixdfsi
0108dc14 g       *ABS*	00000000 __ram_rwdata_end
0108dbf4 g     O .rwdata	00000008 alt_dev_list
01089f1c g     F .text	000000ec write
0108c1bc g       *ABS*	00000000 __ram_rodata_end
0108981c g     F .text	000000ac fstat
01080d58 g     F .text	00000044 __lshrdi3
01086aac g     F .text	0000012c __pow5mult
0108f674 g     O .bss	00000004 __nlocale_changed
010895b0 g     F .text	00000008 __umodsi3
0108f958 g       *ABS*	00000000 end
0108a238 g     F .text	000000c0 altera_avalon_jtag_uart_init
0108be74 g       *ABS*	00000000 __CTOR_LIST__
010ce200 g       *ABS*	00000000 __alt_stack_pointer
0108abac g     F .text	00000088 alt_avalon_timer_sc_init
01080984 g     F .text	000000ac __clzsi2
0108a914 g     F .text	00000224 altera_avalon_jtag_uart_write
01084c04 g     F .text	00000004 __sfp_lock_acquire
0108609c g     F .text	000000f8 memchr
01080fa0 g     F .text	00001df8 ___vfprintf_internal_r
01084d80 g     F .text	000002d0 _free_r
0108bc98 g     F .text	000001a0 __call_exitprocs
0108f670 g     O .bss	00000004 __mlocale_changed
0108dbe4 g     O .rwdata	00000004 __malloc_sbrk_base
010801b8 g     F .text	0000004c _start
0108f698 g     O .bss	00000004 _alt_tick_rate
01086bd8 g     F .text	0000015c __lshift
0108f69c g     O .bss	00000004 _alt_nticks
01089ccc g     F .text	000000f0 read
0108a074 g     F .text	00000060 alt_sys_init
0108bb68 g     F .text	00000130 __register_exitproc
010868cc g     F .text	000001e0 __multiply
0108a5a0 g     F .text	00000068 altera_avalon_jtag_uart_close
0108c1bc g       *ABS*	00000000 __ram_rwdata_start
0108be74 g       *ABS*	00000000 __ram_rodata_start
0108f6a0 g     O .bss	00000028 __malloc_current_mallinfo
010870dc g     F .text	00000144 __d2b
0108a0d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0108b960 g     F .text	000000b4 alt_get_fd
010895b8 g     F .text	000000d0 __fpcmp_parts_d
01087e08 g     F .text	00000064 _close_r
0108baec g     F .text	0000007c memcmp
0108a194 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0108f958 g       *ABS*	00000000 __alt_stack_base
0108a1e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01082dbc g     F .text	00000174 __swsetup_r
0108069c g     F .text	000001b4 __divdf3
01084b08 g     F .text	000000fc __sfp
01087338 g     F .text	0000007c __copybits
0108c5c8 g     O .rwdata	00000408 __malloc_av_
01084c10 g     F .text	00000004 __sinit_lock_release
010803b8 g     F .text	000002e4 __muldf3
01087afc g     F .text	00000054 __sread
0108b84c g     F .text	00000114 alt_find_file
0108ae08 g     F .text	000000a0 alt_dev_llist_insert
01089c3c g     F .text	00000020 __malloc_lock
01089e1c g     F .text	000000b0 sbrk
01084754 g     F .text	000001e8 _fflush_r
01087d4c g     F .text	000000bc _calloc_r
0108f66c g       *ABS*	00000000 __bss_start
010863b4 g     F .text	000000dc memset
01080204 g     F .text	000001b4 main
0108f690 g     O .bss	00000004 alt_envp
0108f678 g     O .bss	00000004 __malloc_max_total_mem
0108a134 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01087c34 g     F .text	00000008 __sclose
010ce200 g       *ABS*	00000000 __alt_heap_limit
01087fa8 g     F .text	00000014 fclose
0108f7c8 g     O .bss	00000190 _atexit0
01083138 g     F .text	0000161c _dtoa_r
01085918 g     F .text	00000784 _malloc_r
0108dc00 g     O .rwdata	00000004 alt_errno
01085534 g     F .text	000000a8 _fwalk
010894fc g     F .text	00000050 __divsi3
0108be9c g     O .rodata	00000014 __thenan_df
01084c44 g     F .text	0000013c _malloc_trim_r
0108be74 g       *ABS*	00000000 __CTOR_END__
01087c3c g     F .text	000000a4 strcmp
0108be74 g       *ABS*	00000000 __flash_rodata_start
0108be74 g       *ABS*	00000000 __DTOR_LIST__
01089118 g     F .text	0000005c __nedf2
0108a040 g     F .text	00000034 alt_irq_init
01089dbc g     F .text	00000060 alt_release_fd
0108beb0 g     O .rodata	00000100 __clz_tab
0108f66c g     O .bss	00000004 _PathLocale
0108baa0 g     F .text	00000014 atexit
01087ce0 g     F .text	0000006c _write_r
01085748 g     F .text	0000001c setlocale
0108dbdc g     O .rwdata	00000004 _impure_ptr
0108f688 g     O .bss	00000004 alt_argc
0108af04 g     F .text	0000005c _do_dtors
01080020 g       .exceptions	00000000 alt_irq_entry
01086f34 g     F .text	00000060 __ulp
01087a34 g     F .text	00000038 __isinfd
01084c2c g     F .text	00000018 __fp_unlock_all
0108dbec g     O .rwdata	00000008 alt_fs_list
01080020 g       *ABS*	00000000 __ram_exceptions_start
01085764 g     F .text	0000000c localeconv
01080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0108af90 g     F .text	00000050 alt_ic_isr_register
0108dc14 g       *ABS*	00000000 _edata
0108f958 g       *ABS*	00000000 _end
010801b8 g       *ABS*	00000000 __ram_exceptions_end
0108a608 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0108b07c g     F .text	000000a0 alt_ic_irq_disable
01087b50 g     F .text	00000088 __swrite
0108dbe8 g     O .rwdata	00000004 __malloc_trim_threshold
0108b79c g     F .text	00000020 altera_nios2_qsys_irq_init
0108bab4 g     F .text	00000038 exit
010855dc g     F .text	000000b8 _fwalk_reent
01086d8c g     F .text	000001a8 __mdiff
0108954c g     F .text	0000005c __modsi3
010ce200 g       *ABS*	00000000 __alt_data_end
01080020 g     F .exceptions	00000000 alt_exception
01084c08 g     F .text	00000004 __sfp_lock_release
0108be38 g     F .text	0000003c _exit
01087a6c g     F .text	0000002c __isnand
0108ac34 g     F .text	00000140 alt_alarm_start
01080924 g     F .text	00000060 __muldi3
01085770 g     F .text	000001a8 __smakebuf_r
01080ee0 g     F .text	0000008c strlen
0108b4ac g     F .text	00000154 open
010891d8 g     F .text	00000064 __gedf2
0108af60 g     F .text	00000030 alt_icache_flush_all
0108dc08 g     O .rwdata	00000004 alt_priority_mask
0108afe0 g     F .text	0000009c alt_ic_irq_enable
01082d98 g     F .text	00000024 __vfprintf_internal
0108905c g     F .text	00000060 __subdf3
010867e0 g     F .text	000000b0 __lo0bits
0108dc0c g     O .rwdata	00000008 alt_alarm_list
0108aea8 g     F .text	0000005c _do_ctors
010896d8 g     F .text	000000c8 close
01089a24 g     F .text	00000080 alt_load
01080a30 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
01084c0c g     F .text	00000004 __sinit_lock_acquire
01086560 g     F .text	00000114 __multadd
01086538 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 108000c:	00bffd16 	blt	zero,r2,1080004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1080010:	00404234 	movhi	at,264
    ori r1, r1, %lo(_start)
 1080014:	08406e14 	ori	at,at,440
    jmp r1
 1080018:	0800683a 	jmp	at
 108001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x1080000>

Disassembly of section .exceptions:

01080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 108002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 108003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 108004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 108005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 108006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 108007c:	10000326 	beq	r2,zero,108008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1080080:	20000226 	beq	r4,zero,108008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1080084:	10800ec0 	call	10800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1080088:	00000306 	br	1080098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 108008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1080090:	e8bfff17 	ldw	r2,-4(ea)

01080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 108009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10800e8:	ef80083a 	eret

010800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10800ec:	defff904 	addi	sp,sp,-28
 10800f0:	dfc00615 	stw	ra,24(sp)
 10800f4:	df000515 	stw	fp,20(sp)
 10800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1080100:	0005313a 	rdctl	r2,ipending
 1080104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1080108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1080110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1080114:	00800044 	movi	r2,1
 1080118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 108011c:	e0fffb17 	ldw	r3,-20(fp)
 1080120:	e0bffc17 	ldw	r2,-16(fp)
 1080124:	1884703a 	and	r2,r3,r2
 1080128:	10001726 	beq	r2,zero,1080188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 108012c:	00c04274 	movhi	r3,265
 1080130:	18fdb204 	addi	r3,r3,-2360
 1080134:	e0bffd17 	ldw	r2,-12(fp)
 1080138:	100490fa 	slli	r2,r2,3
 108013c:	1885883a 	add	r2,r3,r2
 1080140:	10c00017 	ldw	r3,0(r2)
 1080144:	01004274 	movhi	r4,265
 1080148:	213db204 	addi	r4,r4,-2360
 108014c:	e0bffd17 	ldw	r2,-12(fp)
 1080150:	100490fa 	slli	r2,r2,3
 1080154:	2085883a 	add	r2,r4,r2
 1080158:	10800104 	addi	r2,r2,4
 108015c:	10800017 	ldw	r2,0(r2)
 1080160:	1009883a 	mov	r4,r2
 1080164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1080168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108016c:	0005313a 	rdctl	r2,ipending
 1080170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1080174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1080178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 108017c:	e0bffb17 	ldw	r2,-20(fp)
 1080180:	103fe31e 	bne	r2,zero,1080110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1080184:	00000706 	br	10801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1080188:	e0bffc17 	ldw	r2,-16(fp)
 108018c:	1085883a 	add	r2,r2,r2
 1080190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1080194:	e0bffd17 	ldw	r2,-12(fp)
 1080198:	10800044 	addi	r2,r2,1
 108019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10801a0:	003fde06 	br	108011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10801a4:	e037883a 	mov	sp,fp
 10801a8:	dfc00117 	ldw	ra,4(sp)
 10801ac:	df000017 	ldw	fp,0(sp)
 10801b0:	dec00204 	addi	sp,sp,8
 10801b4:	f800283a 	ret

Disassembly of section .text:

010801b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10801b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10801bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10801c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 10801c4:	00bffd16 	blt	zero,r2,10801bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10801c8:	06c04334 	movhi	sp,268
    ori sp, sp, %lo(__alt_stack_pointer)
 10801cc:	def88014 	ori	sp,sp,57856
    movhi gp, %hi(_gp)
 10801d0:	06804274 	movhi	gp,265
    ori gp, gp, %lo(_gp)
 10801d4:	d696f614 	ori	gp,gp,23512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10801d8:	00804234 	movhi	r2,264
    ori r2, r2, %lo(__bss_start)
 10801dc:	10bd9b14 	ori	r2,r2,63084

    movhi r3, %hi(__bss_end)
 10801e0:	00c04234 	movhi	r3,264
    ori r3, r3, %lo(__bss_end)
 10801e4:	18fe5614 	ori	r3,r3,63832

    beq r2, r3, 1f
 10801e8:	10c00326 	beq	r2,r3,10801f8 <_start+0x40>

0:
    stw zero, (r2)
 10801ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10801f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10801f4:	10fffd36 	bltu	r2,r3,10801ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10801f8:	1089a240 	call	1089a24 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10801fc:	1089bc40 	call	1089bc4 <alt_main>

01080200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1080200:	003fff06 	br	1080200 <alt_after_alt_main>

01080204 <main>:
#include "system.h"


 
int main()
{
 1080204:	defffa04 	addi	sp,sp,-24
 1080208:	dfc00515 	stw	ra,20(sp)
 108020c:	df000415 	stw	fp,16(sp)
 1080210:	dc000315 	stw	r16,12(sp)
 1080214:	df000304 	addi	fp,sp,12

        alt_u16 adc_result;
        alt_u16 status=0x00;
 1080218:	e03ffd0d 	sth	zero,-12(fp)
	    int i;
       printf("channel 0-7 voltage value:\n");
 108021c:	01004274 	movhi	r4,265
 1080220:	212f9d04 	addi	r4,r4,-16780
 1080224:	1080ecc0 	call	1080ecc <puts>
		//initial the spi controller
		IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 0x1); //select device 0
 1080228:	00c00044 	movi	r3,1
 108022c:	00800d04 	movi	r2,52
 1080230:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0x00);  //reset the control reg
 1080234:	0007883a 	mov	r3,zero
 1080238:	00800b04 	movi	r2,44
 108023c:	10c00035 	stwio	r3,0(r2)
		//initial the adc after power supply
	    if( IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_TRDY_MSK )//tx two cycle dummy bits
 1080240:	00800a04 	movi	r2,40
 1080244:	10800037 	ldwio	r2,0(r2)
 1080248:	1080100c 	andi	r2,r2,64
 108024c:	10000326 	beq	r2,zero,108025c <main+0x58>
		   IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0xffff); //the first cycle dummy bits
 1080250:	00ffffd4 	movui	r3,65535
 1080254:	00800904 	movi	r2,36
 1080258:	10c00035 	stwio	r3,0(r2)
	    while(!(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_TRDY_MSK));
 108025c:	0001883a 	nop
 1080260:	00800a04 	movi	r2,40
 1080264:	10800037 	ldwio	r2,0(r2)
 1080268:	1080100c 	andi	r2,r2,64
 108026c:	103ffc26 	beq	r2,zero,1080260 <main+0x5c>
	       IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0xffff); //the second cycle dummy bits
 1080270:	00ffffd4 	movui	r3,65535
 1080274:	00800904 	movi	r2,36
 1080278:	10c00035 	stwio	r3,0(r2)

	    // SEQ Bit = 1, SHADOW Bit = 1
	    while(!(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_TRDY_MSK)); //write control and sequence register
 108027c:	0001883a 	nop
 1080280:	00800a04 	movi	r2,40
 1080284:	10800037 	ldwio	r2,0(r2)
 1080288:	1080100c 	andi	r2,r2,64
 108028c:	103ffc26 	beq	r2,zero,1080280 <main+0x7c>
	       IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0xdf90); //datasheet figure 13,config the control reg, channel 0-7
 1080290:	00f7e414 	movui	r3,57232
 1080294:	00800904 	movi	r2,36
 1080298:	10c00035 	stwio	r3,0(r2)
//	    while(!(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_TRDY_MSK)); //write control and sequence register
//	       IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0x5f90); //read the convert result channel 0

	    //read converting result from channel 0 - channel 7

	 for(i=0;i<8;i++){
 108029c:	e03ffe15 	stw	zero,-8(fp)
 10802a0:	00003c06 	br	1080394 <main+0x190>
		// if(i==0)
		// usleep(1); //matthew add
	    while(!(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_TRDY_MSK)); //write control and sequence register
 10802a4:	0001883a 	nop
 10802a8:	00800a04 	movi	r2,40
 10802ac:	10800037 	ldwio	r2,0(r2)
 10802b0:	1080100c 	andi	r2,r2,64
 10802b4:	103ffc26 	beq	r2,zero,10802a8 <main+0xa4>
	       IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0x5f90); //read the convert result channel 0
 10802b8:	00d7e404 	movi	r3,24464
 10802bc:	00800904 	movi	r2,36
 10802c0:	10c00035 	stwio	r3,0(r2)

	       // wait tx done
	       while (!(status & ALTERA_AVALON_SPI_STATUS_TMT_MSK)){
 10802c4:	00000306 	br	10802d4 <main+0xd0>
	        status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);
 10802c8:	00800a04 	movi	r2,40
 10802cc:	10800037 	ldwio	r2,0(r2)
 10802d0:	e0bffd0d 	sth	r2,-12(fp)
		// usleep(1); //matthew add
	    while(!(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_TRDY_MSK)); //write control and sequence register
	       IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0x5f90); //read the convert result channel 0

	       // wait tx done
	       while (!(status & ALTERA_AVALON_SPI_STATUS_TMT_MSK)){
 10802d4:	e0bffd0b 	ldhu	r2,-12(fp)
 10802d8:	1080080c 	andi	r2,r2,32
 10802dc:	103ffa26 	beq	r2,zero,10802c8 <main+0xc4>
	        status = IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE);
	       }

	    while(!(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_RRDY_MSK));
 10802e0:	0001883a 	nop
 10802e4:	00800a04 	movi	r2,40
 10802e8:	10800037 	ldwio	r2,0(r2)
 10802ec:	1080200c 	andi	r2,r2,128
 10802f0:	103ffc26 	beq	r2,zero,10802e4 <main+0xe0>
	       adc_result = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
 10802f4:	00800804 	movi	r2,32
 10802f8:	10800037 	ldwio	r2,0(r2)
 10802fc:	e0bfff0d 	sth	r2,-4(fp)

	       printf("CH%d = %fv\n",(adc_result>>12)&0x7,2*2.5*(adc_result&0x0fff)/4096);
 1080300:	e0bfff0b 	ldhu	r2,-4(fp)
 1080304:	1004d33a 	srli	r2,r2,12
 1080308:	10bfffcc 	andi	r2,r2,65535
 108030c:	140001cc 	andi	r16,r2,7
 1080310:	e0bfff0b 	ldhu	r2,-4(fp)
 1080314:	1083ffcc 	andi	r2,r2,4095
 1080318:	1009883a 	mov	r4,r2
 108031c:	10808500 	call	1080850 <__floatsidf>
 1080320:	100b883a 	mov	r5,r2
 1080324:	180d883a 	mov	r6,r3
 1080328:	2809883a 	mov	r4,r5
 108032c:	300b883a 	mov	r5,r6
 1080330:	000d883a 	mov	r6,zero
 1080334:	01d00534 	movhi	r7,16404
 1080338:	10803b80 	call	10803b8 <__muldf3>
 108033c:	1009883a 	mov	r4,r2
 1080340:	180b883a 	mov	r5,r3
 1080344:	2005883a 	mov	r2,r4
 1080348:	2807883a 	mov	r3,r5
 108034c:	1009883a 	mov	r4,r2
 1080350:	180b883a 	mov	r5,r3
 1080354:	000d883a 	mov	r6,zero
 1080358:	01d02c34 	movhi	r7,16560
 108035c:	108069c0 	call	108069c <__divdf3>
 1080360:	1009883a 	mov	r4,r2
 1080364:	180b883a 	mov	r5,r3
 1080368:	2005883a 	mov	r2,r4
 108036c:	2807883a 	mov	r3,r5
 1080370:	01004274 	movhi	r4,265
 1080374:	212fa404 	addi	r4,r4,-16752
 1080378:	800b883a 	mov	r5,r16
 108037c:	100d883a 	mov	r6,r2
 1080380:	180f883a 	mov	r7,r3
 1080384:	1080e0c0 	call	1080e0c <printf>
//	    while(!(IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) & ALTERA_AVALON_SPI_STATUS_TRDY_MSK)); //write control and sequence register
//	       IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0x5f90); //read the convert result channel 0

	    //read converting result from channel 0 - channel 7

	 for(i=0;i<8;i++){
 1080388:	e0bffe17 	ldw	r2,-8(fp)
 108038c:	10800044 	addi	r2,r2,1
 1080390:	e0bffe15 	stw	r2,-8(fp)
 1080394:	e0bffe17 	ldw	r2,-8(fp)
 1080398:	10800210 	cmplti	r2,r2,8
 108039c:	103fc11e 	bne	r2,zero,10802a4 <main+0xa0>

	       printf("CH%d = %fv\n",(adc_result>>12)&0x7,2*2.5*(adc_result&0x0fff)/4096);

   }//end for

}//end main
 10803a0:	e037883a 	mov	sp,fp
 10803a4:	dfc00217 	ldw	ra,8(sp)
 10803a8:	df000117 	ldw	fp,4(sp)
 10803ac:	dc000017 	ldw	r16,0(sp)
 10803b0:	dec00304 	addi	sp,sp,12
 10803b4:	f800283a 	ret

010803b8 <__muldf3>:
 10803b8:	deffe404 	addi	sp,sp,-112
 10803bc:	d9001115 	stw	r4,68(sp)
 10803c0:	d9401215 	stw	r5,72(sp)
 10803c4:	d9001104 	addi	r4,sp,68
 10803c8:	d9400a04 	addi	r5,sp,40
 10803cc:	dfc01b15 	stw	ra,108(sp)
 10803d0:	d9800f15 	stw	r6,60(sp)
 10803d4:	d9c01015 	stw	r7,64(sp)
 10803d8:	ddc01a15 	stw	r23,104(sp)
 10803dc:	dd801915 	stw	r22,100(sp)
 10803e0:	dd401815 	stw	r21,96(sp)
 10803e4:	dd001715 	stw	r20,92(sp)
 10803e8:	dcc01615 	stw	r19,88(sp)
 10803ec:	dc801515 	stw	r18,84(sp)
 10803f0:	dc401415 	stw	r17,80(sp)
 10803f4:	dc001315 	stw	r16,76(sp)
 10803f8:	1080c540 	call	1080c54 <__unpack_d>
 10803fc:	d9000f04 	addi	r4,sp,60
 1080400:	d9400504 	addi	r5,sp,20
 1080404:	1080c540 	call	1080c54 <__unpack_d>
 1080408:	d8c00a17 	ldw	r3,40(sp)
 108040c:	00800044 	movi	r2,1
 1080410:	10c01136 	bltu	r2,r3,1080458 <__muldf3+0xa0>
 1080414:	d8c00b17 	ldw	r3,44(sp)
 1080418:	d8800617 	ldw	r2,24(sp)
 108041c:	d9000a04 	addi	r4,sp,40
 1080420:	1884c03a 	cmpne	r2,r3,r2
 1080424:	d8800b15 	stw	r2,44(sp)
 1080428:	1080a300 	call	1080a30 <__pack_d>
 108042c:	dfc01b17 	ldw	ra,108(sp)
 1080430:	ddc01a17 	ldw	r23,104(sp)
 1080434:	dd801917 	ldw	r22,100(sp)
 1080438:	dd401817 	ldw	r21,96(sp)
 108043c:	dd001717 	ldw	r20,92(sp)
 1080440:	dcc01617 	ldw	r19,88(sp)
 1080444:	dc801517 	ldw	r18,84(sp)
 1080448:	dc401417 	ldw	r17,80(sp)
 108044c:	dc001317 	ldw	r16,76(sp)
 1080450:	dec01c04 	addi	sp,sp,112
 1080454:	f800283a 	ret
 1080458:	d9000517 	ldw	r4,20(sp)
 108045c:	11000636 	bltu	r2,r4,1080478 <__muldf3+0xc0>
 1080460:	d8800617 	ldw	r2,24(sp)
 1080464:	d8c00b17 	ldw	r3,44(sp)
 1080468:	d9000504 	addi	r4,sp,20
 108046c:	1884c03a 	cmpne	r2,r3,r2
 1080470:	d8800615 	stw	r2,24(sp)
 1080474:	003fec06 	br	1080428 <__muldf3+0x70>
 1080478:	00800104 	movi	r2,4
 108047c:	1880051e 	bne	r3,r2,1080494 <__muldf3+0xdc>
 1080480:	00800084 	movi	r2,2
 1080484:	20bfe31e 	bne	r4,r2,1080414 <__muldf3+0x5c>
 1080488:	01004274 	movhi	r4,265
 108048c:	212fa704 	addi	r4,r4,-16740
 1080490:	003fe506 	br	1080428 <__muldf3+0x70>
 1080494:	2080031e 	bne	r4,r2,10804a4 <__muldf3+0xec>
 1080498:	00800084 	movi	r2,2
 108049c:	18bffa26 	beq	r3,r2,1080488 <__muldf3+0xd0>
 10804a0:	003fef06 	br	1080460 <__muldf3+0xa8>
 10804a4:	00800084 	movi	r2,2
 10804a8:	18bfda26 	beq	r3,r2,1080414 <__muldf3+0x5c>
 10804ac:	20bfec26 	beq	r4,r2,1080460 <__muldf3+0xa8>
 10804b0:	dc000d17 	ldw	r16,52(sp)
 10804b4:	dd000817 	ldw	r20,32(sp)
 10804b8:	dc800917 	ldw	r18,36(sp)
 10804bc:	8009883a 	mov	r4,r16
 10804c0:	000b883a 	mov	r5,zero
 10804c4:	a00d883a 	mov	r6,r20
 10804c8:	000f883a 	mov	r7,zero
 10804cc:	10809240 	call	1080924 <__muldi3>
 10804d0:	dc400e17 	ldw	r17,56(sp)
 10804d4:	9009883a 	mov	r4,r18
 10804d8:	800d883a 	mov	r6,r16
 10804dc:	000b883a 	mov	r5,zero
 10804e0:	000f883a 	mov	r7,zero
 10804e4:	102f883a 	mov	r23,r2
 10804e8:	1827883a 	mov	r19,r3
 10804ec:	10809240 	call	1080924 <__muldi3>
 10804f0:	900d883a 	mov	r6,r18
 10804f4:	8809883a 	mov	r4,r17
 10804f8:	000b883a 	mov	r5,zero
 10804fc:	000f883a 	mov	r7,zero
 1080500:	102b883a 	mov	r21,r2
 1080504:	1821883a 	mov	r16,r3
 1080508:	10809240 	call	1080924 <__muldi3>
 108050c:	8809883a 	mov	r4,r17
 1080510:	000b883a 	mov	r5,zero
 1080514:	a00d883a 	mov	r6,r20
 1080518:	000f883a 	mov	r7,zero
 108051c:	102d883a 	mov	r22,r2
 1080520:	1825883a 	mov	r18,r3
 1080524:	10809240 	call	1080924 <__muldi3>
 1080528:	154b883a 	add	r5,r2,r21
 108052c:	2889803a 	cmpltu	r4,r5,r2
 1080530:	1c07883a 	add	r3,r3,r16
 1080534:	20c9883a 	add	r4,r4,r3
 1080538:	24004b36 	bltu	r4,r16,1080668 <__muldf3+0x2b0>
 108053c:	8100011e 	bne	r16,r4,1080544 <__muldf3+0x18c>
 1080540:	2d404936 	bltu	r5,r21,1080668 <__muldf3+0x2b0>
 1080544:	0011883a 	mov	r8,zero
 1080548:	0007883a 	mov	r3,zero
 108054c:	2ccb883a 	add	r5,r5,r19
 1080550:	b80d883a 	mov	r6,r23
 1080554:	2cc0012e 	bgeu	r5,r19,108055c <__muldf3+0x1a4>
 1080558:	02000044 	movi	r8,1
 108055c:	258f883a 	add	r7,r4,r22
 1080560:	3909803a 	cmpltu	r4,r7,r4
 1080564:	da400c17 	ldw	r9,48(sp)
 1080568:	2489883a 	add	r4,r4,r18
 108056c:	d8800717 	ldw	r2,28(sp)
 1080570:	20c9883a 	add	r4,r4,r3
 1080574:	da800b17 	ldw	r10,44(sp)
 1080578:	d8c00617 	ldw	r3,24(sp)
 108057c:	3a11883a 	add	r8,r7,r8
 1080580:	4885883a 	add	r2,r9,r2
 1080584:	50c6c03a 	cmpne	r3,r10,r3
 1080588:	41cf803a 	cmpltu	r7,r8,r7
 108058c:	12400104 	addi	r9,r2,4
 1080590:	d8c00115 	stw	r3,4(sp)
 1080594:	3909883a 	add	r4,r7,r4
 1080598:	da400215 	stw	r9,8(sp)
 108059c:	03480034 	movhi	r13,8192
 10805a0:	6b7fffc4 	addi	r13,r13,-1
 10805a4:	4007883a 	mov	r3,r8
 10805a8:	6900102e 	bgeu	r13,r4,10805ec <__muldf3+0x234>
 10805ac:	10800144 	addi	r2,r2,5
 10805b0:	180ed07a 	srli	r7,r3,1
 10805b4:	18c0004c 	andi	r3,r3,1
 10805b8:	201097fa 	slli	r8,r4,31
 10805bc:	281697fa 	slli	r11,r5,31
 10805c0:	2008d07a 	srli	r4,r4,1
 10805c4:	3014d07a 	srli	r10,r6,1
 10805c8:	2812d07a 	srli	r9,r5,1
 10805cc:	1019883a 	mov	r12,r2
 10805d0:	18000226 	beq	r3,zero,10805dc <__muldf3+0x224>
 10805d4:	5a8cb03a 	or	r6,r11,r10
 10805d8:	49600034 	orhi	r5,r9,32768
 10805dc:	41c6b03a 	or	r3,r8,r7
 10805e0:	10800044 	addi	r2,r2,1
 10805e4:	693ff236 	bltu	r13,r4,10805b0 <__muldf3+0x1f8>
 10805e8:	db000215 	stw	r12,8(sp)
 10805ec:	03440034 	movhi	r13,4096
 10805f0:	6b7fffc4 	addi	r13,r13,-1
 10805f4:	69001336 	bltu	r13,r4,1080644 <__muldf3+0x28c>
 10805f8:	d8800217 	ldw	r2,8(sp)
 10805fc:	10bfffc4 	addi	r2,r2,-1
 1080600:	18d3883a 	add	r9,r3,r3
 1080604:	48c7803a 	cmpltu	r3,r9,r3
 1080608:	2109883a 	add	r4,r4,r4
 108060c:	190f883a 	add	r7,r3,r4
 1080610:	3191883a 	add	r8,r6,r6
 1080614:	4197803a 	cmpltu	r11,r8,r6
 1080618:	2955883a 	add	r10,r5,r5
 108061c:	1019883a 	mov	r12,r2
 1080620:	4807883a 	mov	r3,r9
 1080624:	3809883a 	mov	r4,r7
 1080628:	2800010e 	bge	r5,zero,1080630 <__muldf3+0x278>
 108062c:	48c00054 	ori	r3,r9,1
 1080630:	400d883a 	mov	r6,r8
 1080634:	5a8b883a 	add	r5,r11,r10
 1080638:	10bfffc4 	addi	r2,r2,-1
 108063c:	69fff02e 	bgeu	r13,r7,1080600 <__muldf3+0x248>
 1080640:	db000215 	stw	r12,8(sp)
 1080644:	18803fcc 	andi	r2,r3,255
 1080648:	01c02004 	movi	r7,128
 108064c:	11c00926 	beq	r2,r7,1080674 <__muldf3+0x2bc>
 1080650:	008000c4 	movi	r2,3
 1080654:	d9000415 	stw	r4,16(sp)
 1080658:	d8c00315 	stw	r3,12(sp)
 108065c:	d8800015 	stw	r2,0(sp)
 1080660:	d809883a 	mov	r4,sp
 1080664:	003f7006 	br	1080428 <__muldf3+0x70>
 1080668:	0011883a 	mov	r8,zero
 108066c:	00c00044 	movi	r3,1
 1080670:	003fb606 	br	108054c <__muldf3+0x194>
 1080674:	19c0400c 	andi	r7,r3,256
 1080678:	383ff51e 	bne	r7,zero,1080650 <__muldf3+0x298>
 108067c:	314ab03a 	or	r5,r6,r5
 1080680:	283ff326 	beq	r5,zero,1080650 <__muldf3+0x298>
 1080684:	1885883a 	add	r2,r3,r2
 1080688:	10cb803a 	cmpltu	r5,r2,r3
 108068c:	00ffc004 	movi	r3,-256
 1080690:	10c6703a 	and	r3,r2,r3
 1080694:	2909883a 	add	r4,r5,r4
 1080698:	003fed06 	br	1080650 <__muldf3+0x298>

0108069c <__divdf3>:
 108069c:	defff104 	addi	sp,sp,-60
 10806a0:	d9000c15 	stw	r4,48(sp)
 10806a4:	d9400d15 	stw	r5,52(sp)
 10806a8:	d9000c04 	addi	r4,sp,48
 10806ac:	d9400504 	addi	r5,sp,20
 10806b0:	dfc00e15 	stw	ra,56(sp)
 10806b4:	d9800a15 	stw	r6,40(sp)
 10806b8:	d9c00b15 	stw	r7,44(sp)
 10806bc:	1080c540 	call	1080c54 <__unpack_d>
 10806c0:	d9000a04 	addi	r4,sp,40
 10806c4:	d80b883a 	mov	r5,sp
 10806c8:	1080c540 	call	1080c54 <__unpack_d>
 10806cc:	d8c00517 	ldw	r3,20(sp)
 10806d0:	00800044 	movi	r2,1
 10806d4:	10c00536 	bltu	r2,r3,10806ec <__divdf3+0x50>
 10806d8:	d9000504 	addi	r4,sp,20
 10806dc:	1080a300 	call	1080a30 <__pack_d>
 10806e0:	dfc00e17 	ldw	ra,56(sp)
 10806e4:	dec00f04 	addi	sp,sp,60
 10806e8:	f800283a 	ret
 10806ec:	d9000017 	ldw	r4,0(sp)
 10806f0:	11000536 	bltu	r2,r4,1080708 <__divdf3+0x6c>
 10806f4:	d809883a 	mov	r4,sp
 10806f8:	1080a300 	call	1080a30 <__pack_d>
 10806fc:	dfc00e17 	ldw	ra,56(sp)
 1080700:	dec00f04 	addi	sp,sp,60
 1080704:	f800283a 	ret
 1080708:	d9800617 	ldw	r6,24(sp)
 108070c:	d9400117 	ldw	r5,4(sp)
 1080710:	00800104 	movi	r2,4
 1080714:	314af03a 	xor	r5,r6,r5
 1080718:	d9400615 	stw	r5,24(sp)
 108071c:	18800226 	beq	r3,r2,1080728 <__divdf3+0x8c>
 1080720:	01400084 	movi	r5,2
 1080724:	1940041e 	bne	r3,r5,1080738 <__divdf3+0x9c>
 1080728:	193feb1e 	bne	r3,r4,10806d8 <__divdf3+0x3c>
 108072c:	01004274 	movhi	r4,265
 1080730:	212fa704 	addi	r4,r4,-16740
 1080734:	003fe906 	br	10806dc <__divdf3+0x40>
 1080738:	20803326 	beq	r4,r2,1080808 <__divdf3+0x16c>
 108073c:	21403726 	beq	r4,r5,108081c <__divdf3+0x180>
 1080740:	d8800217 	ldw	r2,8(sp)
 1080744:	d9000717 	ldw	r4,28(sp)
 1080748:	d8c00917 	ldw	r3,36(sp)
 108074c:	da000417 	ldw	r8,16(sp)
 1080750:	2089c83a 	sub	r4,r4,r2
 1080754:	d9000715 	stw	r4,28(sp)
 1080758:	d8800817 	ldw	r2,32(sp)
 108075c:	dbc00317 	ldw	r15,12(sp)
 1080760:	1a000236 	bltu	r3,r8,108076c <__divdf3+0xd0>
 1080764:	40c0081e 	bne	r8,r3,1080788 <__divdf3+0xec>
 1080768:	13c0072e 	bgeu	r2,r15,1080788 <__divdf3+0xec>
 108076c:	108b883a 	add	r5,r2,r2
 1080770:	288d803a 	cmpltu	r6,r5,r2
 1080774:	18c7883a 	add	r3,r3,r3
 1080778:	213fffc4 	addi	r4,r4,-1
 108077c:	2805883a 	mov	r2,r5
 1080780:	30c7883a 	add	r3,r6,r3
 1080784:	d9000715 	stw	r4,28(sp)
 1080788:	01400f44 	movi	r5,61
 108078c:	000f883a 	mov	r7,zero
 1080790:	01040034 	movhi	r4,4096
 1080794:	0019883a 	mov	r12,zero
 1080798:	001b883a 	mov	r13,zero
 108079c:	201697fa 	slli	r11,r4,31
 10807a0:	3814d07a 	srli	r10,r7,1
 10807a4:	297fffc4 	addi	r5,r5,-1
 10807a8:	1a000936 	bltu	r3,r8,10807d0 <__divdf3+0x134>
 10807ac:	13cdc83a 	sub	r6,r2,r15
 10807b0:	1193803a 	cmpltu	r9,r2,r6
 10807b4:	1a1dc83a 	sub	r14,r3,r8
 10807b8:	40c0011e 	bne	r8,r3,10807c0 <__divdf3+0x124>
 10807bc:	13c00436 	bltu	r2,r15,10807d0 <__divdf3+0x134>
 10807c0:	3005883a 	mov	r2,r6
 10807c4:	7247c83a 	sub	r3,r14,r9
 10807c8:	61d8b03a 	or	r12,r12,r7
 10807cc:	691ab03a 	or	r13,r13,r4
 10807d0:	108d883a 	add	r6,r2,r2
 10807d4:	3093803a 	cmpltu	r9,r6,r2
 10807d8:	18c7883a 	add	r3,r3,r3
 10807dc:	5a8eb03a 	or	r7,r11,r10
 10807e0:	2008d07a 	srli	r4,r4,1
 10807e4:	3005883a 	mov	r2,r6
 10807e8:	48c7883a 	add	r3,r9,r3
 10807ec:	283feb1e 	bne	r5,zero,108079c <__divdf3+0x100>
 10807f0:	61003fcc 	andi	r4,r12,255
 10807f4:	01402004 	movi	r5,128
 10807f8:	21400b26 	beq	r4,r5,1080828 <__divdf3+0x18c>
 10807fc:	db000815 	stw	r12,32(sp)
 1080800:	db400915 	stw	r13,36(sp)
 1080804:	003fb406 	br	10806d8 <__divdf3+0x3c>
 1080808:	d8000815 	stw	zero,32(sp)
 108080c:	d8000915 	stw	zero,36(sp)
 1080810:	d8000715 	stw	zero,28(sp)
 1080814:	d9000504 	addi	r4,sp,20
 1080818:	003fb006 	br	10806dc <__divdf3+0x40>
 108081c:	d8800515 	stw	r2,20(sp)
 1080820:	d9000504 	addi	r4,sp,20
 1080824:	003fad06 	br	10806dc <__divdf3+0x40>
 1080828:	6140400c 	andi	r5,r12,256
 108082c:	283ff31e 	bne	r5,zero,10807fc <__divdf3+0x160>
 1080830:	30c4b03a 	or	r2,r6,r3
 1080834:	103ff126 	beq	r2,zero,10807fc <__divdf3+0x160>
 1080838:	6109883a 	add	r4,r12,r4
 108083c:	2305803a 	cmpltu	r2,r4,r12
 1080840:	033fc004 	movi	r12,-256
 1080844:	2318703a 	and	r12,r4,r12
 1080848:	135b883a 	add	r13,r2,r13
 108084c:	003feb06 	br	10807fc <__divdf3+0x160>

01080850 <__floatsidf>:
 1080850:	2004d7fa 	srli	r2,r4,31
 1080854:	defff904 	addi	sp,sp,-28
 1080858:	00c000c4 	movi	r3,3
 108085c:	dfc00615 	stw	ra,24(sp)
 1080860:	dc000515 	stw	r16,20(sp)
 1080864:	d8c00015 	stw	r3,0(sp)
 1080868:	d8800115 	stw	r2,4(sp)
 108086c:	2000081e 	bne	r4,zero,1080890 <__floatsidf+0x40>
 1080870:	00800084 	movi	r2,2
 1080874:	d8800015 	stw	r2,0(sp)
 1080878:	d809883a 	mov	r4,sp
 108087c:	1080a300 	call	1080a30 <__pack_d>
 1080880:	dfc00617 	ldw	ra,24(sp)
 1080884:	dc000517 	ldw	r16,20(sp)
 1080888:	dec00704 	addi	sp,sp,28
 108088c:	f800283a 	ret
 1080890:	00c00f04 	movi	r3,60
 1080894:	d8c00215 	stw	r3,8(sp)
 1080898:	10000f1e 	bne	r2,zero,10808d8 <__floatsidf+0x88>
 108089c:	2021883a 	mov	r16,r4
 10808a0:	8009883a 	mov	r4,r16
 10808a4:	10809840 	call	1080984 <__clzsi2>
 10808a8:	11000744 	addi	r4,r2,29
 10808ac:	0100110e 	bge	zero,r4,10808f4 <__floatsidf+0xa4>
 10808b0:	10ffff44 	addi	r3,r2,-3
 10808b4:	18001216 	blt	r3,zero,1080900 <__floatsidf+0xb0>
 10808b8:	80c6983a 	sll	r3,r16,r3
 10808bc:	0009883a 	mov	r4,zero
 10808c0:	014007c4 	movi	r5,31
 10808c4:	2885c83a 	sub	r2,r5,r2
 10808c8:	d9000315 	stw	r4,12(sp)
 10808cc:	d8c00415 	stw	r3,16(sp)
 10808d0:	d8800215 	stw	r2,8(sp)
 10808d4:	003fe806 	br	1080878 <__floatsidf+0x28>
 10808d8:	00a00034 	movhi	r2,32768
 10808dc:	20800e26 	beq	r4,r2,1080918 <__floatsidf+0xc8>
 10808e0:	0121c83a 	sub	r16,zero,r4
 10808e4:	8009883a 	mov	r4,r16
 10808e8:	10809840 	call	1080984 <__clzsi2>
 10808ec:	11000744 	addi	r4,r2,29
 10808f0:	013fef16 	blt	zero,r4,10808b0 <__floatsidf+0x60>
 10808f4:	dc000315 	stw	r16,12(sp)
 10808f8:	d8000415 	stw	zero,16(sp)
 10808fc:	003fde06 	br	1080878 <__floatsidf+0x28>
 1080900:	800ad07a 	srli	r5,r16,1
 1080904:	00c007c4 	movi	r3,31
 1080908:	1907c83a 	sub	r3,r3,r4
 108090c:	28c6d83a 	srl	r3,r5,r3
 1080910:	8108983a 	sll	r4,r16,r4
 1080914:	003fea06 	br	10808c0 <__floatsidf+0x70>
 1080918:	0005883a 	mov	r2,zero
 108091c:	00f07834 	movhi	r3,49632
 1080920:	003fd706 	br	1080880 <__floatsidf+0x30>

01080924 <__muldi3>:
 1080924:	20bfffcc 	andi	r2,r4,65535
 1080928:	2010d43a 	srli	r8,r4,16
 108092c:	30ffffcc 	andi	r3,r6,65535
 1080930:	3014d43a 	srli	r10,r6,16
 1080934:	1893383a 	mul	r9,r3,r2
 1080938:	1a07383a 	mul	r3,r3,r8
 108093c:	5085383a 	mul	r2,r10,r2
 1080940:	4816d43a 	srli	r11,r9,16
 1080944:	5211383a 	mul	r8,r10,r8
 1080948:	1885883a 	add	r2,r3,r2
 108094c:	12c5883a 	add	r2,r2,r11
 1080950:	10c0022e 	bgeu	r2,r3,108095c <__muldi3+0x38>
 1080954:	00c00074 	movhi	r3,1
 1080958:	40d1883a 	add	r8,r8,r3
 108095c:	1014d43a 	srli	r10,r2,16
 1080960:	21c9383a 	mul	r4,r4,r7
 1080964:	314d383a 	mul	r6,r6,r5
 1080968:	1004943a 	slli	r2,r2,16
 108096c:	4291883a 	add	r8,r8,r10
 1080970:	4a7fffcc 	andi	r9,r9,65535
 1080974:	2187883a 	add	r3,r4,r6
 1080978:	1245883a 	add	r2,r2,r9
 108097c:	1a07883a 	add	r3,r3,r8
 1080980:	f800283a 	ret

01080984 <__clzsi2>:
 1080984:	00bfffd4 	movui	r2,65535
 1080988:	11000b36 	bltu	r2,r4,10809b8 <__clzsi2+0x34>
 108098c:	00803fc4 	movi	r2,255
 1080990:	11001e2e 	bgeu	r2,r4,1080a0c <__clzsi2+0x88>
 1080994:	00c00204 	movi	r3,8
 1080998:	20c8d83a 	srl	r4,r4,r3
 108099c:	00c04274 	movhi	r3,265
 10809a0:	18efac04 	addi	r3,r3,-16720
 10809a4:	00800604 	movi	r2,24
 10809a8:	1909883a 	add	r4,r3,r4
 10809ac:	20c00003 	ldbu	r3,0(r4)
 10809b0:	10c5c83a 	sub	r2,r2,r3
 10809b4:	f800283a 	ret
 10809b8:	00804034 	movhi	r2,256
 10809bc:	10bfffc4 	addi	r2,r2,-1
 10809c0:	11000936 	bltu	r2,r4,10809e8 <__clzsi2+0x64>
 10809c4:	00800404 	movi	r2,16
 10809c8:	1007883a 	mov	r3,r2
 10809cc:	20c8d83a 	srl	r4,r4,r3
 10809d0:	00c04274 	movhi	r3,265
 10809d4:	18efac04 	addi	r3,r3,-16720
 10809d8:	1909883a 	add	r4,r3,r4
 10809dc:	20c00003 	ldbu	r3,0(r4)
 10809e0:	10c5c83a 	sub	r2,r2,r3
 10809e4:	f800283a 	ret
 10809e8:	00c00604 	movi	r3,24
 10809ec:	20c8d83a 	srl	r4,r4,r3
 10809f0:	00c04274 	movhi	r3,265
 10809f4:	18efac04 	addi	r3,r3,-16720
 10809f8:	00800204 	movi	r2,8
 10809fc:	1909883a 	add	r4,r3,r4
 1080a00:	20c00003 	ldbu	r3,0(r4)
 1080a04:	10c5c83a 	sub	r2,r2,r3
 1080a08:	f800283a 	ret
 1080a0c:	0007883a 	mov	r3,zero
 1080a10:	20c8d83a 	srl	r4,r4,r3
 1080a14:	00c04274 	movhi	r3,265
 1080a18:	18efac04 	addi	r3,r3,-16720
 1080a1c:	00800804 	movi	r2,32
 1080a20:	1909883a 	add	r4,r3,r4
 1080a24:	20c00003 	ldbu	r3,0(r4)
 1080a28:	10c5c83a 	sub	r2,r2,r3
 1080a2c:	f800283a 	ret

01080a30 <__pack_d>:
 1080a30:	20800017 	ldw	r2,0(r4)
 1080a34:	defff804 	addi	sp,sp,-32
 1080a38:	dcc00315 	stw	r19,12(sp)
 1080a3c:	dc800215 	stw	r18,8(sp)
 1080a40:	dfc00715 	stw	ra,28(sp)
 1080a44:	dd800615 	stw	r22,24(sp)
 1080a48:	dd400515 	stw	r21,20(sp)
 1080a4c:	dd000415 	stw	r20,16(sp)
 1080a50:	dc400115 	stw	r17,4(sp)
 1080a54:	dc000015 	stw	r16,0(sp)
 1080a58:	04800044 	movi	r18,1
 1080a5c:	24400317 	ldw	r17,12(r4)
 1080a60:	24000417 	ldw	r16,16(r4)
 1080a64:	24c00117 	ldw	r19,4(r4)
 1080a68:	9080422e 	bgeu	r18,r2,1080b74 <__pack_d+0x144>
 1080a6c:	00c00104 	movi	r3,4
 1080a70:	10c03c26 	beq	r2,r3,1080b64 <__pack_d+0x134>
 1080a74:	00c00084 	movi	r3,2
 1080a78:	10c01926 	beq	r2,r3,1080ae0 <__pack_d+0xb0>
 1080a7c:	8c04b03a 	or	r2,r17,r16
 1080a80:	10001726 	beq	r2,zero,1080ae0 <__pack_d+0xb0>
 1080a84:	21000217 	ldw	r4,8(r4)
 1080a88:	00bf0084 	movi	r2,-1022
 1080a8c:	20804016 	blt	r4,r2,1080b90 <__pack_d+0x160>
 1080a90:	0080ffc4 	movi	r2,1023
 1080a94:	11003316 	blt	r2,r4,1080b64 <__pack_d+0x134>
 1080a98:	88803fcc 	andi	r2,r17,255
 1080a9c:	00c02004 	movi	r3,128
 1080aa0:	10c02926 	beq	r2,r3,1080b48 <__pack_d+0x118>
 1080aa4:	88801fc4 	addi	r2,r17,127
 1080aa8:	1463803a 	cmpltu	r17,r2,r17
 1080aac:	8c21883a 	add	r16,r17,r16
 1080ab0:	1023883a 	mov	r17,r2
 1080ab4:	00880034 	movhi	r2,8192
 1080ab8:	10bfffc4 	addi	r2,r2,-1
 1080abc:	14001c36 	bltu	r2,r16,1080b30 <__pack_d+0x100>
 1080ac0:	2100ffc4 	addi	r4,r4,1023
 1080ac4:	8006963a 	slli	r3,r16,24
 1080ac8:	8804d23a 	srli	r2,r17,8
 1080acc:	8020913a 	slli	r16,r16,4
 1080ad0:	2101ffcc 	andi	r4,r4,2047
 1080ad4:	1884b03a 	or	r2,r3,r2
 1080ad8:	8020d33a 	srli	r16,r16,12
 1080adc:	00000306 	br	1080aec <__pack_d+0xbc>
 1080ae0:	0009883a 	mov	r4,zero
 1080ae4:	0005883a 	mov	r2,zero
 1080ae8:	0021883a 	mov	r16,zero
 1080aec:	2008953a 	slli	r4,r4,20
 1080af0:	982697fa 	slli	r19,r19,31
 1080af4:	00c00434 	movhi	r3,16
 1080af8:	18ffffc4 	addi	r3,r3,-1
 1080afc:	80e0703a 	and	r16,r16,r3
 1080b00:	8106b03a 	or	r3,r16,r4
 1080b04:	1cc6b03a 	or	r3,r3,r19
 1080b08:	dfc00717 	ldw	ra,28(sp)
 1080b0c:	dd800617 	ldw	r22,24(sp)
 1080b10:	dd400517 	ldw	r21,20(sp)
 1080b14:	dd000417 	ldw	r20,16(sp)
 1080b18:	dcc00317 	ldw	r19,12(sp)
 1080b1c:	dc800217 	ldw	r18,8(sp)
 1080b20:	dc400117 	ldw	r17,4(sp)
 1080b24:	dc000017 	ldw	r16,0(sp)
 1080b28:	dec00804 	addi	sp,sp,32
 1080b2c:	f800283a 	ret
 1080b30:	800697fa 	slli	r3,r16,31
 1080b34:	8804d07a 	srli	r2,r17,1
 1080b38:	21010004 	addi	r4,r4,1024
 1080b3c:	8020d07a 	srli	r16,r16,1
 1080b40:	18a2b03a 	or	r17,r3,r2
 1080b44:	003fdf06 	br	1080ac4 <__pack_d+0x94>
 1080b48:	88c0400c 	andi	r3,r17,256
 1080b4c:	183fd926 	beq	r3,zero,1080ab4 <__pack_d+0x84>
 1080b50:	8885883a 	add	r2,r17,r2
 1080b54:	1463803a 	cmpltu	r17,r2,r17
 1080b58:	8c21883a 	add	r16,r17,r16
 1080b5c:	1023883a 	mov	r17,r2
 1080b60:	003fd406 	br	1080ab4 <__pack_d+0x84>
 1080b64:	0101ffc4 	movi	r4,2047
 1080b68:	0005883a 	mov	r2,zero
 1080b6c:	0021883a 	mov	r16,zero
 1080b70:	003fde06 	br	1080aec <__pack_d+0xbc>
 1080b74:	84000234 	orhi	r16,r16,8
 1080b78:	00c00434 	movhi	r3,16
 1080b7c:	18ffffc4 	addi	r3,r3,-1
 1080b80:	8805883a 	mov	r2,r17
 1080b84:	80e0703a 	and	r16,r16,r3
 1080b88:	0101ffc4 	movi	r4,2047
 1080b8c:	003fd706 	br	1080aec <__pack_d+0xbc>
 1080b90:	1129c83a 	sub	r20,r2,r4
 1080b94:	00800e04 	movi	r2,56
 1080b98:	15002716 	blt	r2,r20,1080c38 <__pack_d+0x208>
 1080b9c:	800b883a 	mov	r5,r16
 1080ba0:	a00d883a 	mov	r6,r20
 1080ba4:	8809883a 	mov	r4,r17
 1080ba8:	1080d580 	call	1080d58 <__lshrdi3>
 1080bac:	9009883a 	mov	r4,r18
 1080bb0:	000b883a 	mov	r5,zero
 1080bb4:	a00d883a 	mov	r6,r20
 1080bb8:	102d883a 	mov	r22,r2
 1080bbc:	182b883a 	mov	r21,r3
 1080bc0:	1080d9c0 	call	1080d9c <__ashldi3>
 1080bc4:	1009003a 	cmpeq	r4,r2,zero
 1080bc8:	1907c83a 	sub	r3,r3,r4
 1080bcc:	10bfffc4 	addi	r2,r2,-1
 1080bd0:	1c20703a 	and	r16,r3,r16
 1080bd4:	1444703a 	and	r2,r2,r17
 1080bd8:	1404b03a 	or	r2,r2,r16
 1080bdc:	1004c03a 	cmpne	r2,r2,zero
 1080be0:	1584b03a 	or	r2,r2,r22
 1080be4:	11003fcc 	andi	r4,r2,255
 1080be8:	01402004 	movi	r5,128
 1080bec:	a807883a 	mov	r3,r21
 1080bf0:	2140131e 	bne	r4,r5,1080c40 <__pack_d+0x210>
 1080bf4:	1140400c 	andi	r5,r2,256
 1080bf8:	28000426 	beq	r5,zero,1080c0c <__pack_d+0x1dc>
 1080bfc:	1109883a 	add	r4,r2,r4
 1080c00:	2085803a 	cmpltu	r2,r4,r2
 1080c04:	1547883a 	add	r3,r2,r21
 1080c08:	2005883a 	mov	r2,r4
 1080c0c:	1808963a 	slli	r4,r3,24
 1080c10:	1004d23a 	srli	r2,r2,8
 1080c14:	1820913a 	slli	r16,r3,4
 1080c18:	01440034 	movhi	r5,4096
 1080c1c:	297fffc4 	addi	r5,r5,-1
 1080c20:	2084b03a 	or	r2,r4,r2
 1080c24:	8020d33a 	srli	r16,r16,12
 1080c28:	01000044 	movi	r4,1
 1080c2c:	28ffaf36 	bltu	r5,r3,1080aec <__pack_d+0xbc>
 1080c30:	0009883a 	mov	r4,zero
 1080c34:	003fad06 	br	1080aec <__pack_d+0xbc>
 1080c38:	0005883a 	mov	r2,zero
 1080c3c:	0007883a 	mov	r3,zero
 1080c40:	11001fc4 	addi	r4,r2,127
 1080c44:	2085803a 	cmpltu	r2,r4,r2
 1080c48:	10c7883a 	add	r3,r2,r3
 1080c4c:	2005883a 	mov	r2,r4
 1080c50:	003fee06 	br	1080c0c <__pack_d+0x1dc>

01080c54 <__unpack_d>:
 1080c54:	21800117 	ldw	r6,4(r4)
 1080c58:	20c00017 	ldw	r3,0(r4)
 1080c5c:	3004d7fa 	srli	r2,r6,31
 1080c60:	3008d53a 	srli	r4,r6,20
 1080c64:	28800115 	stw	r2,4(r5)
 1080c68:	2101ffcc 	andi	r4,r4,2047
 1080c6c:	00800434 	movhi	r2,16
 1080c70:	10bfffc4 	addi	r2,r2,-1
 1080c74:	3084703a 	and	r2,r6,r2
 1080c78:	20001a1e 	bne	r4,zero,1080ce4 <__unpack_d+0x90>
 1080c7c:	1888b03a 	or	r4,r3,r2
 1080c80:	20002626 	beq	r4,zero,1080d1c <__unpack_d+0xc8>
 1080c84:	1808d63a 	srli	r4,r3,24
 1080c88:	1004923a 	slli	r2,r2,8
 1080c8c:	01bf0084 	movi	r6,-1022
 1080c90:	29800215 	stw	r6,8(r5)
 1080c94:	2084b03a 	or	r2,r4,r2
 1080c98:	010000c4 	movi	r4,3
 1080c9c:	29000015 	stw	r4,0(r5)
 1080ca0:	02040034 	movhi	r8,4096
 1080ca4:	423fffc4 	addi	r8,r8,-1
 1080ca8:	1806923a 	slli	r3,r3,8
 1080cac:	40801836 	bltu	r8,r2,1080d10 <__unpack_d+0xbc>
 1080cb0:	013f0044 	movi	r4,-1023
 1080cb4:	18cd883a 	add	r6,r3,r3
 1080cb8:	30c7803a 	cmpltu	r3,r6,r3
 1080cbc:	1085883a 	add	r2,r2,r2
 1080cc0:	1885883a 	add	r2,r3,r2
 1080cc4:	200f883a 	mov	r7,r4
 1080cc8:	3007883a 	mov	r3,r6
 1080ccc:	213fffc4 	addi	r4,r4,-1
 1080cd0:	40bff82e 	bgeu	r8,r2,1080cb4 <__unpack_d+0x60>
 1080cd4:	29c00215 	stw	r7,8(r5)
 1080cd8:	28c00315 	stw	r3,12(r5)
 1080cdc:	28800415 	stw	r2,16(r5)
 1080ce0:	f800283a 	ret
 1080ce4:	01c1ffc4 	movi	r7,2047
 1080ce8:	21c00f26 	beq	r4,r7,1080d28 <__unpack_d+0xd4>
 1080cec:	180cd63a 	srli	r6,r3,24
 1080cf0:	1004923a 	slli	r2,r2,8
 1080cf4:	213f0044 	addi	r4,r4,-1023
 1080cf8:	1806923a 	slli	r3,r3,8
 1080cfc:	3084b03a 	or	r2,r6,r2
 1080d00:	29000215 	stw	r4,8(r5)
 1080d04:	010000c4 	movi	r4,3
 1080d08:	10840034 	orhi	r2,r2,4096
 1080d0c:	29000015 	stw	r4,0(r5)
 1080d10:	28c00315 	stw	r3,12(r5)
 1080d14:	28800415 	stw	r2,16(r5)
 1080d18:	f800283a 	ret
 1080d1c:	00800084 	movi	r2,2
 1080d20:	28800015 	stw	r2,0(r5)
 1080d24:	f800283a 	ret
 1080d28:	1888b03a 	or	r4,r3,r2
 1080d2c:	20000526 	beq	r4,zero,1080d44 <__unpack_d+0xf0>
 1080d30:	3180022c 	andhi	r6,r6,8
 1080d34:	30000626 	beq	r6,zero,1080d50 <__unpack_d+0xfc>
 1080d38:	01000044 	movi	r4,1
 1080d3c:	29000015 	stw	r4,0(r5)
 1080d40:	003ff306 	br	1080d10 <__unpack_d+0xbc>
 1080d44:	00800104 	movi	r2,4
 1080d48:	28800015 	stw	r2,0(r5)
 1080d4c:	f800283a 	ret
 1080d50:	28000015 	stw	zero,0(r5)
 1080d54:	003fee06 	br	1080d10 <__unpack_d+0xbc>

01080d58 <__lshrdi3>:
 1080d58:	2005883a 	mov	r2,r4
 1080d5c:	2807883a 	mov	r3,r5
 1080d60:	30000826 	beq	r6,zero,1080d84 <__lshrdi3+0x2c>
 1080d64:	01000804 	movi	r4,32
 1080d68:	2189c83a 	sub	r4,r4,r6
 1080d6c:	0100060e 	bge	zero,r4,1080d88 <__lshrdi3+0x30>
 1080d70:	1184d83a 	srl	r2,r2,r6
 1080d74:	2908983a 	sll	r4,r5,r4
 1080d78:	298cd83a 	srl	r6,r5,r6
 1080d7c:	2084b03a 	or	r2,r4,r2
 1080d80:	3007883a 	mov	r3,r6
 1080d84:	f800283a 	ret
 1080d88:	0105c83a 	sub	r2,zero,r4
 1080d8c:	000d883a 	mov	r6,zero
 1080d90:	2884d83a 	srl	r2,r5,r2
 1080d94:	3007883a 	mov	r3,r6
 1080d98:	003ffa06 	br	1080d84 <__lshrdi3+0x2c>

01080d9c <__ashldi3>:
 1080d9c:	2005883a 	mov	r2,r4
 1080da0:	2807883a 	mov	r3,r5
 1080da4:	30000826 	beq	r6,zero,1080dc8 <__ashldi3+0x2c>
 1080da8:	01000804 	movi	r4,32
 1080dac:	2189c83a 	sub	r4,r4,r6
 1080db0:	0100060e 	bge	zero,r4,1080dcc <__ashldi3+0x30>
 1080db4:	1108d83a 	srl	r4,r2,r4
 1080db8:	2986983a 	sll	r3,r5,r6
 1080dbc:	118c983a 	sll	r6,r2,r6
 1080dc0:	20c6b03a 	or	r3,r4,r3
 1080dc4:	3005883a 	mov	r2,r6
 1080dc8:	f800283a 	ret
 1080dcc:	0107c83a 	sub	r3,zero,r4
 1080dd0:	000d883a 	mov	r6,zero
 1080dd4:	10c6983a 	sll	r3,r2,r3
 1080dd8:	3005883a 	mov	r2,r6
 1080ddc:	003ffa06 	br	1080dc8 <__ashldi3+0x2c>

01080de0 <_printf_r>:
 1080de0:	defffd04 	addi	sp,sp,-12
 1080de4:	dfc00015 	stw	ra,0(sp)
 1080de8:	d9800115 	stw	r6,4(sp)
 1080dec:	d9c00215 	stw	r7,8(sp)
 1080df0:	280d883a 	mov	r6,r5
 1080df4:	21400217 	ldw	r5,8(r4)
 1080df8:	d9c00104 	addi	r7,sp,4
 1080dfc:	1080fa00 	call	1080fa0 <___vfprintf_internal_r>
 1080e00:	dfc00017 	ldw	ra,0(sp)
 1080e04:	dec00304 	addi	sp,sp,12
 1080e08:	f800283a 	ret

01080e0c <printf>:
 1080e0c:	defffc04 	addi	sp,sp,-16
 1080e10:	dfc00015 	stw	ra,0(sp)
 1080e14:	d9400115 	stw	r5,4(sp)
 1080e18:	d9800215 	stw	r6,8(sp)
 1080e1c:	d9c00315 	stw	r7,12(sp)
 1080e20:	00804274 	movhi	r2,265
 1080e24:	10b6f704 	addi	r2,r2,-9252
 1080e28:	10800017 	ldw	r2,0(r2)
 1080e2c:	200b883a 	mov	r5,r4
 1080e30:	d9800104 	addi	r6,sp,4
 1080e34:	11000217 	ldw	r4,8(r2)
 1080e38:	1082d980 	call	1082d98 <__vfprintf_internal>
 1080e3c:	dfc00017 	ldw	ra,0(sp)
 1080e40:	dec00404 	addi	sp,sp,16
 1080e44:	f800283a 	ret

01080e48 <_puts_r>:
 1080e48:	defff604 	addi	sp,sp,-40
 1080e4c:	dc400815 	stw	r17,32(sp)
 1080e50:	2023883a 	mov	r17,r4
 1080e54:	2809883a 	mov	r4,r5
 1080e58:	dc000715 	stw	r16,28(sp)
 1080e5c:	dfc00915 	stw	ra,36(sp)
 1080e60:	2821883a 	mov	r16,r5
 1080e64:	1080ee00 	call	1080ee0 <strlen>
 1080e68:	10c00044 	addi	r3,r2,1
 1080e6c:	d8800115 	stw	r2,4(sp)
 1080e70:	89400217 	ldw	r5,8(r17)
 1080e74:	00804274 	movhi	r2,265
 1080e78:	10afec04 	addi	r2,r2,-16464
 1080e7c:	d8800215 	stw	r2,8(sp)
 1080e80:	00800044 	movi	r2,1
 1080e84:	d8800315 	stw	r2,12(sp)
 1080e88:	8809883a 	mov	r4,r17
 1080e8c:	00800084 	movi	r2,2
 1080e90:	d9800404 	addi	r6,sp,16
 1080e94:	dc000015 	stw	r16,0(sp)
 1080e98:	d8c00615 	stw	r3,24(sp)
 1080e9c:	dec00415 	stw	sp,16(sp)
 1080ea0:	d8800515 	stw	r2,20(sp)
 1080ea4:	10850500 	call	1085050 <__sfvwrite_r>
 1080ea8:	1000061e 	bne	r2,zero,1080ec4 <_puts_r+0x7c>
 1080eac:	00800284 	movi	r2,10
 1080eb0:	dfc00917 	ldw	ra,36(sp)
 1080eb4:	dc400817 	ldw	r17,32(sp)
 1080eb8:	dc000717 	ldw	r16,28(sp)
 1080ebc:	dec00a04 	addi	sp,sp,40
 1080ec0:	f800283a 	ret
 1080ec4:	00bfffc4 	movi	r2,-1
 1080ec8:	003ff906 	br	1080eb0 <_puts_r+0x68>

01080ecc <puts>:
 1080ecc:	00804274 	movhi	r2,265
 1080ed0:	10b6f704 	addi	r2,r2,-9252
 1080ed4:	200b883a 	mov	r5,r4
 1080ed8:	11000017 	ldw	r4,0(r2)
 1080edc:	1080e481 	jmpi	1080e48 <_puts_r>

01080ee0 <strlen>:
 1080ee0:	208000cc 	andi	r2,r4,3
 1080ee4:	10001f1e 	bne	r2,zero,1080f64 <strlen+0x84>
 1080ee8:	20800017 	ldw	r2,0(r4)
 1080eec:	01ffbff4 	movhi	r7,65279
 1080ef0:	39ffbfc4 	addi	r7,r7,-257
 1080ef4:	01a02074 	movhi	r6,32897
 1080ef8:	31a02004 	addi	r6,r6,-32640
 1080efc:	11c7883a 	add	r3,r2,r7
 1080f00:	0084303a 	nor	r2,zero,r2
 1080f04:	1886703a 	and	r3,r3,r2
 1080f08:	1986703a 	and	r3,r3,r6
 1080f0c:	2005883a 	mov	r2,r4
 1080f10:	1800101e 	bne	r3,zero,1080f54 <strlen+0x74>
 1080f14:	10800104 	addi	r2,r2,4
 1080f18:	10c00017 	ldw	r3,0(r2)
 1080f1c:	19cb883a 	add	r5,r3,r7
 1080f20:	00c6303a 	nor	r3,zero,r3
 1080f24:	28c6703a 	and	r3,r5,r3
 1080f28:	1986703a 	and	r3,r3,r6
 1080f2c:	1800091e 	bne	r3,zero,1080f54 <strlen+0x74>
 1080f30:	10800104 	addi	r2,r2,4
 1080f34:	10c00017 	ldw	r3,0(r2)
 1080f38:	19cb883a 	add	r5,r3,r7
 1080f3c:	00c6303a 	nor	r3,zero,r3
 1080f40:	28c6703a 	and	r3,r5,r3
 1080f44:	1986703a 	and	r3,r3,r6
 1080f48:	183ff226 	beq	r3,zero,1080f14 <strlen+0x34>
 1080f4c:	00000106 	br	1080f54 <strlen+0x74>
 1080f50:	10800044 	addi	r2,r2,1
 1080f54:	10c00007 	ldb	r3,0(r2)
 1080f58:	183ffd1e 	bne	r3,zero,1080f50 <strlen+0x70>
 1080f5c:	1105c83a 	sub	r2,r2,r4
 1080f60:	f800283a 	ret
 1080f64:	2005883a 	mov	r2,r4
 1080f68:	003ffa06 	br	1080f54 <strlen+0x74>

01080f6c <__sprint_r>:
 1080f6c:	30800217 	ldw	r2,8(r6)
 1080f70:	defffe04 	addi	sp,sp,-8
 1080f74:	dc000015 	stw	r16,0(sp)
 1080f78:	dfc00115 	stw	ra,4(sp)
 1080f7c:	3021883a 	mov	r16,r6
 1080f80:	10000226 	beq	r2,zero,1080f8c <__sprint_r+0x20>
 1080f84:	10850500 	call	1085050 <__sfvwrite_r>
 1080f88:	80000215 	stw	zero,8(r16)
 1080f8c:	80000115 	stw	zero,4(r16)
 1080f90:	dfc00117 	ldw	ra,4(sp)
 1080f94:	dc000017 	ldw	r16,0(sp)
 1080f98:	dec00204 	addi	sp,sp,8
 1080f9c:	f800283a 	ret

01080fa0 <___vfprintf_internal_r>:
 1080fa0:	defeb904 	addi	sp,sp,-1308
 1080fa4:	dc013d15 	stw	r16,1268(sp)
 1080fa8:	d9013015 	stw	r4,1216(sp)
 1080fac:	dfc14615 	stw	ra,1304(sp)
 1080fb0:	df014515 	stw	fp,1300(sp)
 1080fb4:	ddc14415 	stw	r23,1296(sp)
 1080fb8:	dd814315 	stw	r22,1292(sp)
 1080fbc:	dd414215 	stw	r21,1288(sp)
 1080fc0:	dd014115 	stw	r20,1284(sp)
 1080fc4:	dcc14015 	stw	r19,1280(sp)
 1080fc8:	dc813f15 	stw	r18,1276(sp)
 1080fcc:	dc413e15 	stw	r17,1272(sp)
 1080fd0:	d9412915 	stw	r5,1188(sp)
 1080fd4:	3021883a 	mov	r16,r6
 1080fd8:	d9c12d15 	stw	r7,1204(sp)
 1080fdc:	108573c0 	call	108573c <_localeconv_r>
 1080fe0:	10800017 	ldw	r2,0(r2)
 1080fe4:	d9013017 	ldw	r4,1216(sp)
 1080fe8:	d8013315 	stw	zero,1228(sp)
 1080fec:	d8813715 	stw	r2,1244(sp)
 1080ff0:	d8013415 	stw	zero,1232(sp)
 1080ff4:	20000226 	beq	r4,zero,1081000 <___vfprintf_internal_r+0x60>
 1080ff8:	20800e17 	ldw	r2,56(r4)
 1080ffc:	10019826 	beq	r2,zero,1081660 <___vfprintf_internal_r+0x6c0>
 1081000:	da012917 	ldw	r8,1188(sp)
 1081004:	4080030b 	ldhu	r2,12(r8)
 1081008:	10c0020c 	andi	r3,r2,8
 108100c:	18ffffcc 	andi	r3,r3,65535
 1081010:	18e0001c 	xori	r3,r3,32768
 1081014:	18e00004 	addi	r3,r3,-32768
 1081018:	18013a26 	beq	r3,zero,1081504 <___vfprintf_internal_r+0x564>
 108101c:	40c00417 	ldw	r3,16(r8)
 1081020:	18013826 	beq	r3,zero,1081504 <___vfprintf_internal_r+0x564>
 1081024:	1100068c 	andi	r4,r2,26
 1081028:	00c00284 	movi	r3,10
 108102c:	20c13e26 	beq	r4,r3,1081528 <___vfprintf_internal_r+0x588>
 1081030:	da010dc4 	addi	r8,sp,1079
 1081034:	d8800404 	addi	r2,sp,16
 1081038:	da012615 	stw	r8,1176(sp)
 108103c:	d8811b15 	stw	r2,1132(sp)
 1081040:	1013883a 	mov	r9,r2
 1081044:	d8812617 	ldw	r2,1176(sp)
 1081048:	da010e04 	addi	r8,sp,1080
 108104c:	dc413017 	ldw	r17,1216(sp)
 1081050:	da012715 	stw	r8,1180(sp)
 1081054:	4091c83a 	sub	r8,r8,r2
 1081058:	d8011d15 	stw	zero,1140(sp)
 108105c:	d8011c15 	stw	zero,1136(sp)
 1081060:	802b883a 	mov	r21,r16
 1081064:	d8013215 	stw	zero,1224(sp)
 1081068:	d8013615 	stw	zero,1240(sp)
 108106c:	d8013515 	stw	zero,1236(sp)
 1081070:	d8012c15 	stw	zero,1200(sp)
 1081074:	da013915 	stw	r8,1252(sp)
 1081078:	a8800007 	ldb	r2,0(r21)
 108107c:	1002ec26 	beq	r2,zero,1081c30 <___vfprintf_internal_r+0xc90>
 1081080:	00c00944 	movi	r3,37
 1081084:	a825883a 	mov	r18,r21
 1081088:	10c0021e 	bne	r2,r3,1081094 <___vfprintf_internal_r+0xf4>
 108108c:	00001406 	br	10810e0 <___vfprintf_internal_r+0x140>
 1081090:	10c00326 	beq	r2,r3,10810a0 <___vfprintf_internal_r+0x100>
 1081094:	94800044 	addi	r18,r18,1
 1081098:	90800007 	ldb	r2,0(r18)
 108109c:	103ffc1e 	bne	r2,zero,1081090 <___vfprintf_internal_r+0xf0>
 10810a0:	9561c83a 	sub	r16,r18,r21
 10810a4:	80000e26 	beq	r16,zero,10810e0 <___vfprintf_internal_r+0x140>
 10810a8:	da011d17 	ldw	r8,1140(sp)
 10810ac:	d8c11c17 	ldw	r3,1136(sp)
 10810b0:	4d400015 	stw	r21,0(r9)
 10810b4:	4c000115 	stw	r16,4(r9)
 10810b8:	4411883a 	add	r8,r8,r16
 10810bc:	18c00044 	addi	r3,r3,1
 10810c0:	da011d15 	stw	r8,1140(sp)
 10810c4:	d8c11c15 	stw	r3,1136(sp)
 10810c8:	008001c4 	movi	r2,7
 10810cc:	10c15d16 	blt	r2,r3,1081644 <___vfprintf_internal_r+0x6a4>
 10810d0:	4a400204 	addi	r9,r9,8
 10810d4:	d8812c17 	ldw	r2,1200(sp)
 10810d8:	1405883a 	add	r2,r2,r16
 10810dc:	d8812c15 	stw	r2,1200(sp)
 10810e0:	90800007 	ldb	r2,0(r18)
 10810e4:	10013b26 	beq	r2,zero,10815d4 <___vfprintf_internal_r+0x634>
 10810e8:	95400044 	addi	r21,r18,1
 10810ec:	94800047 	ldb	r18,1(r18)
 10810f0:	d8012585 	stb	zero,1174(sp)
 10810f4:	073fffc4 	movi	fp,-1
 10810f8:	d8012e15 	stw	zero,1208(sp)
 10810fc:	0021883a 	mov	r16,zero
 1081100:	00c01604 	movi	r3,88
 1081104:	01400244 	movi	r5,9
 1081108:	02800a84 	movi	r10,42
 108110c:	01c01b04 	movi	r7,108
 1081110:	01800ac4 	movi	r6,43
 1081114:	02c00804 	movi	r11,32
 1081118:	ad400044 	addi	r21,r21,1
 108111c:	90bff804 	addi	r2,r18,-32
 1081120:	1880092e 	bgeu	r3,r2,1081148 <___vfprintf_internal_r+0x1a8>
 1081124:	90012b26 	beq	r18,zero,10815d4 <___vfprintf_internal_r+0x634>
 1081128:	00c00044 	movi	r3,1
 108112c:	d8c12815 	stw	r3,1184(sp)
 1081130:	dc810405 	stb	r18,1040(sp)
 1081134:	d8012585 	stb	zero,1174(sp)
 1081138:	d8c12b15 	stw	r3,1196(sp)
 108113c:	dcc10404 	addi	r19,sp,1040
 1081140:	d8013115 	stw	zero,1220(sp)
 1081144:	00008806 	br	1081368 <___vfprintf_internal_r+0x3c8>
 1081148:	1085883a 	add	r2,r2,r2
 108114c:	1085883a 	add	r2,r2,r2
 1081150:	01004234 	movhi	r4,264
 1081154:	21045904 	addi	r4,r4,4452
 1081158:	1105883a 	add	r2,r2,r4
 108115c:	10800017 	ldw	r2,0(r2)
 1081160:	1000683a 	jmp	r2
 1081164:	01081718 	cmpnei	r4,zero,8284
 1081168:	01081124 	muli	r4,zero,8260
 108116c:	01081124 	muli	r4,zero,8260
 1081170:	0108172c 	andhi	r4,zero,8284
 1081174:	01081124 	muli	r4,zero,8260
 1081178:	01081124 	muli	r4,zero,8260
 108117c:	01081124 	muli	r4,zero,8260
 1081180:	01081124 	muli	r4,zero,8260
 1081184:	01081124 	muli	r4,zero,8260
 1081188:	01081124 	muli	r4,zero,8260
 108118c:	01081814 	movui	r4,8288
 1081190:	010816d0 	cmplti	r4,zero,8283
 1081194:	01081124 	muli	r4,zero,8260
 1081198:	010814f8 	rdprs	r4,zero,8275
 108119c:	010816dc 	xori	r4,zero,8283
 10811a0:	01081124 	muli	r4,zero,8260
 10811a4:	01081738 	rdprs	r4,zero,8284
 10811a8:	01081838 	rdprs	r4,zero,8288
 10811ac:	01081838 	rdprs	r4,zero,8288
 10811b0:	01081838 	rdprs	r4,zero,8288
 10811b4:	01081838 	rdprs	r4,zero,8288
 10811b8:	01081838 	rdprs	r4,zero,8288
 10811bc:	01081838 	rdprs	r4,zero,8288
 10811c0:	01081838 	rdprs	r4,zero,8288
 10811c4:	01081838 	rdprs	r4,zero,8288
 10811c8:	01081838 	rdprs	r4,zero,8288
 10811cc:	01081124 	muli	r4,zero,8260
 10811d0:	01081124 	muli	r4,zero,8260
 10811d4:	01081124 	muli	r4,zero,8260
 10811d8:	01081124 	muli	r4,zero,8260
 10811dc:	01081124 	muli	r4,zero,8260
 10811e0:	01081124 	muli	r4,zero,8260
 10811e4:	01081124 	muli	r4,zero,8260
 10811e8:	01081124 	muli	r4,zero,8260
 10811ec:	01081124 	muli	r4,zero,8260
 10811f0:	01081124 	muli	r4,zero,8260
 10811f4:	01081494 	movui	r4,8274
 10811f8:	01081860 	cmpeqi	r4,zero,8289
 10811fc:	01081124 	muli	r4,zero,8260
 1081200:	01081860 	cmpeqi	r4,zero,8289
 1081204:	01081124 	muli	r4,zero,8260
 1081208:	01081124 	muli	r4,zero,8260
 108120c:	01081124 	muli	r4,zero,8260
 1081210:	01081124 	muli	r4,zero,8260
 1081214:	010819d0 	cmplti	r4,zero,8295
 1081218:	01081124 	muli	r4,zero,8260
 108121c:	01081124 	muli	r4,zero,8260
 1081220:	0108145c 	xori	r4,zero,8273
 1081224:	01081124 	muli	r4,zero,8260
 1081228:	01081124 	muli	r4,zero,8260
 108122c:	01081124 	muli	r4,zero,8260
 1081230:	01081124 	muli	r4,zero,8260
 1081234:	01081124 	muli	r4,zero,8260
 1081238:	010812c8 	cmpgei	r4,zero,8267
 108123c:	01081124 	muli	r4,zero,8260
 1081240:	01081124 	muli	r4,zero,8260
 1081244:	01081744 	movi	r4,8285
 1081248:	01081124 	muli	r4,zero,8260
 108124c:	01081124 	muli	r4,zero,8260
 1081250:	01081124 	muli	r4,zero,8260
 1081254:	01081124 	muli	r4,zero,8260
 1081258:	01081124 	muli	r4,zero,8260
 108125c:	01081124 	muli	r4,zero,8260
 1081260:	01081124 	muli	r4,zero,8260
 1081264:	01081124 	muli	r4,zero,8260
 1081268:	01081124 	muli	r4,zero,8260
 108126c:	01081124 	muli	r4,zero,8260
 1081270:	010817b8 	rdprs	r4,zero,8286
 1081274:	01081498 	cmpnei	r4,zero,8274
 1081278:	01081860 	cmpeqi	r4,zero,8289
 108127c:	01081860 	cmpeqi	r4,zero,8289
 1081280:	01081860 	cmpeqi	r4,zero,8289
 1081284:	01081798 	cmpnei	r4,zero,8286
 1081288:	01081498 	cmpnei	r4,zero,8274
 108128c:	01081124 	muli	r4,zero,8260
 1081290:	01081124 	muli	r4,zero,8260
 1081294:	010817a4 	muli	r4,zero,8286
 1081298:	01081124 	muli	r4,zero,8260
 108129c:	010817e8 	cmpgeui	r4,zero,8287
 10812a0:	01081460 	cmpeqi	r4,zero,8273
 10812a4:	010818e8 	cmpgeui	r4,zero,8291
 10812a8:	01081934 	movhi	r4,8292
 10812ac:	01081124 	muli	r4,zero,8260
 10812b0:	01081940 	call	108194 <__alt_mem_onchip_memory2-0xf77e6c>
 10812b4:	01081124 	muli	r4,zero,8260
 10812b8:	010812cc 	andi	r4,zero,8267
 10812bc:	01081124 	muli	r4,zero,8260
 10812c0:	01081124 	muli	r4,zero,8260
 10812c4:	0108199c 	xori	r4,zero,8294
 10812c8:	84000414 	ori	r16,r16,16
 10812cc:	8080080c 	andi	r2,r16,32
 10812d0:	1000f51e 	bne	r2,zero,10816a8 <___vfprintf_internal_r+0x708>
 10812d4:	8080040c 	andi	r2,r16,16
 10812d8:	10042c26 	beq	r2,zero,108238c <___vfprintf_internal_r+0x13ec>
 10812dc:	da012d17 	ldw	r8,1204(sp)
 10812e0:	002d883a 	mov	r22,zero
 10812e4:	00c00044 	movi	r3,1
 10812e8:	45c00017 	ldw	r23,0(r8)
 10812ec:	42000104 	addi	r8,r8,4
 10812f0:	da012d15 	stw	r8,1204(sp)
 10812f4:	b805883a 	mov	r2,r23
 10812f8:	d8012585 	stb	zero,1174(sp)
 10812fc:	e0000216 	blt	fp,zero,1081308 <___vfprintf_internal_r+0x368>
 1081300:	013fdfc4 	movi	r4,-129
 1081304:	8120703a 	and	r16,r16,r4
 1081308:	1002671e 	bne	r2,zero,1081ca8 <___vfprintf_internal_r+0xd08>
 108130c:	e002661e 	bne	fp,zero,1081ca8 <___vfprintf_internal_r+0xd08>
 1081310:	18c03fcc 	andi	r3,r3,255
 1081314:	1803561e 	bne	r3,zero,1082070 <___vfprintf_internal_r+0x10d0>
 1081318:	8080004c 	andi	r2,r16,1
 108131c:	10035426 	beq	r2,zero,1082070 <___vfprintf_internal_r+0x10d0>
 1081320:	da013917 	ldw	r8,1252(sp)
 1081324:	00800c04 	movi	r2,48
 1081328:	d8810dc5 	stb	r2,1079(sp)
 108132c:	da012b15 	stw	r8,1196(sp)
 1081330:	dcc10dc4 	addi	r19,sp,1079
 1081334:	d8812b17 	ldw	r2,1196(sp)
 1081338:	d8812815 	stw	r2,1184(sp)
 108133c:	1700010e 	bge	r2,fp,1081344 <___vfprintf_internal_r+0x3a4>
 1081340:	df012815 	stw	fp,1184(sp)
 1081344:	d8812583 	ldbu	r2,1174(sp)
 1081348:	df013115 	stw	fp,1220(sp)
 108134c:	10803fcc 	andi	r2,r2,255
 1081350:	1080201c 	xori	r2,r2,128
 1081354:	10bfe004 	addi	r2,r2,-128
 1081358:	10000326 	beq	r2,zero,1081368 <___vfprintf_internal_r+0x3c8>
 108135c:	da012817 	ldw	r8,1184(sp)
 1081360:	42000044 	addi	r8,r8,1
 1081364:	da012815 	stw	r8,1184(sp)
 1081368:	80c0008c 	andi	r3,r16,2
 108136c:	d8c12a15 	stw	r3,1192(sp)
 1081370:	18000326 	beq	r3,zero,1081380 <___vfprintf_internal_r+0x3e0>
 1081374:	da012817 	ldw	r8,1184(sp)
 1081378:	42000084 	addi	r8,r8,2
 108137c:	da012815 	stw	r8,1184(sp)
 1081380:	80c0210c 	andi	r3,r16,132
 1081384:	d8c12f15 	stw	r3,1212(sp)
 1081388:	1801941e 	bne	r3,zero,10819dc <___vfprintf_internal_r+0xa3c>
 108138c:	da012e17 	ldw	r8,1208(sp)
 1081390:	d8c12817 	ldw	r3,1184(sp)
 1081394:	40edc83a 	sub	r22,r8,r3
 1081398:	0581900e 	bge	zero,r22,10819dc <___vfprintf_internal_r+0xa3c>
 108139c:	02800404 	movi	r10,16
 10813a0:	da011d17 	ldw	r8,1140(sp)
 10813a4:	d8c11c17 	ldw	r3,1136(sp)
 10813a8:	05c04274 	movhi	r23,265
 10813ac:	bdeffd84 	addi	r23,r23,-16394
 10813b0:	5580200e 	bge	r10,r22,1081434 <___vfprintf_internal_r+0x494>
 10813b4:	dc813815 	stw	r18,1248(sp)
 10813b8:	5039883a 	mov	fp,r10
 10813bc:	b825883a 	mov	r18,r23
 10813c0:	050001c4 	movi	r20,7
 10813c4:	b02f883a 	mov	r23,r22
 10813c8:	802d883a 	mov	r22,r16
 10813cc:	dc012917 	ldw	r16,1188(sp)
 10813d0:	00000306 	br	10813e0 <___vfprintf_internal_r+0x440>
 10813d4:	bdfffc04 	addi	r23,r23,-16
 10813d8:	4a400204 	addi	r9,r9,8
 10813dc:	e5c0110e 	bge	fp,r23,1081424 <___vfprintf_internal_r+0x484>
 10813e0:	4c800015 	stw	r18,0(r9)
 10813e4:	4f000115 	stw	fp,4(r9)
 10813e8:	42000404 	addi	r8,r8,16
 10813ec:	18c00044 	addi	r3,r3,1
 10813f0:	da011d15 	stw	r8,1140(sp)
 10813f4:	d8c11c15 	stw	r3,1136(sp)
 10813f8:	a0fff60e 	bge	r20,r3,10813d4 <___vfprintf_internal_r+0x434>
 10813fc:	8809883a 	mov	r4,r17
 1081400:	800b883a 	mov	r5,r16
 1081404:	d9811b04 	addi	r6,sp,1132
 1081408:	1080f6c0 	call	1080f6c <__sprint_r>
 108140c:	1000771e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081410:	bdfffc04 	addi	r23,r23,-16
 1081414:	da011d17 	ldw	r8,1140(sp)
 1081418:	d8c11c17 	ldw	r3,1136(sp)
 108141c:	da400404 	addi	r9,sp,16
 1081420:	e5ffef16 	blt	fp,r23,10813e0 <___vfprintf_internal_r+0x440>
 1081424:	b021883a 	mov	r16,r22
 1081428:	b82d883a 	mov	r22,r23
 108142c:	902f883a 	mov	r23,r18
 1081430:	dc813817 	ldw	r18,1248(sp)
 1081434:	4dc00015 	stw	r23,0(r9)
 1081438:	4d800115 	stw	r22,4(r9)
 108143c:	4591883a 	add	r8,r8,r22
 1081440:	18c00044 	addi	r3,r3,1
 1081444:	da011d15 	stw	r8,1140(sp)
 1081448:	d8c11c15 	stw	r3,1136(sp)
 108144c:	008001c4 	movi	r2,7
 1081450:	10c36d16 	blt	r2,r3,1082208 <___vfprintf_internal_r+0x1268>
 1081454:	4a400204 	addi	r9,r9,8
 1081458:	00016206 	br	10819e4 <___vfprintf_internal_r+0xa44>
 108145c:	84000414 	ori	r16,r16,16
 1081460:	8080080c 	andi	r2,r16,32
 1081464:	1000801e 	bne	r2,zero,1081668 <___vfprintf_internal_r+0x6c8>
 1081468:	8080040c 	andi	r2,r16,16
 108146c:	1003da26 	beq	r2,zero,10823d8 <___vfprintf_internal_r+0x1438>
 1081470:	d8c12d17 	ldw	r3,1204(sp)
 1081474:	002d883a 	mov	r22,zero
 1081478:	1dc00017 	ldw	r23,0(r3)
 108147c:	18c00104 	addi	r3,r3,4
 1081480:	d8c12d15 	stw	r3,1204(sp)
 1081484:	b805883a 	mov	r2,r23
 1081488:	0007883a 	mov	r3,zero
 108148c:	d8012585 	stb	zero,1174(sp)
 1081490:	003f9a06 	br	10812fc <___vfprintf_internal_r+0x35c>
 1081494:	84000414 	ori	r16,r16,16
 1081498:	8080080c 	andi	r2,r16,32
 108149c:	10007b1e 	bne	r2,zero,108168c <___vfprintf_internal_r+0x6ec>
 10814a0:	8080040c 	andi	r2,r16,16
 10814a4:	1003ed26 	beq	r2,zero,108245c <___vfprintf_internal_r+0x14bc>
 10814a8:	d9012d17 	ldw	r4,1204(sp)
 10814ac:	25c00017 	ldw	r23,0(r4)
 10814b0:	21000104 	addi	r4,r4,4
 10814b4:	d9012d15 	stw	r4,1204(sp)
 10814b8:	b82dd7fa 	srai	r22,r23,31
 10814bc:	b005883a 	mov	r2,r22
 10814c0:	1003230e 	bge	r2,zero,1082150 <___vfprintf_internal_r+0x11b0>
 10814c4:	05efc83a 	sub	r23,zero,r23
 10814c8:	b804c03a 	cmpne	r2,r23,zero
 10814cc:	05adc83a 	sub	r22,zero,r22
 10814d0:	b0adc83a 	sub	r22,r22,r2
 10814d4:	00800b44 	movi	r2,45
 10814d8:	d8812585 	stb	r2,1174(sp)
 10814dc:	00c00044 	movi	r3,1
 10814e0:	bd84b03a 	or	r2,r23,r22
 10814e4:	003f8506 	br	10812fc <___vfprintf_internal_r+0x35c>
 10814e8:	da012e17 	ldw	r8,1208(sp)
 10814ec:	d8812d15 	stw	r2,1204(sp)
 10814f0:	0211c83a 	sub	r8,zero,r8
 10814f4:	da012e15 	stw	r8,1208(sp)
 10814f8:	84000114 	ori	r16,r16,4
 10814fc:	ac800007 	ldb	r18,0(r21)
 1081500:	003f0506 	br	1081118 <___vfprintf_internal_r+0x178>
 1081504:	d9013017 	ldw	r4,1216(sp)
 1081508:	d9412917 	ldw	r5,1188(sp)
 108150c:	1082dbc0 	call	1082dbc <__swsetup_r>
 1081510:	10003d1e 	bne	r2,zero,1081608 <___vfprintf_internal_r+0x668>
 1081514:	d8c12917 	ldw	r3,1188(sp)
 1081518:	1880030b 	ldhu	r2,12(r3)
 108151c:	00c00284 	movi	r3,10
 1081520:	1100068c 	andi	r4,r2,26
 1081524:	20fec21e 	bne	r4,r3,1081030 <___vfprintf_internal_r+0x90>
 1081528:	d9012917 	ldw	r4,1188(sp)
 108152c:	20c0038b 	ldhu	r3,14(r4)
 1081530:	193fffcc 	andi	r4,r3,65535
 1081534:	2120001c 	xori	r4,r4,32768
 1081538:	21200004 	addi	r4,r4,-32768
 108153c:	203ebc16 	blt	r4,zero,1081030 <___vfprintf_internal_r+0x90>
 1081540:	da012917 	ldw	r8,1188(sp)
 1081544:	d9013017 	ldw	r4,1216(sp)
 1081548:	d9c12d17 	ldw	r7,1204(sp)
 108154c:	42800717 	ldw	r10,28(r8)
 1081550:	42400917 	ldw	r9,36(r8)
 1081554:	10bfff4c 	andi	r2,r2,65533
 1081558:	02010004 	movi	r8,1024
 108155c:	d881070d 	sth	r2,1052(sp)
 1081560:	d9410404 	addi	r5,sp,1040
 1081564:	d8800404 	addi	r2,sp,16
 1081568:	800d883a 	mov	r6,r16
 108156c:	d8c1078d 	sth	r3,1054(sp)
 1081570:	da810b15 	stw	r10,1068(sp)
 1081574:	da410d15 	stw	r9,1076(sp)
 1081578:	d8810415 	stw	r2,1040(sp)
 108157c:	d8810815 	stw	r2,1056(sp)
 1081580:	da010615 	stw	r8,1048(sp)
 1081584:	da010915 	stw	r8,1060(sp)
 1081588:	d8010a15 	stw	zero,1064(sp)
 108158c:	1080fa00 	call	1080fa0 <___vfprintf_internal_r>
 1081590:	d8812c15 	stw	r2,1200(sp)
 1081594:	10000416 	blt	r2,zero,10815a8 <___vfprintf_internal_r+0x608>
 1081598:	d9013017 	ldw	r4,1216(sp)
 108159c:	d9410404 	addi	r5,sp,1040
 10815a0:	10847540 	call	1084754 <_fflush_r>
 10815a4:	1005d81e 	bne	r2,zero,1082d08 <___vfprintf_internal_r+0x1d68>
 10815a8:	d881070b 	ldhu	r2,1052(sp)
 10815ac:	1080100c 	andi	r2,r2,64
 10815b0:	10bfffcc 	andi	r2,r2,65535
 10815b4:	10a0001c 	xori	r2,r2,32768
 10815b8:	10a00004 	addi	r2,r2,-32768
 10815bc:	10001426 	beq	r2,zero,1081610 <___vfprintf_internal_r+0x670>
 10815c0:	d8c12917 	ldw	r3,1188(sp)
 10815c4:	1880030b 	ldhu	r2,12(r3)
 10815c8:	10801014 	ori	r2,r2,64
 10815cc:	1880030d 	sth	r2,12(r3)
 10815d0:	00000f06 	br	1081610 <___vfprintf_internal_r+0x670>
 10815d4:	d8811d17 	ldw	r2,1140(sp)
 10815d8:	10000426 	beq	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 10815dc:	d9013017 	ldw	r4,1216(sp)
 10815e0:	d9412917 	ldw	r5,1188(sp)
 10815e4:	d9811b04 	addi	r6,sp,1132
 10815e8:	1080f6c0 	call	1080f6c <__sprint_r>
 10815ec:	d8c12917 	ldw	r3,1188(sp)
 10815f0:	1880030b 	ldhu	r2,12(r3)
 10815f4:	1080100c 	andi	r2,r2,64
 10815f8:	10bfffcc 	andi	r2,r2,65535
 10815fc:	10a0001c 	xori	r2,r2,32768
 1081600:	10a00004 	addi	r2,r2,-32768
 1081604:	10000226 	beq	r2,zero,1081610 <___vfprintf_internal_r+0x670>
 1081608:	00bfffc4 	movi	r2,-1
 108160c:	d8812c15 	stw	r2,1200(sp)
 1081610:	d8812c17 	ldw	r2,1200(sp)
 1081614:	dfc14617 	ldw	ra,1304(sp)
 1081618:	df014517 	ldw	fp,1300(sp)
 108161c:	ddc14417 	ldw	r23,1296(sp)
 1081620:	dd814317 	ldw	r22,1292(sp)
 1081624:	dd414217 	ldw	r21,1288(sp)
 1081628:	dd014117 	ldw	r20,1284(sp)
 108162c:	dcc14017 	ldw	r19,1280(sp)
 1081630:	dc813f17 	ldw	r18,1276(sp)
 1081634:	dc413e17 	ldw	r17,1272(sp)
 1081638:	dc013d17 	ldw	r16,1268(sp)
 108163c:	dec14704 	addi	sp,sp,1308
 1081640:	f800283a 	ret
 1081644:	d9412917 	ldw	r5,1188(sp)
 1081648:	8809883a 	mov	r4,r17
 108164c:	d9811b04 	addi	r6,sp,1132
 1081650:	1080f6c0 	call	1080f6c <__sprint_r>
 1081654:	103fe51e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081658:	da400404 	addi	r9,sp,16
 108165c:	003e9d06 	br	10810d4 <___vfprintf_internal_r+0x134>
 1081660:	10849fc0 	call	10849fc <__sinit>
 1081664:	003e6606 	br	1081000 <___vfprintf_internal_r+0x60>
 1081668:	d8812d17 	ldw	r2,1204(sp)
 108166c:	0007883a 	mov	r3,zero
 1081670:	15c00017 	ldw	r23,0(r2)
 1081674:	15800117 	ldw	r22,4(r2)
 1081678:	10800204 	addi	r2,r2,8
 108167c:	d8812d15 	stw	r2,1204(sp)
 1081680:	d8012585 	stb	zero,1174(sp)
 1081684:	bd84b03a 	or	r2,r23,r22
 1081688:	003f1c06 	br	10812fc <___vfprintf_internal_r+0x35c>
 108168c:	d8c12d17 	ldw	r3,1204(sp)
 1081690:	18800117 	ldw	r2,4(r3)
 1081694:	1dc00017 	ldw	r23,0(r3)
 1081698:	18c00204 	addi	r3,r3,8
 108169c:	d8c12d15 	stw	r3,1204(sp)
 10816a0:	102d883a 	mov	r22,r2
 10816a4:	003f8606 	br	10814c0 <___vfprintf_internal_r+0x520>
 10816a8:	d8c12d17 	ldw	r3,1204(sp)
 10816ac:	d9012d17 	ldw	r4,1204(sp)
 10816b0:	1dc00017 	ldw	r23,0(r3)
 10816b4:	1d800117 	ldw	r22,4(r3)
 10816b8:	21000204 	addi	r4,r4,8
 10816bc:	00c00044 	movi	r3,1
 10816c0:	d9012d15 	stw	r4,1204(sp)
 10816c4:	bd84b03a 	or	r2,r23,r22
 10816c8:	d8012585 	stb	zero,1174(sp)
 10816cc:	003f0b06 	br	10812fc <___vfprintf_internal_r+0x35c>
 10816d0:	d9812585 	stb	r6,1174(sp)
 10816d4:	ac800007 	ldb	r18,0(r21)
 10816d8:	003e8f06 	br	1081118 <___vfprintf_internal_r+0x178>
 10816dc:	ac800007 	ldb	r18,0(r21)
 10816e0:	a9000044 	addi	r4,r21,1
 10816e4:	92857d26 	beq	r18,r10,1082cdc <___vfprintf_internal_r+0x1d3c>
 10816e8:	90bff404 	addi	r2,r18,-48
 10816ec:	0039883a 	mov	fp,zero
 10816f0:	28800736 	bltu	r5,r2,1081710 <___vfprintf_internal_r+0x770>
 10816f4:	24800007 	ldb	r18,0(r4)
 10816f8:	e70002a4 	muli	fp,fp,10
 10816fc:	21000044 	addi	r4,r4,1
 1081700:	1739883a 	add	fp,r2,fp
 1081704:	90bff404 	addi	r2,r18,-48
 1081708:	28bffa2e 	bgeu	r5,r2,10816f4 <___vfprintf_internal_r+0x754>
 108170c:	e0044216 	blt	fp,zero,1082818 <___vfprintf_internal_r+0x1878>
 1081710:	202b883a 	mov	r21,r4
 1081714:	003e8106 	br	108111c <___vfprintf_internal_r+0x17c>
 1081718:	d8812587 	ldb	r2,1174(sp)
 108171c:	1003581e 	bne	r2,zero,1082480 <___vfprintf_internal_r+0x14e0>
 1081720:	dac12585 	stb	r11,1174(sp)
 1081724:	ac800007 	ldb	r18,0(r21)
 1081728:	003e7b06 	br	1081118 <___vfprintf_internal_r+0x178>
 108172c:	84000054 	ori	r16,r16,1
 1081730:	ac800007 	ldb	r18,0(r21)
 1081734:	003e7806 	br	1081118 <___vfprintf_internal_r+0x178>
 1081738:	84002014 	ori	r16,r16,128
 108173c:	ac800007 	ldb	r18,0(r21)
 1081740:	003e7506 	br	1081118 <___vfprintf_internal_r+0x178>
 1081744:	02004274 	movhi	r8,265
 1081748:	422ff104 	addi	r8,r8,-16444
 108174c:	da013615 	stw	r8,1240(sp)
 1081750:	8080080c 	andi	r2,r16,32
 1081754:	10009626 	beq	r2,zero,10819b0 <___vfprintf_internal_r+0xa10>
 1081758:	d8812d17 	ldw	r2,1204(sp)
 108175c:	15c00017 	ldw	r23,0(r2)
 1081760:	15800117 	ldw	r22,4(r2)
 1081764:	10800204 	addi	r2,r2,8
 1081768:	d8812d15 	stw	r2,1204(sp)
 108176c:	8080004c 	andi	r2,r16,1
 1081770:	1002ae26 	beq	r2,zero,108222c <___vfprintf_internal_r+0x128c>
 1081774:	bd84b03a 	or	r2,r23,r22
 1081778:	10032a26 	beq	r2,zero,1082424 <___vfprintf_internal_r+0x1484>
 108177c:	00c00c04 	movi	r3,48
 1081780:	d8c12505 	stb	r3,1172(sp)
 1081784:	dc812545 	stb	r18,1173(sp)
 1081788:	84000094 	ori	r16,r16,2
 108178c:	00c00084 	movi	r3,2
 1081790:	d8012585 	stb	zero,1174(sp)
 1081794:	003ed906 	br	10812fc <___vfprintf_internal_r+0x35c>
 1081798:	84001014 	ori	r16,r16,64
 108179c:	ac800007 	ldb	r18,0(r21)
 10817a0:	003e5d06 	br	1081118 <___vfprintf_internal_r+0x178>
 10817a4:	ac800007 	ldb	r18,0(r21)
 10817a8:	a805883a 	mov	r2,r21
 10817ac:	91c43226 	beq	r18,r7,1082878 <___vfprintf_internal_r+0x18d8>
 10817b0:	84000414 	ori	r16,r16,16
 10817b4:	003e5806 	br	1081118 <___vfprintf_internal_r+0x178>
 10817b8:	d8c12d17 	ldw	r3,1204(sp)
 10817bc:	02000044 	movi	r8,1
 10817c0:	da012815 	stw	r8,1184(sp)
 10817c4:	18800017 	ldw	r2,0(r3)
 10817c8:	18c00104 	addi	r3,r3,4
 10817cc:	d8012585 	stb	zero,1174(sp)
 10817d0:	d8810405 	stb	r2,1040(sp)
 10817d4:	d8c12d15 	stw	r3,1204(sp)
 10817d8:	da012b15 	stw	r8,1196(sp)
 10817dc:	dcc10404 	addi	r19,sp,1040
 10817e0:	d8013115 	stw	zero,1220(sp)
 10817e4:	003ee006 	br	1081368 <___vfprintf_internal_r+0x3c8>
 10817e8:	8080080c 	andi	r2,r16,32
 10817ec:	10031026 	beq	r2,zero,1082430 <___vfprintf_internal_r+0x1490>
 10817f0:	d9012d17 	ldw	r4,1204(sp)
 10817f4:	da012c17 	ldw	r8,1200(sp)
 10817f8:	20800017 	ldw	r2,0(r4)
 10817fc:	4007d7fa 	srai	r3,r8,31
 1081800:	21000104 	addi	r4,r4,4
 1081804:	d9012d15 	stw	r4,1204(sp)
 1081808:	12000015 	stw	r8,0(r2)
 108180c:	10c00115 	stw	r3,4(r2)
 1081810:	003e1906 	br	1081078 <___vfprintf_internal_r+0xd8>
 1081814:	da012d17 	ldw	r8,1204(sp)
 1081818:	d9012d17 	ldw	r4,1204(sp)
 108181c:	42000017 	ldw	r8,0(r8)
 1081820:	20800104 	addi	r2,r4,4
 1081824:	da012e15 	stw	r8,1208(sp)
 1081828:	403f2f16 	blt	r8,zero,10814e8 <___vfprintf_internal_r+0x548>
 108182c:	d8812d15 	stw	r2,1204(sp)
 1081830:	ac800007 	ldb	r18,0(r21)
 1081834:	003e3806 	br	1081118 <___vfprintf_internal_r+0x178>
 1081838:	0009883a 	mov	r4,zero
 108183c:	90bff404 	addi	r2,r18,-48
 1081840:	ac800007 	ldb	r18,0(r21)
 1081844:	210002a4 	muli	r4,r4,10
 1081848:	ad400044 	addi	r21,r21,1
 108184c:	2089883a 	add	r4,r4,r2
 1081850:	90bff404 	addi	r2,r18,-48
 1081854:	28bffa2e 	bgeu	r5,r2,1081840 <___vfprintf_internal_r+0x8a0>
 1081858:	d9012e15 	stw	r4,1208(sp)
 108185c:	003e2f06 	br	108111c <___vfprintf_internal_r+0x17c>
 1081860:	8080020c 	andi	r2,r16,8
 1081864:	1002d426 	beq	r2,zero,10823b8 <___vfprintf_internal_r+0x1418>
 1081868:	d8c12d17 	ldw	r3,1204(sp)
 108186c:	1d800017 	ldw	r22,0(r3)
 1081870:	1d000117 	ldw	r20,4(r3)
 1081874:	18c00204 	addi	r3,r3,8
 1081878:	d8c12d15 	stw	r3,1204(sp)
 108187c:	dd813315 	stw	r22,1228(sp)
 1081880:	dd013415 	stw	r20,1232(sp)
 1081884:	b009883a 	mov	r4,r22
 1081888:	a00b883a 	mov	r5,r20
 108188c:	da413c15 	stw	r9,1264(sp)
 1081890:	1087a340 	call	1087a34 <__isinfd>
 1081894:	da413c17 	ldw	r9,1264(sp)
 1081898:	b009883a 	mov	r4,r22
 108189c:	a00b883a 	mov	r5,r20
 10818a0:	10035726 	beq	r2,zero,1082600 <___vfprintf_internal_r+0x1660>
 10818a4:	000d883a 	mov	r6,zero
 10818a8:	000f883a 	mov	r7,zero
 10818ac:	108923c0 	call	108923c <__ltdf2>
 10818b0:	da413c17 	ldw	r9,1264(sp)
 10818b4:	10041b16 	blt	r2,zero,1082924 <___vfprintf_internal_r+0x1984>
 10818b8:	d8812583 	ldbu	r2,1174(sp)
 10818bc:	00c011c4 	movi	r3,71
 10818c0:	1c830b16 	blt	r3,r18,10824f0 <___vfprintf_internal_r+0x1550>
 10818c4:	04c04274 	movhi	r19,265
 10818c8:	9cefed04 	addi	r19,r19,-16460
 10818cc:	020000c4 	movi	r8,3
 10818d0:	00ffdfc4 	movi	r3,-129
 10818d4:	da012815 	stw	r8,1184(sp)
 10818d8:	80e0703a 	and	r16,r16,r3
 10818dc:	da012b15 	stw	r8,1196(sp)
 10818e0:	d8013115 	stw	zero,1220(sp)
 10818e4:	003e9906 	br	108134c <___vfprintf_internal_r+0x3ac>
 10818e8:	d8812d17 	ldw	r2,1204(sp)
 10818ec:	d8c12d17 	ldw	r3,1204(sp)
 10818f0:	02004274 	movhi	r8,265
 10818f4:	422ff604 	addi	r8,r8,-16424
 10818f8:	15c00017 	ldw	r23,0(r2)
 10818fc:	00800c04 	movi	r2,48
 1081900:	18c00104 	addi	r3,r3,4
 1081904:	d8812505 	stb	r2,1172(sp)
 1081908:	00801e04 	movi	r2,120
 108190c:	d8812545 	stb	r2,1173(sp)
 1081910:	d8c12d15 	stw	r3,1204(sp)
 1081914:	002d883a 	mov	r22,zero
 1081918:	84000094 	ori	r16,r16,2
 108191c:	da013615 	stw	r8,1240(sp)
 1081920:	00c00084 	movi	r3,2
 1081924:	04801e04 	movi	r18,120
 1081928:	b805883a 	mov	r2,r23
 108192c:	d8012585 	stb	zero,1174(sp)
 1081930:	003e7206 	br	10812fc <___vfprintf_internal_r+0x35c>
 1081934:	84000814 	ori	r16,r16,32
 1081938:	ac800007 	ldb	r18,0(r21)
 108193c:	003df606 	br	1081118 <___vfprintf_internal_r+0x178>
 1081940:	d8812d17 	ldw	r2,1204(sp)
 1081944:	d8012585 	stb	zero,1174(sp)
 1081948:	14c00017 	ldw	r19,0(r2)
 108194c:	15c00104 	addi	r23,r2,4
 1081950:	98040126 	beq	r19,zero,1082958 <___vfprintf_internal_r+0x19b8>
 1081954:	9809883a 	mov	r4,r19
 1081958:	e003dd16 	blt	fp,zero,10828d0 <___vfprintf_internal_r+0x1930>
 108195c:	000b883a 	mov	r5,zero
 1081960:	e00d883a 	mov	r6,fp
 1081964:	da413c15 	stw	r9,1264(sp)
 1081968:	108609c0 	call	108609c <memchr>
 108196c:	da413c17 	ldw	r9,1264(sp)
 1081970:	10042e26 	beq	r2,zero,1082a2c <___vfprintf_internal_r+0x1a8c>
 1081974:	14c5c83a 	sub	r2,r2,r19
 1081978:	d8812b15 	stw	r2,1196(sp)
 108197c:	e083790e 	bge	fp,r2,1082764 <___vfprintf_internal_r+0x17c4>
 1081980:	df012815 	stw	fp,1184(sp)
 1081984:	e0049516 	blt	fp,zero,1082bdc <___vfprintf_internal_r+0x1c3c>
 1081988:	d8812583 	ldbu	r2,1174(sp)
 108198c:	df012b15 	stw	fp,1196(sp)
 1081990:	ddc12d15 	stw	r23,1204(sp)
 1081994:	d8013115 	stw	zero,1220(sp)
 1081998:	003e6c06 	br	108134c <___vfprintf_internal_r+0x3ac>
 108199c:	02004274 	movhi	r8,265
 10819a0:	422ff604 	addi	r8,r8,-16424
 10819a4:	da013615 	stw	r8,1240(sp)
 10819a8:	8080080c 	andi	r2,r16,32
 10819ac:	103f6a1e 	bne	r2,zero,1081758 <___vfprintf_internal_r+0x7b8>
 10819b0:	8080040c 	andi	r2,r16,16
 10819b4:	10029326 	beq	r2,zero,1082404 <___vfprintf_internal_r+0x1464>
 10819b8:	d8c12d17 	ldw	r3,1204(sp)
 10819bc:	002d883a 	mov	r22,zero
 10819c0:	1dc00017 	ldw	r23,0(r3)
 10819c4:	18c00104 	addi	r3,r3,4
 10819c8:	d8c12d15 	stw	r3,1204(sp)
 10819cc:	003f6706 	br	108176c <___vfprintf_internal_r+0x7cc>
 10819d0:	84000214 	ori	r16,r16,8
 10819d4:	ac800007 	ldb	r18,0(r21)
 10819d8:	003dcf06 	br	1081118 <___vfprintf_internal_r+0x178>
 10819dc:	da011d17 	ldw	r8,1140(sp)
 10819e0:	d8c11c17 	ldw	r3,1136(sp)
 10819e4:	d8812587 	ldb	r2,1174(sp)
 10819e8:	10000b26 	beq	r2,zero,1081a18 <___vfprintf_internal_r+0xa78>
 10819ec:	d8812584 	addi	r2,sp,1174
 10819f0:	48800015 	stw	r2,0(r9)
 10819f4:	00800044 	movi	r2,1
 10819f8:	48800115 	stw	r2,4(r9)
 10819fc:	4091883a 	add	r8,r8,r2
 1081a00:	1887883a 	add	r3,r3,r2
 1081a04:	da011d15 	stw	r8,1140(sp)
 1081a08:	d8c11c15 	stw	r3,1136(sp)
 1081a0c:	008001c4 	movi	r2,7
 1081a10:	10c18516 	blt	r2,r3,1082028 <___vfprintf_internal_r+0x1088>
 1081a14:	4a400204 	addi	r9,r9,8
 1081a18:	d9012a17 	ldw	r4,1192(sp)
 1081a1c:	20000b26 	beq	r4,zero,1081a4c <___vfprintf_internal_r+0xaac>
 1081a20:	d8812504 	addi	r2,sp,1172
 1081a24:	48800015 	stw	r2,0(r9)
 1081a28:	00800084 	movi	r2,2
 1081a2c:	48800115 	stw	r2,4(r9)
 1081a30:	4091883a 	add	r8,r8,r2
 1081a34:	18c00044 	addi	r3,r3,1
 1081a38:	da011d15 	stw	r8,1140(sp)
 1081a3c:	d8c11c15 	stw	r3,1136(sp)
 1081a40:	008001c4 	movi	r2,7
 1081a44:	10c18116 	blt	r2,r3,108204c <___vfprintf_internal_r+0x10ac>
 1081a48:	4a400204 	addi	r9,r9,8
 1081a4c:	d9012f17 	ldw	r4,1212(sp)
 1081a50:	00802004 	movi	r2,128
 1081a54:	2080fc26 	beq	r4,r2,1081e48 <___vfprintf_internal_r+0xea8>
 1081a58:	d8813117 	ldw	r2,1220(sp)
 1081a5c:	d9012b17 	ldw	r4,1196(sp)
 1081a60:	112fc83a 	sub	r23,r2,r4
 1081a64:	05c02a0e 	bge	zero,r23,1081b10 <___vfprintf_internal_r+0xb70>
 1081a68:	07000404 	movi	fp,16
 1081a6c:	05004274 	movhi	r20,265
 1081a70:	a5300184 	addi	r20,r20,-16378
 1081a74:	e5c01d0e 	bge	fp,r23,1081aec <___vfprintf_internal_r+0xb4c>
 1081a78:	dc812a15 	stw	r18,1192(sp)
 1081a7c:	058001c4 	movi	r22,7
 1081a80:	a025883a 	mov	r18,r20
 1081a84:	8029883a 	mov	r20,r16
 1081a88:	dc012917 	ldw	r16,1188(sp)
 1081a8c:	00000306 	br	1081a9c <___vfprintf_internal_r+0xafc>
 1081a90:	bdfffc04 	addi	r23,r23,-16
 1081a94:	4a400204 	addi	r9,r9,8
 1081a98:	e5c0110e 	bge	fp,r23,1081ae0 <___vfprintf_internal_r+0xb40>
 1081a9c:	4c800015 	stw	r18,0(r9)
 1081aa0:	4f000115 	stw	fp,4(r9)
 1081aa4:	42000404 	addi	r8,r8,16
 1081aa8:	18c00044 	addi	r3,r3,1
 1081aac:	da011d15 	stw	r8,1140(sp)
 1081ab0:	d8c11c15 	stw	r3,1136(sp)
 1081ab4:	b0fff60e 	bge	r22,r3,1081a90 <___vfprintf_internal_r+0xaf0>
 1081ab8:	8809883a 	mov	r4,r17
 1081abc:	800b883a 	mov	r5,r16
 1081ac0:	d9811b04 	addi	r6,sp,1132
 1081ac4:	1080f6c0 	call	1080f6c <__sprint_r>
 1081ac8:	103ec81e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081acc:	bdfffc04 	addi	r23,r23,-16
 1081ad0:	da011d17 	ldw	r8,1140(sp)
 1081ad4:	d8c11c17 	ldw	r3,1136(sp)
 1081ad8:	da400404 	addi	r9,sp,16
 1081adc:	e5ffef16 	blt	fp,r23,1081a9c <___vfprintf_internal_r+0xafc>
 1081ae0:	a021883a 	mov	r16,r20
 1081ae4:	9029883a 	mov	r20,r18
 1081ae8:	dc812a17 	ldw	r18,1192(sp)
 1081aec:	4d000015 	stw	r20,0(r9)
 1081af0:	4dc00115 	stw	r23,4(r9)
 1081af4:	45d1883a 	add	r8,r8,r23
 1081af8:	18c00044 	addi	r3,r3,1
 1081afc:	da011d15 	stw	r8,1140(sp)
 1081b00:	d8c11c15 	stw	r3,1136(sp)
 1081b04:	008001c4 	movi	r2,7
 1081b08:	10c13e16 	blt	r2,r3,1082004 <___vfprintf_internal_r+0x1064>
 1081b0c:	4a400204 	addi	r9,r9,8
 1081b10:	8080400c 	andi	r2,r16,256
 1081b14:	1000831e 	bne	r2,zero,1081d24 <___vfprintf_internal_r+0xd84>
 1081b18:	d8812b17 	ldw	r2,1196(sp)
 1081b1c:	4cc00015 	stw	r19,0(r9)
 1081b20:	48800115 	stw	r2,4(r9)
 1081b24:	4091883a 	add	r8,r8,r2
 1081b28:	18c00044 	addi	r3,r3,1
 1081b2c:	da011d15 	stw	r8,1140(sp)
 1081b30:	d8c11c15 	stw	r3,1136(sp)
 1081b34:	008001c4 	movi	r2,7
 1081b38:	10c05316 	blt	r2,r3,1081c88 <___vfprintf_internal_r+0xce8>
 1081b3c:	4a400204 	addi	r9,r9,8
 1081b40:	8400010c 	andi	r16,r16,4
 1081b44:	80002e26 	beq	r16,zero,1081c00 <___vfprintf_internal_r+0xc60>
 1081b48:	d8812e17 	ldw	r2,1208(sp)
 1081b4c:	d8c12817 	ldw	r3,1184(sp)
 1081b50:	10e1c83a 	sub	r16,r2,r3
 1081b54:	04002a0e 	bge	zero,r16,1081c00 <___vfprintf_internal_r+0xc60>
 1081b58:	04800404 	movi	r18,16
 1081b5c:	d8c11c17 	ldw	r3,1136(sp)
 1081b60:	05c04274 	movhi	r23,265
 1081b64:	bdeffd84 	addi	r23,r23,-16394
 1081b68:	9400170e 	bge	r18,r16,1081bc8 <___vfprintf_internal_r+0xc28>
 1081b6c:	04c001c4 	movi	r19,7
 1081b70:	dd012917 	ldw	r20,1188(sp)
 1081b74:	00000306 	br	1081b84 <___vfprintf_internal_r+0xbe4>
 1081b78:	843ffc04 	addi	r16,r16,-16
 1081b7c:	4a400204 	addi	r9,r9,8
 1081b80:	9400110e 	bge	r18,r16,1081bc8 <___vfprintf_internal_r+0xc28>
 1081b84:	4dc00015 	stw	r23,0(r9)
 1081b88:	4c800115 	stw	r18,4(r9)
 1081b8c:	42000404 	addi	r8,r8,16
 1081b90:	18c00044 	addi	r3,r3,1
 1081b94:	da011d15 	stw	r8,1140(sp)
 1081b98:	d8c11c15 	stw	r3,1136(sp)
 1081b9c:	98fff60e 	bge	r19,r3,1081b78 <___vfprintf_internal_r+0xbd8>
 1081ba0:	8809883a 	mov	r4,r17
 1081ba4:	a00b883a 	mov	r5,r20
 1081ba8:	d9811b04 	addi	r6,sp,1132
 1081bac:	1080f6c0 	call	1080f6c <__sprint_r>
 1081bb0:	103e8e1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081bb4:	843ffc04 	addi	r16,r16,-16
 1081bb8:	da011d17 	ldw	r8,1140(sp)
 1081bbc:	d8c11c17 	ldw	r3,1136(sp)
 1081bc0:	da400404 	addi	r9,sp,16
 1081bc4:	943fef16 	blt	r18,r16,1081b84 <___vfprintf_internal_r+0xbe4>
 1081bc8:	4dc00015 	stw	r23,0(r9)
 1081bcc:	4c000115 	stw	r16,4(r9)
 1081bd0:	8211883a 	add	r8,r16,r8
 1081bd4:	18c00044 	addi	r3,r3,1
 1081bd8:	da011d15 	stw	r8,1140(sp)
 1081bdc:	d8c11c15 	stw	r3,1136(sp)
 1081be0:	008001c4 	movi	r2,7
 1081be4:	10c0060e 	bge	r2,r3,1081c00 <___vfprintf_internal_r+0xc60>
 1081be8:	d9412917 	ldw	r5,1188(sp)
 1081bec:	8809883a 	mov	r4,r17
 1081bf0:	d9811b04 	addi	r6,sp,1132
 1081bf4:	1080f6c0 	call	1080f6c <__sprint_r>
 1081bf8:	103e7c1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081bfc:	da011d17 	ldw	r8,1140(sp)
 1081c00:	dd012817 	ldw	r20,1184(sp)
 1081c04:	d9012e17 	ldw	r4,1208(sp)
 1081c08:	a100010e 	bge	r20,r4,1081c10 <___vfprintf_internal_r+0xc70>
 1081c0c:	2029883a 	mov	r20,r4
 1081c10:	d8812c17 	ldw	r2,1200(sp)
 1081c14:	1505883a 	add	r2,r2,r20
 1081c18:	d8812c15 	stw	r2,1200(sp)
 1081c1c:	4000b91e 	bne	r8,zero,1081f04 <___vfprintf_internal_r+0xf64>
 1081c20:	d8011c15 	stw	zero,1136(sp)
 1081c24:	a8800007 	ldb	r2,0(r21)
 1081c28:	da400404 	addi	r9,sp,16
 1081c2c:	103d141e 	bne	r2,zero,1081080 <___vfprintf_internal_r+0xe0>
 1081c30:	a825883a 	mov	r18,r21
 1081c34:	003d2a06 	br	10810e0 <___vfprintf_internal_r+0x140>
 1081c38:	d9412917 	ldw	r5,1188(sp)
 1081c3c:	8809883a 	mov	r4,r17
 1081c40:	d9811b04 	addi	r6,sp,1132
 1081c44:	1080f6c0 	call	1080f6c <__sprint_r>
 1081c48:	103e681e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081c4c:	da011d17 	ldw	r8,1140(sp)
 1081c50:	da400404 	addi	r9,sp,16
 1081c54:	8080004c 	andi	r2,r16,1
 1081c58:	103fb926 	beq	r2,zero,1081b40 <___vfprintf_internal_r+0xba0>
 1081c5c:	d8c11c17 	ldw	r3,1136(sp)
 1081c60:	d9013717 	ldw	r4,1244(sp)
 1081c64:	00800044 	movi	r2,1
 1081c68:	48800115 	stw	r2,4(r9)
 1081c6c:	49000015 	stw	r4,0(r9)
 1081c70:	4091883a 	add	r8,r8,r2
 1081c74:	1887883a 	add	r3,r3,r2
 1081c78:	da011d15 	stw	r8,1140(sp)
 1081c7c:	d8c11c15 	stw	r3,1136(sp)
 1081c80:	008001c4 	movi	r2,7
 1081c84:	10ffad0e 	bge	r2,r3,1081b3c <___vfprintf_internal_r+0xb9c>
 1081c88:	d9412917 	ldw	r5,1188(sp)
 1081c8c:	8809883a 	mov	r4,r17
 1081c90:	d9811b04 	addi	r6,sp,1132
 1081c94:	1080f6c0 	call	1080f6c <__sprint_r>
 1081c98:	103e541e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081c9c:	da400404 	addi	r9,sp,16
 1081ca0:	da011d17 	ldw	r8,1140(sp)
 1081ca4:	003fa606 	br	1081b40 <___vfprintf_internal_r+0xba0>
 1081ca8:	18803fcc 	andi	r2,r3,255
 1081cac:	00c00044 	movi	r3,1
 1081cb0:	10c10126 	beq	r2,r3,10820b8 <___vfprintf_internal_r+0x1118>
 1081cb4:	00c00084 	movi	r3,2
 1081cb8:	10c0f026 	beq	r2,r3,108207c <___vfprintf_internal_r+0x10dc>
 1081cbc:	d8c10dc4 	addi	r3,sp,1079
 1081cc0:	b808d0fa 	srli	r4,r23,3
 1081cc4:	b00a977a 	slli	r5,r22,29
 1081cc8:	b02cd0fa 	srli	r22,r22,3
 1081ccc:	bdc001cc 	andi	r23,r23,7
 1081cd0:	b8800c04 	addi	r2,r23,48
 1081cd4:	292eb03a 	or	r23,r5,r4
 1081cd8:	18800005 	stb	r2,0(r3)
 1081cdc:	bd88b03a 	or	r4,r23,r22
 1081ce0:	1827883a 	mov	r19,r3
 1081ce4:	18ffffc4 	addi	r3,r3,-1
 1081ce8:	203ff51e 	bne	r4,zero,1081cc0 <___vfprintf_internal_r+0xd20>
 1081cec:	8100004c 	andi	r4,r16,1
 1081cf0:	980b883a 	mov	r5,r19
 1081cf4:	20000726 	beq	r4,zero,1081d14 <___vfprintf_internal_r+0xd74>
 1081cf8:	10803fcc 	andi	r2,r2,255
 1081cfc:	1080201c 	xori	r2,r2,128
 1081d00:	10bfe004 	addi	r2,r2,-128
 1081d04:	01000c04 	movi	r4,48
 1081d08:	11000226 	beq	r2,r4,1081d14 <___vfprintf_internal_r+0xd74>
 1081d0c:	1827883a 	mov	r19,r3
 1081d10:	293fffc5 	stb	r4,-1(r5)
 1081d14:	d8812717 	ldw	r2,1180(sp)
 1081d18:	14c5c83a 	sub	r2,r2,r19
 1081d1c:	d8812b15 	stw	r2,1196(sp)
 1081d20:	003d8406 	br	1081334 <___vfprintf_internal_r+0x394>
 1081d24:	00801944 	movi	r2,101
 1081d28:	14807c0e 	bge	r2,r18,1081f1c <___vfprintf_internal_r+0xf7c>
 1081d2c:	d9013317 	ldw	r4,1228(sp)
 1081d30:	d9413417 	ldw	r5,1232(sp)
 1081d34:	000d883a 	mov	r6,zero
 1081d38:	000f883a 	mov	r7,zero
 1081d3c:	d8c13b15 	stw	r3,1260(sp)
 1081d40:	da013a15 	stw	r8,1256(sp)
 1081d44:	da413c15 	stw	r9,1264(sp)
 1081d48:	10890bc0 	call	10890bc <__eqdf2>
 1081d4c:	d8c13b17 	ldw	r3,1260(sp)
 1081d50:	da013a17 	ldw	r8,1256(sp)
 1081d54:	da413c17 	ldw	r9,1264(sp)
 1081d58:	1001001e 	bne	r2,zero,108215c <___vfprintf_internal_r+0x11bc>
 1081d5c:	00804274 	movhi	r2,265
 1081d60:	10affd04 	addi	r2,r2,-16396
 1081d64:	48800015 	stw	r2,0(r9)
 1081d68:	00800044 	movi	r2,1
 1081d6c:	48800115 	stw	r2,4(r9)
 1081d70:	4091883a 	add	r8,r8,r2
 1081d74:	1887883a 	add	r3,r3,r2
 1081d78:	da011d15 	stw	r8,1140(sp)
 1081d7c:	d8c11c15 	stw	r3,1136(sp)
 1081d80:	008001c4 	movi	r2,7
 1081d84:	10c1dd16 	blt	r2,r3,10824fc <___vfprintf_internal_r+0x155c>
 1081d88:	4a400204 	addi	r9,r9,8
 1081d8c:	d8812417 	ldw	r2,1168(sp)
 1081d90:	d8c13217 	ldw	r3,1224(sp)
 1081d94:	10c00216 	blt	r2,r3,1081da0 <___vfprintf_internal_r+0xe00>
 1081d98:	8080004c 	andi	r2,r16,1
 1081d9c:	103f6826 	beq	r2,zero,1081b40 <___vfprintf_internal_r+0xba0>
 1081da0:	d8c11c17 	ldw	r3,1136(sp)
 1081da4:	d9013717 	ldw	r4,1244(sp)
 1081da8:	00800044 	movi	r2,1
 1081dac:	48800115 	stw	r2,4(r9)
 1081db0:	49000015 	stw	r4,0(r9)
 1081db4:	4091883a 	add	r8,r8,r2
 1081db8:	1887883a 	add	r3,r3,r2
 1081dbc:	da011d15 	stw	r8,1140(sp)
 1081dc0:	d8c11c15 	stw	r3,1136(sp)
 1081dc4:	008001c4 	movi	r2,7
 1081dc8:	10c2af16 	blt	r2,r3,1082888 <___vfprintf_internal_r+0x18e8>
 1081dcc:	4a400204 	addi	r9,r9,8
 1081dd0:	d8813217 	ldw	r2,1224(sp)
 1081dd4:	14bfffc4 	addi	r18,r2,-1
 1081dd8:	04bf590e 	bge	zero,r18,1081b40 <___vfprintf_internal_r+0xba0>
 1081ddc:	04c00404 	movi	r19,16
 1081de0:	d8c11c17 	ldw	r3,1136(sp)
 1081de4:	05004274 	movhi	r20,265
 1081de8:	a5300184 	addi	r20,r20,-16378
 1081dec:	9c81630e 	bge	r19,r18,108237c <___vfprintf_internal_r+0x13dc>
 1081df0:	058001c4 	movi	r22,7
 1081df4:	ddc12917 	ldw	r23,1188(sp)
 1081df8:	00000306 	br	1081e08 <___vfprintf_internal_r+0xe68>
 1081dfc:	4a400204 	addi	r9,r9,8
 1081e00:	94bffc04 	addi	r18,r18,-16
 1081e04:	9c815d0e 	bge	r19,r18,108237c <___vfprintf_internal_r+0x13dc>
 1081e08:	4d000015 	stw	r20,0(r9)
 1081e0c:	4cc00115 	stw	r19,4(r9)
 1081e10:	42000404 	addi	r8,r8,16
 1081e14:	18c00044 	addi	r3,r3,1
 1081e18:	da011d15 	stw	r8,1140(sp)
 1081e1c:	d8c11c15 	stw	r3,1136(sp)
 1081e20:	b0fff60e 	bge	r22,r3,1081dfc <___vfprintf_internal_r+0xe5c>
 1081e24:	8809883a 	mov	r4,r17
 1081e28:	b80b883a 	mov	r5,r23
 1081e2c:	d9811b04 	addi	r6,sp,1132
 1081e30:	1080f6c0 	call	1080f6c <__sprint_r>
 1081e34:	103ded1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081e38:	da011d17 	ldw	r8,1140(sp)
 1081e3c:	d8c11c17 	ldw	r3,1136(sp)
 1081e40:	da400404 	addi	r9,sp,16
 1081e44:	003fee06 	br	1081e00 <___vfprintf_internal_r+0xe60>
 1081e48:	d8812e17 	ldw	r2,1208(sp)
 1081e4c:	d9012817 	ldw	r4,1184(sp)
 1081e50:	112fc83a 	sub	r23,r2,r4
 1081e54:	05ff000e 	bge	zero,r23,1081a58 <___vfprintf_internal_r+0xab8>
 1081e58:	07000404 	movi	fp,16
 1081e5c:	05004274 	movhi	r20,265
 1081e60:	a5300184 	addi	r20,r20,-16378
 1081e64:	e5c01d0e 	bge	fp,r23,1081edc <___vfprintf_internal_r+0xf3c>
 1081e68:	dc812a15 	stw	r18,1192(sp)
 1081e6c:	058001c4 	movi	r22,7
 1081e70:	a025883a 	mov	r18,r20
 1081e74:	8029883a 	mov	r20,r16
 1081e78:	dc012917 	ldw	r16,1188(sp)
 1081e7c:	00000306 	br	1081e8c <___vfprintf_internal_r+0xeec>
 1081e80:	bdfffc04 	addi	r23,r23,-16
 1081e84:	4a400204 	addi	r9,r9,8
 1081e88:	e5c0110e 	bge	fp,r23,1081ed0 <___vfprintf_internal_r+0xf30>
 1081e8c:	4c800015 	stw	r18,0(r9)
 1081e90:	4f000115 	stw	fp,4(r9)
 1081e94:	42000404 	addi	r8,r8,16
 1081e98:	18c00044 	addi	r3,r3,1
 1081e9c:	da011d15 	stw	r8,1140(sp)
 1081ea0:	d8c11c15 	stw	r3,1136(sp)
 1081ea4:	b0fff60e 	bge	r22,r3,1081e80 <___vfprintf_internal_r+0xee0>
 1081ea8:	8809883a 	mov	r4,r17
 1081eac:	800b883a 	mov	r5,r16
 1081eb0:	d9811b04 	addi	r6,sp,1132
 1081eb4:	1080f6c0 	call	1080f6c <__sprint_r>
 1081eb8:	103dcc1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1081ebc:	bdfffc04 	addi	r23,r23,-16
 1081ec0:	da011d17 	ldw	r8,1140(sp)
 1081ec4:	d8c11c17 	ldw	r3,1136(sp)
 1081ec8:	da400404 	addi	r9,sp,16
 1081ecc:	e5ffef16 	blt	fp,r23,1081e8c <___vfprintf_internal_r+0xeec>
 1081ed0:	a021883a 	mov	r16,r20
 1081ed4:	9029883a 	mov	r20,r18
 1081ed8:	dc812a17 	ldw	r18,1192(sp)
 1081edc:	4d000015 	stw	r20,0(r9)
 1081ee0:	4dc00115 	stw	r23,4(r9)
 1081ee4:	45d1883a 	add	r8,r8,r23
 1081ee8:	18c00044 	addi	r3,r3,1
 1081eec:	da011d15 	stw	r8,1140(sp)
 1081ef0:	d8c11c15 	stw	r3,1136(sp)
 1081ef4:	008001c4 	movi	r2,7
 1081ef8:	10c11716 	blt	r2,r3,1082358 <___vfprintf_internal_r+0x13b8>
 1081efc:	4a400204 	addi	r9,r9,8
 1081f00:	003ed506 	br	1081a58 <___vfprintf_internal_r+0xab8>
 1081f04:	d9412917 	ldw	r5,1188(sp)
 1081f08:	8809883a 	mov	r4,r17
 1081f0c:	d9811b04 	addi	r6,sp,1132
 1081f10:	1080f6c0 	call	1080f6c <__sprint_r>
 1081f14:	103f4226 	beq	r2,zero,1081c20 <___vfprintf_internal_r+0xc80>
 1081f18:	003db406 	br	10815ec <___vfprintf_internal_r+0x64c>
 1081f1c:	d9013217 	ldw	r4,1224(sp)
 1081f20:	00800044 	movi	r2,1
 1081f24:	4cc00015 	stw	r19,0(r9)
 1081f28:	1100e10e 	bge	r2,r4,10822b0 <___vfprintf_internal_r+0x1310>
 1081f2c:	00800044 	movi	r2,1
 1081f30:	48800115 	stw	r2,4(r9)
 1081f34:	4091883a 	add	r8,r8,r2
 1081f38:	1887883a 	add	r3,r3,r2
 1081f3c:	da011d15 	stw	r8,1140(sp)
 1081f40:	d8c11c15 	stw	r3,1136(sp)
 1081f44:	008001c4 	movi	r2,7
 1081f48:	10c0ed16 	blt	r2,r3,1082300 <___vfprintf_internal_r+0x1360>
 1081f4c:	4a400204 	addi	r9,r9,8
 1081f50:	d8813717 	ldw	r2,1244(sp)
 1081f54:	48800015 	stw	r2,0(r9)
 1081f58:	00800044 	movi	r2,1
 1081f5c:	48800115 	stw	r2,4(r9)
 1081f60:	4091883a 	add	r8,r8,r2
 1081f64:	1887883a 	add	r3,r3,r2
 1081f68:	da011d15 	stw	r8,1140(sp)
 1081f6c:	d8c11c15 	stw	r3,1136(sp)
 1081f70:	008001c4 	movi	r2,7
 1081f74:	10c0eb16 	blt	r2,r3,1082324 <___vfprintf_internal_r+0x1384>
 1081f78:	4c800204 	addi	r18,r9,8
 1081f7c:	d9013317 	ldw	r4,1228(sp)
 1081f80:	d9413417 	ldw	r5,1232(sp)
 1081f84:	000d883a 	mov	r6,zero
 1081f88:	000f883a 	mov	r7,zero
 1081f8c:	d8c13b15 	stw	r3,1260(sp)
 1081f90:	da013a15 	stw	r8,1256(sp)
 1081f94:	10891180 	call	1089118 <__nedf2>
 1081f98:	d8c13b17 	ldw	r3,1260(sp)
 1081f9c:	da013a17 	ldw	r8,1256(sp)
 1081fa0:	1000a626 	beq	r2,zero,108223c <___vfprintf_internal_r+0x129c>
 1081fa4:	d9013217 	ldw	r4,1224(sp)
 1081fa8:	9cc00044 	addi	r19,r19,1
 1081fac:	94c00015 	stw	r19,0(r18)
 1081fb0:	20bfffc4 	addi	r2,r4,-1
 1081fb4:	90800115 	stw	r2,4(r18)
 1081fb8:	4091883a 	add	r8,r8,r2
 1081fbc:	18c00044 	addi	r3,r3,1
 1081fc0:	da011d15 	stw	r8,1140(sp)
 1081fc4:	d8c11c15 	stw	r3,1136(sp)
 1081fc8:	008001c4 	movi	r2,7
 1081fcc:	10c0c316 	blt	r2,r3,10822dc <___vfprintf_internal_r+0x133c>
 1081fd0:	94800204 	addi	r18,r18,8
 1081fd4:	d9013517 	ldw	r4,1236(sp)
 1081fd8:	d8811fc4 	addi	r2,sp,1151
 1081fdc:	90800015 	stw	r2,0(r18)
 1081fe0:	91000115 	stw	r4,4(r18)
 1081fe4:	4111883a 	add	r8,r8,r4
 1081fe8:	18c00044 	addi	r3,r3,1
 1081fec:	da011d15 	stw	r8,1140(sp)
 1081ff0:	d8c11c15 	stw	r3,1136(sp)
 1081ff4:	008001c4 	movi	r2,7
 1081ff8:	10ff2316 	blt	r2,r3,1081c88 <___vfprintf_internal_r+0xce8>
 1081ffc:	92400204 	addi	r9,r18,8
 1082000:	003ecf06 	br	1081b40 <___vfprintf_internal_r+0xba0>
 1082004:	d9412917 	ldw	r5,1188(sp)
 1082008:	8809883a 	mov	r4,r17
 108200c:	d9811b04 	addi	r6,sp,1132
 1082010:	1080f6c0 	call	1080f6c <__sprint_r>
 1082014:	103d751e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082018:	da011d17 	ldw	r8,1140(sp)
 108201c:	d8c11c17 	ldw	r3,1136(sp)
 1082020:	da400404 	addi	r9,sp,16
 1082024:	003eba06 	br	1081b10 <___vfprintf_internal_r+0xb70>
 1082028:	d9412917 	ldw	r5,1188(sp)
 108202c:	8809883a 	mov	r4,r17
 1082030:	d9811b04 	addi	r6,sp,1132
 1082034:	1080f6c0 	call	1080f6c <__sprint_r>
 1082038:	103d6c1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 108203c:	da011d17 	ldw	r8,1140(sp)
 1082040:	d8c11c17 	ldw	r3,1136(sp)
 1082044:	da400404 	addi	r9,sp,16
 1082048:	003e7306 	br	1081a18 <___vfprintf_internal_r+0xa78>
 108204c:	d9412917 	ldw	r5,1188(sp)
 1082050:	8809883a 	mov	r4,r17
 1082054:	d9811b04 	addi	r6,sp,1132
 1082058:	1080f6c0 	call	1080f6c <__sprint_r>
 108205c:	103d631e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082060:	da011d17 	ldw	r8,1140(sp)
 1082064:	d8c11c17 	ldw	r3,1136(sp)
 1082068:	da400404 	addi	r9,sp,16
 108206c:	003e7706 	br	1081a4c <___vfprintf_internal_r+0xaac>
 1082070:	d8012b15 	stw	zero,1196(sp)
 1082074:	dcc10e04 	addi	r19,sp,1080
 1082078:	003cae06 	br	1081334 <___vfprintf_internal_r+0x394>
 108207c:	d9413617 	ldw	r5,1240(sp)
 1082080:	d8810dc4 	addi	r2,sp,1079
 1082084:	b8c003cc 	andi	r3,r23,15
 1082088:	b008973a 	slli	r4,r22,28
 108208c:	28c7883a 	add	r3,r5,r3
 1082090:	b82ed13a 	srli	r23,r23,4
 1082094:	18c00003 	ldbu	r3,0(r3)
 1082098:	b02cd13a 	srli	r22,r22,4
 108209c:	25eeb03a 	or	r23,r4,r23
 10820a0:	10c00005 	stb	r3,0(r2)
 10820a4:	bd86b03a 	or	r3,r23,r22
 10820a8:	1027883a 	mov	r19,r2
 10820ac:	10bfffc4 	addi	r2,r2,-1
 10820b0:	183ff41e 	bne	r3,zero,1082084 <___vfprintf_internal_r+0x10e4>
 10820b4:	003f1706 	br	1081d14 <___vfprintf_internal_r+0xd74>
 10820b8:	b0025826 	beq	r22,zero,1082a1c <___vfprintf_internal_r+0x1a7c>
 10820bc:	b807883a 	mov	r3,r23
 10820c0:	d8810dc4 	addi	r2,sp,1079
 10820c4:	882f883a 	mov	r23,r17
 10820c8:	04c00244 	movi	r19,9
 10820cc:	8023883a 	mov	r17,r16
 10820d0:	da412815 	stw	r9,1184(sp)
 10820d4:	1821883a 	mov	r16,r3
 10820d8:	8009883a 	mov	r4,r16
 10820dc:	b00b883a 	mov	r5,r22
 10820e0:	01800284 	movi	r6,10
 10820e4:	000f883a 	mov	r7,zero
 10820e8:	1029883a 	mov	r20,r2
 10820ec:	10887280 	call	1088728 <__umoddi3>
 10820f0:	10800c04 	addi	r2,r2,48
 10820f4:	8009883a 	mov	r4,r16
 10820f8:	b00b883a 	mov	r5,r22
 10820fc:	a0800005 	stb	r2,0(r20)
 1082100:	01800284 	movi	r6,10
 1082104:	000f883a 	mov	r7,zero
 1082108:	10881600 	call	1088160 <__udivdi3>
 108210c:	1021883a 	mov	r16,r2
 1082110:	182d883a 	mov	r22,r3
 1082114:	a0bfffc4 	addi	r2,r20,-1
 1082118:	183fef1e 	bne	r3,zero,10820d8 <___vfprintf_internal_r+0x1138>
 108211c:	9c3fee36 	bltu	r19,r16,10820d8 <___vfprintf_internal_r+0x1138>
 1082120:	da412817 	ldw	r9,1184(sp)
 1082124:	8005883a 	mov	r2,r16
 1082128:	8821883a 	mov	r16,r17
 108212c:	b823883a 	mov	r17,r23
 1082130:	102f883a 	mov	r23,r2
 1082134:	d8812717 	ldw	r2,1180(sp)
 1082138:	a4ffffc4 	addi	r19,r20,-1
 108213c:	bdc00c04 	addi	r23,r23,48
 1082140:	14c5c83a 	sub	r2,r2,r19
 1082144:	a5ffffc5 	stb	r23,-1(r20)
 1082148:	d8812b15 	stw	r2,1196(sp)
 108214c:	003c7906 	br	1081334 <___vfprintf_internal_r+0x394>
 1082150:	00c00044 	movi	r3,1
 1082154:	bd84b03a 	or	r2,r23,r22
 1082158:	003c6806 	br	10812fc <___vfprintf_internal_r+0x35c>
 108215c:	dc812417 	ldw	r18,1168(sp)
 1082160:	0480ee0e 	bge	zero,r18,108251c <___vfprintf_internal_r+0x157c>
 1082164:	d9013217 	ldw	r4,1224(sp)
 1082168:	4cc00015 	stw	r19,0(r9)
 108216c:	9100c616 	blt	r18,r4,1082488 <___vfprintf_internal_r+0x14e8>
 1082170:	49000115 	stw	r4,4(r9)
 1082174:	4111883a 	add	r8,r8,r4
 1082178:	18c00044 	addi	r3,r3,1
 108217c:	da011d15 	stw	r8,1140(sp)
 1082180:	d8c11c15 	stw	r3,1136(sp)
 1082184:	008001c4 	movi	r2,7
 1082188:	10c20916 	blt	r2,r3,10829b0 <___vfprintf_internal_r+0x1a10>
 108218c:	4a400204 	addi	r9,r9,8
 1082190:	d8813217 	ldw	r2,1224(sp)
 1082194:	90a5c83a 	sub	r18,r18,r2
 1082198:	04beae0e 	bge	zero,r18,1081c54 <___vfprintf_internal_r+0xcb4>
 108219c:	04c00404 	movi	r19,16
 10821a0:	d8c11c17 	ldw	r3,1136(sp)
 10821a4:	05004274 	movhi	r20,265
 10821a8:	a5300184 	addi	r20,r20,-16378
 10821ac:	9c81be0e 	bge	r19,r18,10828a8 <___vfprintf_internal_r+0x1908>
 10821b0:	058001c4 	movi	r22,7
 10821b4:	ddc12917 	ldw	r23,1188(sp)
 10821b8:	00000306 	br	10821c8 <___vfprintf_internal_r+0x1228>
 10821bc:	4a400204 	addi	r9,r9,8
 10821c0:	94bffc04 	addi	r18,r18,-16
 10821c4:	9c81b80e 	bge	r19,r18,10828a8 <___vfprintf_internal_r+0x1908>
 10821c8:	4d000015 	stw	r20,0(r9)
 10821cc:	4cc00115 	stw	r19,4(r9)
 10821d0:	42000404 	addi	r8,r8,16
 10821d4:	18c00044 	addi	r3,r3,1
 10821d8:	da011d15 	stw	r8,1140(sp)
 10821dc:	d8c11c15 	stw	r3,1136(sp)
 10821e0:	b0fff60e 	bge	r22,r3,10821bc <___vfprintf_internal_r+0x121c>
 10821e4:	8809883a 	mov	r4,r17
 10821e8:	b80b883a 	mov	r5,r23
 10821ec:	d9811b04 	addi	r6,sp,1132
 10821f0:	1080f6c0 	call	1080f6c <__sprint_r>
 10821f4:	103cfd1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 10821f8:	da011d17 	ldw	r8,1140(sp)
 10821fc:	d8c11c17 	ldw	r3,1136(sp)
 1082200:	da400404 	addi	r9,sp,16
 1082204:	003fee06 	br	10821c0 <___vfprintf_internal_r+0x1220>
 1082208:	d9412917 	ldw	r5,1188(sp)
 108220c:	8809883a 	mov	r4,r17
 1082210:	d9811b04 	addi	r6,sp,1132
 1082214:	1080f6c0 	call	1080f6c <__sprint_r>
 1082218:	103cf41e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 108221c:	da011d17 	ldw	r8,1140(sp)
 1082220:	d8c11c17 	ldw	r3,1136(sp)
 1082224:	da400404 	addi	r9,sp,16
 1082228:	003dee06 	br	10819e4 <___vfprintf_internal_r+0xa44>
 108222c:	00c00084 	movi	r3,2
 1082230:	bd84b03a 	or	r2,r23,r22
 1082234:	d8012585 	stb	zero,1174(sp)
 1082238:	003c3006 	br	10812fc <___vfprintf_internal_r+0x35c>
 108223c:	d8813217 	ldw	r2,1224(sp)
 1082240:	14ffffc4 	addi	r19,r2,-1
 1082244:	04ff630e 	bge	zero,r19,1081fd4 <___vfprintf_internal_r+0x1034>
 1082248:	05800404 	movi	r22,16
 108224c:	05004274 	movhi	r20,265
 1082250:	a5300184 	addi	r20,r20,-16378
 1082254:	b4c03c0e 	bge	r22,r19,1082348 <___vfprintf_internal_r+0x13a8>
 1082258:	05c001c4 	movi	r23,7
 108225c:	df012917 	ldw	fp,1188(sp)
 1082260:	00000306 	br	1082270 <___vfprintf_internal_r+0x12d0>
 1082264:	94800204 	addi	r18,r18,8
 1082268:	9cfffc04 	addi	r19,r19,-16
 108226c:	b4c0360e 	bge	r22,r19,1082348 <___vfprintf_internal_r+0x13a8>
 1082270:	95000015 	stw	r20,0(r18)
 1082274:	95800115 	stw	r22,4(r18)
 1082278:	42000404 	addi	r8,r8,16
 108227c:	18c00044 	addi	r3,r3,1
 1082280:	da011d15 	stw	r8,1140(sp)
 1082284:	d8c11c15 	stw	r3,1136(sp)
 1082288:	b8fff60e 	bge	r23,r3,1082264 <___vfprintf_internal_r+0x12c4>
 108228c:	8809883a 	mov	r4,r17
 1082290:	e00b883a 	mov	r5,fp
 1082294:	d9811b04 	addi	r6,sp,1132
 1082298:	1080f6c0 	call	1080f6c <__sprint_r>
 108229c:	103cd31e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 10822a0:	da011d17 	ldw	r8,1140(sp)
 10822a4:	d8c11c17 	ldw	r3,1136(sp)
 10822a8:	dc800404 	addi	r18,sp,16
 10822ac:	003fee06 	br	1082268 <___vfprintf_internal_r+0x12c8>
 10822b0:	8088703a 	and	r4,r16,r2
 10822b4:	203f1d1e 	bne	r4,zero,1081f2c <___vfprintf_internal_r+0xf8c>
 10822b8:	48800115 	stw	r2,4(r9)
 10822bc:	42000044 	addi	r8,r8,1
 10822c0:	18c00044 	addi	r3,r3,1
 10822c4:	da011d15 	stw	r8,1140(sp)
 10822c8:	d8c11c15 	stw	r3,1136(sp)
 10822cc:	008001c4 	movi	r2,7
 10822d0:	10c00216 	blt	r2,r3,10822dc <___vfprintf_internal_r+0x133c>
 10822d4:	4c800204 	addi	r18,r9,8
 10822d8:	003f3e06 	br	1081fd4 <___vfprintf_internal_r+0x1034>
 10822dc:	d9412917 	ldw	r5,1188(sp)
 10822e0:	8809883a 	mov	r4,r17
 10822e4:	d9811b04 	addi	r6,sp,1132
 10822e8:	1080f6c0 	call	1080f6c <__sprint_r>
 10822ec:	103cbf1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 10822f0:	dc800404 	addi	r18,sp,16
 10822f4:	da011d17 	ldw	r8,1140(sp)
 10822f8:	d8c11c17 	ldw	r3,1136(sp)
 10822fc:	003f3506 	br	1081fd4 <___vfprintf_internal_r+0x1034>
 1082300:	d9412917 	ldw	r5,1188(sp)
 1082304:	8809883a 	mov	r4,r17
 1082308:	d9811b04 	addi	r6,sp,1132
 108230c:	1080f6c0 	call	1080f6c <__sprint_r>
 1082310:	103cb61e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082314:	da011d17 	ldw	r8,1140(sp)
 1082318:	d8c11c17 	ldw	r3,1136(sp)
 108231c:	da400404 	addi	r9,sp,16
 1082320:	003f0b06 	br	1081f50 <___vfprintf_internal_r+0xfb0>
 1082324:	d9412917 	ldw	r5,1188(sp)
 1082328:	8809883a 	mov	r4,r17
 108232c:	d9811b04 	addi	r6,sp,1132
 1082330:	1080f6c0 	call	1080f6c <__sprint_r>
 1082334:	103cad1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082338:	da011d17 	ldw	r8,1140(sp)
 108233c:	d8c11c17 	ldw	r3,1136(sp)
 1082340:	dc800404 	addi	r18,sp,16
 1082344:	003f0d06 	br	1081f7c <___vfprintf_internal_r+0xfdc>
 1082348:	95000015 	stw	r20,0(r18)
 108234c:	94c00115 	stw	r19,4(r18)
 1082350:	44d1883a 	add	r8,r8,r19
 1082354:	003f1906 	br	1081fbc <___vfprintf_internal_r+0x101c>
 1082358:	d9412917 	ldw	r5,1188(sp)
 108235c:	8809883a 	mov	r4,r17
 1082360:	d9811b04 	addi	r6,sp,1132
 1082364:	1080f6c0 	call	1080f6c <__sprint_r>
 1082368:	103ca01e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 108236c:	da011d17 	ldw	r8,1140(sp)
 1082370:	d8c11c17 	ldw	r3,1136(sp)
 1082374:	da400404 	addi	r9,sp,16
 1082378:	003db706 	br	1081a58 <___vfprintf_internal_r+0xab8>
 108237c:	4d000015 	stw	r20,0(r9)
 1082380:	4c800115 	stw	r18,4(r9)
 1082384:	4491883a 	add	r8,r8,r18
 1082388:	003de706 	br	1081b28 <___vfprintf_internal_r+0xb88>
 108238c:	8080100c 	andi	r2,r16,64
 1082390:	10010226 	beq	r2,zero,108279c <___vfprintf_internal_r+0x17fc>
 1082394:	d8812d17 	ldw	r2,1204(sp)
 1082398:	002d883a 	mov	r22,zero
 108239c:	00c00044 	movi	r3,1
 10823a0:	15c0000b 	ldhu	r23,0(r2)
 10823a4:	10800104 	addi	r2,r2,4
 10823a8:	d8812d15 	stw	r2,1204(sp)
 10823ac:	d8012585 	stb	zero,1174(sp)
 10823b0:	b805883a 	mov	r2,r23
 10823b4:	003bd106 	br	10812fc <___vfprintf_internal_r+0x35c>
 10823b8:	d9012d17 	ldw	r4,1204(sp)
 10823bc:	25800017 	ldw	r22,0(r4)
 10823c0:	25000117 	ldw	r20,4(r4)
 10823c4:	21000204 	addi	r4,r4,8
 10823c8:	d9012d15 	stw	r4,1204(sp)
 10823cc:	dd813315 	stw	r22,1228(sp)
 10823d0:	dd013415 	stw	r20,1232(sp)
 10823d4:	003d2b06 	br	1081884 <___vfprintf_internal_r+0x8e4>
 10823d8:	8080100c 	andi	r2,r16,64
 10823dc:	1000fe26 	beq	r2,zero,10827d8 <___vfprintf_internal_r+0x1838>
 10823e0:	d9012d17 	ldw	r4,1204(sp)
 10823e4:	002d883a 	mov	r22,zero
 10823e8:	0007883a 	mov	r3,zero
 10823ec:	25c0000b 	ldhu	r23,0(r4)
 10823f0:	21000104 	addi	r4,r4,4
 10823f4:	d9012d15 	stw	r4,1204(sp)
 10823f8:	b805883a 	mov	r2,r23
 10823fc:	d8012585 	stb	zero,1174(sp)
 1082400:	003bbe06 	br	10812fc <___vfprintf_internal_r+0x35c>
 1082404:	8080100c 	andi	r2,r16,64
 1082408:	1000ed26 	beq	r2,zero,10827c0 <___vfprintf_internal_r+0x1820>
 108240c:	d9012d17 	ldw	r4,1204(sp)
 1082410:	002d883a 	mov	r22,zero
 1082414:	25c0000b 	ldhu	r23,0(r4)
 1082418:	21000104 	addi	r4,r4,4
 108241c:	d9012d15 	stw	r4,1204(sp)
 1082420:	003cd206 	br	108176c <___vfprintf_internal_r+0x7cc>
 1082424:	00c00084 	movi	r3,2
 1082428:	d8012585 	stb	zero,1174(sp)
 108242c:	003bb306 	br	10812fc <___vfprintf_internal_r+0x35c>
 1082430:	8080040c 	andi	r2,r16,16
 1082434:	1000f11e 	bne	r2,zero,10827fc <___vfprintf_internal_r+0x185c>
 1082438:	8400100c 	andi	r16,r16,64
 108243c:	80015526 	beq	r16,zero,1082994 <___vfprintf_internal_r+0x19f4>
 1082440:	da012d17 	ldw	r8,1204(sp)
 1082444:	d8c12c17 	ldw	r3,1200(sp)
 1082448:	40800017 	ldw	r2,0(r8)
 108244c:	42000104 	addi	r8,r8,4
 1082450:	da012d15 	stw	r8,1204(sp)
 1082454:	10c0000d 	sth	r3,0(r2)
 1082458:	003b0706 	br	1081078 <___vfprintf_internal_r+0xd8>
 108245c:	8080100c 	andi	r2,r16,64
 1082460:	1000c726 	beq	r2,zero,1082780 <___vfprintf_internal_r+0x17e0>
 1082464:	da012d17 	ldw	r8,1204(sp)
 1082468:	45c0000f 	ldh	r23,0(r8)
 108246c:	42000104 	addi	r8,r8,4
 1082470:	da012d15 	stw	r8,1204(sp)
 1082474:	b82dd7fa 	srai	r22,r23,31
 1082478:	b005883a 	mov	r2,r22
 108247c:	003c1006 	br	10814c0 <___vfprintf_internal_r+0x520>
 1082480:	ac800007 	ldb	r18,0(r21)
 1082484:	003b2406 	br	1081118 <___vfprintf_internal_r+0x178>
 1082488:	4c800115 	stw	r18,4(r9)
 108248c:	9211883a 	add	r8,r18,r8
 1082490:	18c00044 	addi	r3,r3,1
 1082494:	da011d15 	stw	r8,1140(sp)
 1082498:	d8c11c15 	stw	r3,1136(sp)
 108249c:	008001c4 	movi	r2,7
 10824a0:	10c15416 	blt	r2,r3,10829f4 <___vfprintf_internal_r+0x1a54>
 10824a4:	4a400204 	addi	r9,r9,8
 10824a8:	d8813717 	ldw	r2,1244(sp)
 10824ac:	9ca7883a 	add	r19,r19,r18
 10824b0:	48800015 	stw	r2,0(r9)
 10824b4:	00800044 	movi	r2,1
 10824b8:	48800115 	stw	r2,4(r9)
 10824bc:	4091883a 	add	r8,r8,r2
 10824c0:	1887883a 	add	r3,r3,r2
 10824c4:	da011d15 	stw	r8,1140(sp)
 10824c8:	d8c11c15 	stw	r3,1136(sp)
 10824cc:	008001c4 	movi	r2,7
 10824d0:	10c14016 	blt	r2,r3,10829d4 <___vfprintf_internal_r+0x1a34>
 10824d4:	4a400204 	addi	r9,r9,8
 10824d8:	d9013217 	ldw	r4,1224(sp)
 10824dc:	da011d17 	ldw	r8,1140(sp)
 10824e0:	d8c11c17 	ldw	r3,1136(sp)
 10824e4:	24a5c83a 	sub	r18,r4,r18
 10824e8:	4cc00015 	stw	r19,0(r9)
 10824ec:	003fa406 	br	1082380 <___vfprintf_internal_r+0x13e0>
 10824f0:	04c04274 	movhi	r19,265
 10824f4:	9cefee04 	addi	r19,r19,-16456
 10824f8:	003cf406 	br	10818cc <___vfprintf_internal_r+0x92c>
 10824fc:	d9412917 	ldw	r5,1188(sp)
 1082500:	8809883a 	mov	r4,r17
 1082504:	d9811b04 	addi	r6,sp,1132
 1082508:	1080f6c0 	call	1080f6c <__sprint_r>
 108250c:	103c371e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082510:	da011d17 	ldw	r8,1140(sp)
 1082514:	da400404 	addi	r9,sp,16
 1082518:	003e1c06 	br	1081d8c <___vfprintf_internal_r+0xdec>
 108251c:	00804274 	movhi	r2,265
 1082520:	10affd04 	addi	r2,r2,-16396
 1082524:	48800015 	stw	r2,0(r9)
 1082528:	00800044 	movi	r2,1
 108252c:	48800115 	stw	r2,4(r9)
 1082530:	4091883a 	add	r8,r8,r2
 1082534:	1887883a 	add	r3,r3,r2
 1082538:	da011d15 	stw	r8,1140(sp)
 108253c:	d8c11c15 	stw	r3,1136(sp)
 1082540:	008001c4 	movi	r2,7
 1082544:	10c0c316 	blt	r2,r3,1082854 <___vfprintf_internal_r+0x18b4>
 1082548:	4a400204 	addi	r9,r9,8
 108254c:	9000041e 	bne	r18,zero,1082560 <___vfprintf_internal_r+0x15c0>
 1082550:	d8c13217 	ldw	r3,1224(sp)
 1082554:	1800021e 	bne	r3,zero,1082560 <___vfprintf_internal_r+0x15c0>
 1082558:	8080004c 	andi	r2,r16,1
 108255c:	103d7826 	beq	r2,zero,1081b40 <___vfprintf_internal_r+0xba0>
 1082560:	d8c11c17 	ldw	r3,1136(sp)
 1082564:	d9013717 	ldw	r4,1244(sp)
 1082568:	00800044 	movi	r2,1
 108256c:	48800115 	stw	r2,4(r9)
 1082570:	49000015 	stw	r4,0(r9)
 1082574:	4091883a 	add	r8,r8,r2
 1082578:	1887883a 	add	r3,r3,r2
 108257c:	da011d15 	stw	r8,1140(sp)
 1082580:	d8c11c15 	stw	r3,1136(sp)
 1082584:	008001c4 	movi	r2,7
 1082588:	10c12e16 	blt	r2,r3,1082a44 <___vfprintf_internal_r+0x1aa4>
 108258c:	4a400204 	addi	r9,r9,8
 1082590:	04a5c83a 	sub	r18,zero,r18
 1082594:	0480de0e 	bge	zero,r18,1082910 <___vfprintf_internal_r+0x1970>
 1082598:	05800404 	movi	r22,16
 108259c:	05004274 	movhi	r20,265
 10825a0:	a5300184 	addi	r20,r20,-16378
 10825a4:	b480e20e 	bge	r22,r18,1082930 <___vfprintf_internal_r+0x1990>
 10825a8:	05c001c4 	movi	r23,7
 10825ac:	df012917 	ldw	fp,1188(sp)
 10825b0:	00000306 	br	10825c0 <___vfprintf_internal_r+0x1620>
 10825b4:	4a400204 	addi	r9,r9,8
 10825b8:	94bffc04 	addi	r18,r18,-16
 10825bc:	b480dc0e 	bge	r22,r18,1082930 <___vfprintf_internal_r+0x1990>
 10825c0:	4d000015 	stw	r20,0(r9)
 10825c4:	4d800115 	stw	r22,4(r9)
 10825c8:	42000404 	addi	r8,r8,16
 10825cc:	18c00044 	addi	r3,r3,1
 10825d0:	da011d15 	stw	r8,1140(sp)
 10825d4:	d8c11c15 	stw	r3,1136(sp)
 10825d8:	b8fff60e 	bge	r23,r3,10825b4 <___vfprintf_internal_r+0x1614>
 10825dc:	8809883a 	mov	r4,r17
 10825e0:	e00b883a 	mov	r5,fp
 10825e4:	d9811b04 	addi	r6,sp,1132
 10825e8:	1080f6c0 	call	1080f6c <__sprint_r>
 10825ec:	103bff1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 10825f0:	da011d17 	ldw	r8,1140(sp)
 10825f4:	d8c11c17 	ldw	r3,1136(sp)
 10825f8:	da400404 	addi	r9,sp,16
 10825fc:	003fee06 	br	10825b8 <___vfprintf_internal_r+0x1618>
 1082600:	da413c15 	stw	r9,1264(sp)
 1082604:	1087a6c0 	call	1087a6c <__isnand>
 1082608:	da413c17 	ldw	r9,1264(sp)
 108260c:	1000851e 	bne	r2,zero,1082824 <___vfprintf_internal_r+0x1884>
 1082610:	00bfffc4 	movi	r2,-1
 1082614:	e0817626 	beq	fp,r2,1082bf0 <___vfprintf_internal_r+0x1c50>
 1082618:	008019c4 	movi	r2,103
 108261c:	90817126 	beq	r18,r2,1082be4 <___vfprintf_internal_r+0x1c44>
 1082620:	008011c4 	movi	r2,71
 1082624:	90816f26 	beq	r18,r2,1082be4 <___vfprintf_internal_r+0x1c44>
 1082628:	82004014 	ori	r8,r16,256
 108262c:	da012a15 	stw	r8,1192(sp)
 1082630:	a0017116 	blt	r20,zero,1082bf8 <___vfprintf_internal_r+0x1c58>
 1082634:	d8012f05 	stb	zero,1212(sp)
 1082638:	00801984 	movi	r2,102
 108263c:	90811226 	beq	r18,r2,1082a88 <___vfprintf_internal_r+0x1ae8>
 1082640:	00801184 	movi	r2,70
 1082644:	90811026 	beq	r18,r2,1082a88 <___vfprintf_internal_r+0x1ae8>
 1082648:	00801944 	movi	r2,101
 108264c:	90819b26 	beq	r18,r2,1082cbc <___vfprintf_internal_r+0x1d1c>
 1082650:	00801144 	movi	r2,69
 1082654:	90819926 	beq	r18,r2,1082cbc <___vfprintf_internal_r+0x1d1c>
 1082658:	e02f883a 	mov	r23,fp
 108265c:	d8812404 	addi	r2,sp,1168
 1082660:	d8800115 	stw	r2,4(sp)
 1082664:	d8812304 	addi	r2,sp,1164
 1082668:	d8800215 	stw	r2,8(sp)
 108266c:	d8812204 	addi	r2,sp,1160
 1082670:	ddc00015 	stw	r23,0(sp)
 1082674:	d8800315 	stw	r2,12(sp)
 1082678:	8809883a 	mov	r4,r17
 108267c:	b00b883a 	mov	r5,r22
 1082680:	a00d883a 	mov	r6,r20
 1082684:	01c00084 	movi	r7,2
 1082688:	da413c15 	stw	r9,1264(sp)
 108268c:	10831380 	call	1083138 <_dtoa_r>
 1082690:	1027883a 	mov	r19,r2
 1082694:	008019c4 	movi	r2,103
 1082698:	da413c17 	ldw	r9,1264(sp)
 108269c:	90818c1e 	bne	r18,r2,1082cd0 <___vfprintf_internal_r+0x1d30>
 10826a0:	8080004c 	andi	r2,r16,1
 10826a4:	10017926 	beq	r2,zero,1082c8c <___vfprintf_internal_r+0x1cec>
 10826a8:	00801184 	movi	r2,70
 10826ac:	9dc7883a 	add	r3,r19,r23
 10826b0:	90810626 	beq	r18,r2,1082acc <___vfprintf_internal_r+0x1b2c>
 10826b4:	b009883a 	mov	r4,r22
 10826b8:	a00b883a 	mov	r5,r20
 10826bc:	000d883a 	mov	r6,zero
 10826c0:	000f883a 	mov	r7,zero
 10826c4:	d8c13b15 	stw	r3,1260(sp)
 10826c8:	da413c15 	stw	r9,1264(sp)
 10826cc:	10890bc0 	call	10890bc <__eqdf2>
 10826d0:	d8c13b17 	ldw	r3,1260(sp)
 10826d4:	da413c17 	ldw	r9,1264(sp)
 10826d8:	10000726 	beq	r2,zero,10826f8 <___vfprintf_internal_r+0x1758>
 10826dc:	d8812217 	ldw	r2,1160(sp)
 10826e0:	10c1962e 	bgeu	r2,r3,1082d3c <___vfprintf_internal_r+0x1d9c>
 10826e4:	01000c04 	movi	r4,48
 10826e8:	11000005 	stb	r4,0(r2)
 10826ec:	10800044 	addi	r2,r2,1
 10826f0:	d8812215 	stw	r2,1160(sp)
 10826f4:	10fffc1e 	bne	r2,r3,10826e8 <___vfprintf_internal_r+0x1748>
 10826f8:	1cc7c83a 	sub	r3,r3,r19
 10826fc:	d8c13215 	stw	r3,1224(sp)
 1082700:	008019c4 	movi	r2,103
 1082704:	90810626 	beq	r18,r2,1082b20 <___vfprintf_internal_r+0x1b80>
 1082708:	008011c4 	movi	r2,71
 108270c:	90810426 	beq	r18,r2,1082b20 <___vfprintf_internal_r+0x1b80>
 1082710:	00801984 	movi	r2,102
 1082714:	90819a1e 	bne	r18,r2,1082d80 <___vfprintf_internal_r+0x1de0>
 1082718:	d8812417 	ldw	r2,1168(sp)
 108271c:	d8812b15 	stw	r2,1196(sp)
 1082720:	0081880e 	bge	zero,r2,1082d44 <___vfprintf_internal_r+0x1da4>
 1082724:	e000021e 	bne	fp,zero,1082730 <___vfprintf_internal_r+0x1790>
 1082728:	8400004c 	andi	r16,r16,1
 108272c:	80000426 	beq	r16,zero,1082740 <___vfprintf_internal_r+0x17a0>
 1082730:	d8812b17 	ldw	r2,1196(sp)
 1082734:	e2000044 	addi	r8,fp,1
 1082738:	1205883a 	add	r2,r2,r8
 108273c:	d8812b15 	stw	r2,1196(sp)
 1082740:	d8812815 	stw	r2,1184(sp)
 1082744:	10011716 	blt	r2,zero,1082ba4 <___vfprintf_internal_r+0x1c04>
 1082748:	ddc12f07 	ldb	r23,1212(sp)
 108274c:	b800ca26 	beq	r23,zero,1082a78 <___vfprintf_internal_r+0x1ad8>
 1082750:	00800b44 	movi	r2,45
 1082754:	d8812585 	stb	r2,1174(sp)
 1082758:	dc012a17 	ldw	r16,1192(sp)
 108275c:	d8013115 	stw	zero,1220(sp)
 1082760:	003afe06 	br	108135c <___vfprintf_internal_r+0x3bc>
 1082764:	d8812b17 	ldw	r2,1196(sp)
 1082768:	d8812815 	stw	r2,1184(sp)
 108276c:	10005e16 	blt	r2,zero,10828e8 <___vfprintf_internal_r+0x1948>
 1082770:	d8812583 	ldbu	r2,1174(sp)
 1082774:	ddc12d15 	stw	r23,1204(sp)
 1082778:	d8013115 	stw	zero,1220(sp)
 108277c:	003af306 	br	108134c <___vfprintf_internal_r+0x3ac>
 1082780:	d8812d17 	ldw	r2,1204(sp)
 1082784:	15c00017 	ldw	r23,0(r2)
 1082788:	10800104 	addi	r2,r2,4
 108278c:	d8812d15 	stw	r2,1204(sp)
 1082790:	b82dd7fa 	srai	r22,r23,31
 1082794:	b005883a 	mov	r2,r22
 1082798:	003b4906 	br	10814c0 <___vfprintf_internal_r+0x520>
 108279c:	d8c12d17 	ldw	r3,1204(sp)
 10827a0:	002d883a 	mov	r22,zero
 10827a4:	1dc00017 	ldw	r23,0(r3)
 10827a8:	18c00104 	addi	r3,r3,4
 10827ac:	d8c12d15 	stw	r3,1204(sp)
 10827b0:	b805883a 	mov	r2,r23
 10827b4:	00c00044 	movi	r3,1
 10827b8:	d8012585 	stb	zero,1174(sp)
 10827bc:	003acf06 	br	10812fc <___vfprintf_internal_r+0x35c>
 10827c0:	da012d17 	ldw	r8,1204(sp)
 10827c4:	002d883a 	mov	r22,zero
 10827c8:	45c00017 	ldw	r23,0(r8)
 10827cc:	42000104 	addi	r8,r8,4
 10827d0:	da012d15 	stw	r8,1204(sp)
 10827d4:	003be506 	br	108176c <___vfprintf_internal_r+0x7cc>
 10827d8:	da012d17 	ldw	r8,1204(sp)
 10827dc:	002d883a 	mov	r22,zero
 10827e0:	0007883a 	mov	r3,zero
 10827e4:	45c00017 	ldw	r23,0(r8)
 10827e8:	42000104 	addi	r8,r8,4
 10827ec:	da012d15 	stw	r8,1204(sp)
 10827f0:	b805883a 	mov	r2,r23
 10827f4:	d8012585 	stb	zero,1174(sp)
 10827f8:	003ac006 	br	10812fc <___vfprintf_internal_r+0x35c>
 10827fc:	d8c12d17 	ldw	r3,1204(sp)
 1082800:	d9012c17 	ldw	r4,1200(sp)
 1082804:	18800017 	ldw	r2,0(r3)
 1082808:	18c00104 	addi	r3,r3,4
 108280c:	d8c12d15 	stw	r3,1204(sp)
 1082810:	11000015 	stw	r4,0(r2)
 1082814:	003a1806 	br	1081078 <___vfprintf_internal_r+0xd8>
 1082818:	073fffc4 	movi	fp,-1
 108281c:	202b883a 	mov	r21,r4
 1082820:	003a3e06 	br	108111c <___vfprintf_internal_r+0x17c>
 1082824:	008011c4 	movi	r2,71
 1082828:	14809016 	blt	r2,r18,1082a6c <___vfprintf_internal_r+0x1acc>
 108282c:	04c04274 	movhi	r19,265
 1082830:	9cefef04 	addi	r19,r19,-16452
 1082834:	00c000c4 	movi	r3,3
 1082838:	00bfdfc4 	movi	r2,-129
 108283c:	80a0703a 	and	r16,r16,r2
 1082840:	d8c12815 	stw	r3,1184(sp)
 1082844:	d8812583 	ldbu	r2,1174(sp)
 1082848:	d8c12b15 	stw	r3,1196(sp)
 108284c:	d8013115 	stw	zero,1220(sp)
 1082850:	003abe06 	br	108134c <___vfprintf_internal_r+0x3ac>
 1082854:	d9412917 	ldw	r5,1188(sp)
 1082858:	8809883a 	mov	r4,r17
 108285c:	d9811b04 	addi	r6,sp,1132
 1082860:	1080f6c0 	call	1080f6c <__sprint_r>
 1082864:	103b611e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082868:	dc812417 	ldw	r18,1168(sp)
 108286c:	da011d17 	ldw	r8,1140(sp)
 1082870:	da400404 	addi	r9,sp,16
 1082874:	003f3506 	br	108254c <___vfprintf_internal_r+0x15ac>
 1082878:	ad400044 	addi	r21,r21,1
 108287c:	84000814 	ori	r16,r16,32
 1082880:	14800047 	ldb	r18,1(r2)
 1082884:	003a2406 	br	1081118 <___vfprintf_internal_r+0x178>
 1082888:	d9412917 	ldw	r5,1188(sp)
 108288c:	8809883a 	mov	r4,r17
 1082890:	d9811b04 	addi	r6,sp,1132
 1082894:	1080f6c0 	call	1080f6c <__sprint_r>
 1082898:	103b541e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 108289c:	da011d17 	ldw	r8,1140(sp)
 10828a0:	da400404 	addi	r9,sp,16
 10828a4:	003d4a06 	br	1081dd0 <___vfprintf_internal_r+0xe30>
 10828a8:	4d000015 	stw	r20,0(r9)
 10828ac:	4c800115 	stw	r18,4(r9)
 10828b0:	4491883a 	add	r8,r8,r18
 10828b4:	18c00044 	addi	r3,r3,1
 10828b8:	da011d15 	stw	r8,1140(sp)
 10828bc:	d8c11c15 	stw	r3,1136(sp)
 10828c0:	008001c4 	movi	r2,7
 10828c4:	10fcdc16 	blt	r2,r3,1081c38 <___vfprintf_internal_r+0xc98>
 10828c8:	4a400204 	addi	r9,r9,8
 10828cc:	003ce106 	br	1081c54 <___vfprintf_internal_r+0xcb4>
 10828d0:	da413c15 	stw	r9,1264(sp)
 10828d4:	1080ee00 	call	1080ee0 <strlen>
 10828d8:	d8812b15 	stw	r2,1196(sp)
 10828dc:	d8812815 	stw	r2,1184(sp)
 10828e0:	da413c17 	ldw	r9,1264(sp)
 10828e4:	103fa20e 	bge	r2,zero,1082770 <___vfprintf_internal_r+0x17d0>
 10828e8:	d8012815 	stw	zero,1184(sp)
 10828ec:	003fa006 	br	1082770 <___vfprintf_internal_r+0x17d0>
 10828f0:	d9412917 	ldw	r5,1188(sp)
 10828f4:	8809883a 	mov	r4,r17
 10828f8:	d9811b04 	addi	r6,sp,1132
 10828fc:	1080f6c0 	call	1080f6c <__sprint_r>
 1082900:	103b3a1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082904:	da011d17 	ldw	r8,1140(sp)
 1082908:	d8c11c17 	ldw	r3,1136(sp)
 108290c:	da400404 	addi	r9,sp,16
 1082910:	d8813217 	ldw	r2,1224(sp)
 1082914:	4cc00015 	stw	r19,0(r9)
 1082918:	48800115 	stw	r2,4(r9)
 108291c:	4091883a 	add	r8,r8,r2
 1082920:	003c8106 	br	1081b28 <___vfprintf_internal_r+0xb88>
 1082924:	00800b44 	movi	r2,45
 1082928:	d8812585 	stb	r2,1174(sp)
 108292c:	003be306 	br	10818bc <___vfprintf_internal_r+0x91c>
 1082930:	4d000015 	stw	r20,0(r9)
 1082934:	4c800115 	stw	r18,4(r9)
 1082938:	4491883a 	add	r8,r8,r18
 108293c:	18c00044 	addi	r3,r3,1
 1082940:	da011d15 	stw	r8,1140(sp)
 1082944:	d8c11c15 	stw	r3,1136(sp)
 1082948:	008001c4 	movi	r2,7
 108294c:	10ffe816 	blt	r2,r3,10828f0 <___vfprintf_internal_r+0x1950>
 1082950:	4a400204 	addi	r9,r9,8
 1082954:	003fee06 	br	1082910 <___vfprintf_internal_r+0x1970>
 1082958:	df012b15 	stw	fp,1196(sp)
 108295c:	00800184 	movi	r2,6
 1082960:	1700072e 	bgeu	r2,fp,1082980 <___vfprintf_internal_r+0x19e0>
 1082964:	d8812b15 	stw	r2,1196(sp)
 1082968:	d8812815 	stw	r2,1184(sp)
 108296c:	ddc12d15 	stw	r23,1204(sp)
 1082970:	04c04274 	movhi	r19,265
 1082974:	9ceffb04 	addi	r19,r19,-16404
 1082978:	d8013115 	stw	zero,1220(sp)
 108297c:	003a7a06 	br	1081368 <___vfprintf_internal_r+0x3c8>
 1082980:	d8812b17 	ldw	r2,1196(sp)
 1082984:	d8812815 	stw	r2,1184(sp)
 1082988:	103ff80e 	bge	r2,zero,108296c <___vfprintf_internal_r+0x19cc>
 108298c:	d8012815 	stw	zero,1184(sp)
 1082990:	003ff606 	br	108296c <___vfprintf_internal_r+0x19cc>
 1082994:	d9012d17 	ldw	r4,1204(sp)
 1082998:	da012c17 	ldw	r8,1200(sp)
 108299c:	20800017 	ldw	r2,0(r4)
 10829a0:	21000104 	addi	r4,r4,4
 10829a4:	d9012d15 	stw	r4,1204(sp)
 10829a8:	12000015 	stw	r8,0(r2)
 10829ac:	0039b206 	br	1081078 <___vfprintf_internal_r+0xd8>
 10829b0:	d9412917 	ldw	r5,1188(sp)
 10829b4:	8809883a 	mov	r4,r17
 10829b8:	d9811b04 	addi	r6,sp,1132
 10829bc:	1080f6c0 	call	1080f6c <__sprint_r>
 10829c0:	103b0a1e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 10829c4:	dc812417 	ldw	r18,1168(sp)
 10829c8:	da011d17 	ldw	r8,1140(sp)
 10829cc:	da400404 	addi	r9,sp,16
 10829d0:	003def06 	br	1082190 <___vfprintf_internal_r+0x11f0>
 10829d4:	d9412917 	ldw	r5,1188(sp)
 10829d8:	8809883a 	mov	r4,r17
 10829dc:	d9811b04 	addi	r6,sp,1132
 10829e0:	1080f6c0 	call	1080f6c <__sprint_r>
 10829e4:	103b011e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 10829e8:	dc812417 	ldw	r18,1168(sp)
 10829ec:	da400404 	addi	r9,sp,16
 10829f0:	003eb906 	br	10824d8 <___vfprintf_internal_r+0x1538>
 10829f4:	d9412917 	ldw	r5,1188(sp)
 10829f8:	8809883a 	mov	r4,r17
 10829fc:	d9811b04 	addi	r6,sp,1132
 1082a00:	1080f6c0 	call	1080f6c <__sprint_r>
 1082a04:	103af91e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082a08:	dc812417 	ldw	r18,1168(sp)
 1082a0c:	da011d17 	ldw	r8,1140(sp)
 1082a10:	d8c11c17 	ldw	r3,1136(sp)
 1082a14:	da400404 	addi	r9,sp,16
 1082a18:	003ea306 	br	10824a8 <___vfprintf_internal_r+0x1508>
 1082a1c:	00800244 	movi	r2,9
 1082a20:	15fda636 	bltu	r2,r23,10820bc <___vfprintf_internal_r+0x111c>
 1082a24:	dd010e04 	addi	r20,sp,1080
 1082a28:	003dc206 	br	1082134 <___vfprintf_internal_r+0x1194>
 1082a2c:	df012815 	stw	fp,1184(sp)
 1082a30:	d8812583 	ldbu	r2,1174(sp)
 1082a34:	df012b15 	stw	fp,1196(sp)
 1082a38:	ddc12d15 	stw	r23,1204(sp)
 1082a3c:	d8013115 	stw	zero,1220(sp)
 1082a40:	003a4206 	br	108134c <___vfprintf_internal_r+0x3ac>
 1082a44:	d9412917 	ldw	r5,1188(sp)
 1082a48:	8809883a 	mov	r4,r17
 1082a4c:	d9811b04 	addi	r6,sp,1132
 1082a50:	1080f6c0 	call	1080f6c <__sprint_r>
 1082a54:	103ae51e 	bne	r2,zero,10815ec <___vfprintf_internal_r+0x64c>
 1082a58:	dc812417 	ldw	r18,1168(sp)
 1082a5c:	da011d17 	ldw	r8,1140(sp)
 1082a60:	d8c11c17 	ldw	r3,1136(sp)
 1082a64:	da400404 	addi	r9,sp,16
 1082a68:	003ec906 	br	1082590 <___vfprintf_internal_r+0x15f0>
 1082a6c:	04c04274 	movhi	r19,265
 1082a70:	9ceff004 	addi	r19,r19,-16448
 1082a74:	003f6f06 	br	1082834 <___vfprintf_internal_r+0x1894>
 1082a78:	d8812583 	ldbu	r2,1174(sp)
 1082a7c:	dc012a17 	ldw	r16,1192(sp)
 1082a80:	d8013115 	stw	zero,1220(sp)
 1082a84:	003a3106 	br	108134c <___vfprintf_internal_r+0x3ac>
 1082a88:	d8812404 	addi	r2,sp,1168
 1082a8c:	d8800115 	stw	r2,4(sp)
 1082a90:	d8812304 	addi	r2,sp,1164
 1082a94:	d8800215 	stw	r2,8(sp)
 1082a98:	d8812204 	addi	r2,sp,1160
 1082a9c:	df000015 	stw	fp,0(sp)
 1082aa0:	d8800315 	stw	r2,12(sp)
 1082aa4:	8809883a 	mov	r4,r17
 1082aa8:	b00b883a 	mov	r5,r22
 1082aac:	a00d883a 	mov	r6,r20
 1082ab0:	01c000c4 	movi	r7,3
 1082ab4:	da413c15 	stw	r9,1264(sp)
 1082ab8:	10831380 	call	1083138 <_dtoa_r>
 1082abc:	da413c17 	ldw	r9,1264(sp)
 1082ac0:	1027883a 	mov	r19,r2
 1082ac4:	1707883a 	add	r3,r2,fp
 1082ac8:	e02f883a 	mov	r23,fp
 1082acc:	99000007 	ldb	r4,0(r19)
 1082ad0:	00800c04 	movi	r2,48
 1082ad4:	20800326 	beq	r4,r2,1082ae4 <___vfprintf_internal_r+0x1b44>
 1082ad8:	da812417 	ldw	r10,1168(sp)
 1082adc:	1a87883a 	add	r3,r3,r10
 1082ae0:	003ef406 	br	10826b4 <___vfprintf_internal_r+0x1714>
 1082ae4:	b009883a 	mov	r4,r22
 1082ae8:	a00b883a 	mov	r5,r20
 1082aec:	000d883a 	mov	r6,zero
 1082af0:	000f883a 	mov	r7,zero
 1082af4:	d8c13b15 	stw	r3,1260(sp)
 1082af8:	da413c15 	stw	r9,1264(sp)
 1082afc:	10891180 	call	1089118 <__nedf2>
 1082b00:	d8c13b17 	ldw	r3,1260(sp)
 1082b04:	da413c17 	ldw	r9,1264(sp)
 1082b08:	103ff326 	beq	r2,zero,1082ad8 <___vfprintf_internal_r+0x1b38>
 1082b0c:	00800044 	movi	r2,1
 1082b10:	15d5c83a 	sub	r10,r2,r23
 1082b14:	da812415 	stw	r10,1168(sp)
 1082b18:	1a87883a 	add	r3,r3,r10
 1082b1c:	003ee506 	br	10826b4 <___vfprintf_internal_r+0x1714>
 1082b20:	d8812417 	ldw	r2,1168(sp)
 1082b24:	d8812b15 	stw	r2,1196(sp)
 1082b28:	1029883a 	mov	r20,r2
 1082b2c:	00bfff44 	movi	r2,-3
 1082b30:	a0800116 	blt	r20,r2,1082b38 <___vfprintf_internal_r+0x1b98>
 1082b34:	e5001d0e 	bge	fp,r20,1082bac <___vfprintf_internal_r+0x1c0c>
 1082b38:	94bfff84 	addi	r18,r18,-2
 1082b3c:	a53fffc4 	addi	r20,r20,-1
 1082b40:	dd012415 	stw	r20,1168(sp)
 1082b44:	dc811fc5 	stb	r18,1151(sp)
 1082b48:	a0007816 	blt	r20,zero,1082d2c <___vfprintf_internal_r+0x1d8c>
 1082b4c:	00800ac4 	movi	r2,43
 1082b50:	d8812005 	stb	r2,1152(sp)
 1082b54:	00800244 	movi	r2,9
 1082b58:	15002b16 	blt	r2,r20,1082c08 <___vfprintf_internal_r+0x1c68>
 1082b5c:	00800c04 	movi	r2,48
 1082b60:	a5000c04 	addi	r20,r20,48
 1082b64:	d8812045 	stb	r2,1153(sp)
 1082b68:	dd012085 	stb	r20,1154(sp)
 1082b6c:	d8c120c4 	addi	r3,sp,1155
 1082b70:	d8811fc4 	addi	r2,sp,1151
 1082b74:	da013217 	ldw	r8,1224(sp)
 1082b78:	1885c83a 	sub	r2,r3,r2
 1082b7c:	d8813515 	stw	r2,1236(sp)
 1082b80:	4085883a 	add	r2,r8,r2
 1082b84:	d8812b15 	stw	r2,1196(sp)
 1082b88:	00800044 	movi	r2,1
 1082b8c:	1200610e 	bge	r2,r8,1082d14 <___vfprintf_internal_r+0x1d74>
 1082b90:	d8812b17 	ldw	r2,1196(sp)
 1082b94:	10800044 	addi	r2,r2,1
 1082b98:	d8812b15 	stw	r2,1196(sp)
 1082b9c:	d8812815 	stw	r2,1184(sp)
 1082ba0:	103ee90e 	bge	r2,zero,1082748 <___vfprintf_internal_r+0x17a8>
 1082ba4:	d8012815 	stw	zero,1184(sp)
 1082ba8:	003ee706 	br	1082748 <___vfprintf_internal_r+0x17a8>
 1082bac:	d8812b17 	ldw	r2,1196(sp)
 1082bb0:	da013217 	ldw	r8,1224(sp)
 1082bb4:	12003716 	blt	r2,r8,1082c94 <___vfprintf_internal_r+0x1cf4>
 1082bb8:	8400004c 	andi	r16,r16,1
 1082bbc:	80000326 	beq	r16,zero,1082bcc <___vfprintf_internal_r+0x1c2c>
 1082bc0:	d8812b17 	ldw	r2,1196(sp)
 1082bc4:	10800044 	addi	r2,r2,1
 1082bc8:	d8812b15 	stw	r2,1196(sp)
 1082bcc:	d8812815 	stw	r2,1184(sp)
 1082bd0:	10003716 	blt	r2,zero,1082cb0 <___vfprintf_internal_r+0x1d10>
 1082bd4:	048019c4 	movi	r18,103
 1082bd8:	003edb06 	br	1082748 <___vfprintf_internal_r+0x17a8>
 1082bdc:	d8012815 	stw	zero,1184(sp)
 1082be0:	003b6906 	br	1081988 <___vfprintf_internal_r+0x9e8>
 1082be4:	e03e901e 	bne	fp,zero,1082628 <___vfprintf_internal_r+0x1688>
 1082be8:	07000044 	movi	fp,1
 1082bec:	003e8e06 	br	1082628 <___vfprintf_internal_r+0x1688>
 1082bf0:	07000184 	movi	fp,6
 1082bf4:	003e8c06 	br	1082628 <___vfprintf_internal_r+0x1688>
 1082bf8:	00c00b44 	movi	r3,45
 1082bfc:	a520003c 	xorhi	r20,r20,32768
 1082c00:	d8c12f05 	stb	r3,1212(sp)
 1082c04:	003e8c06 	br	1082638 <___vfprintf_internal_r+0x1698>
 1082c08:	d8c11f84 	addi	r3,sp,1150
 1082c0c:	102f883a 	mov	r23,r2
 1082c10:	4839883a 	mov	fp,r9
 1082c14:	a009883a 	mov	r4,r20
 1082c18:	01400284 	movi	r5,10
 1082c1c:	182d883a 	mov	r22,r3
 1082c20:	108954c0 	call	108954c <__modsi3>
 1082c24:	10800c04 	addi	r2,r2,48
 1082c28:	a009883a 	mov	r4,r20
 1082c2c:	b0800005 	stb	r2,0(r22)
 1082c30:	01400284 	movi	r5,10
 1082c34:	10894fc0 	call	10894fc <__divsi3>
 1082c38:	1029883a 	mov	r20,r2
 1082c3c:	b0ffffc4 	addi	r3,r22,-1
 1082c40:	b8bff416 	blt	r23,r2,1082c14 <___vfprintf_internal_r+0x1c74>
 1082c44:	11400c04 	addi	r5,r2,48
 1082c48:	b17fffc5 	stb	r5,-1(r22)
 1082c4c:	d8811fc4 	addi	r2,sp,1151
 1082c50:	e013883a 	mov	r9,fp
 1082c54:	1880482e 	bgeu	r3,r2,1082d78 <___vfprintf_internal_r+0x1dd8>
 1082c58:	b007883a 	mov	r3,r22
 1082c5c:	d9012044 	addi	r4,sp,1153
 1082c60:	00000206 	br	1082c6c <___vfprintf_internal_r+0x1ccc>
 1082c64:	19400003 	ldbu	r5,0(r3)
 1082c68:	18c00044 	addi	r3,r3,1
 1082c6c:	21400005 	stb	r5,0(r4)
 1082c70:	21000044 	addi	r4,r4,1
 1082c74:	10fffb1e 	bne	r2,r3,1082c64 <___vfprintf_internal_r+0x1cc4>
 1082c78:	d8c12004 	addi	r3,sp,1152
 1082c7c:	1d87c83a 	sub	r3,r3,r22
 1082c80:	d9012044 	addi	r4,sp,1153
 1082c84:	20c7883a 	add	r3,r4,r3
 1082c88:	003fba06 	br	1082b74 <___vfprintf_internal_r+0x1bd4>
 1082c8c:	d8c12217 	ldw	r3,1160(sp)
 1082c90:	003e9906 	br	10826f8 <___vfprintf_internal_r+0x1758>
 1082c94:	05000b0e 	bge	zero,r20,1082cc4 <___vfprintf_internal_r+0x1d24>
 1082c98:	05000044 	movi	r20,1
 1082c9c:	da013217 	ldw	r8,1224(sp)
 1082ca0:	a229883a 	add	r20,r20,r8
 1082ca4:	dd012b15 	stw	r20,1196(sp)
 1082ca8:	dd012815 	stw	r20,1184(sp)
 1082cac:	a03fc90e 	bge	r20,zero,1082bd4 <___vfprintf_internal_r+0x1c34>
 1082cb0:	d8012815 	stw	zero,1184(sp)
 1082cb4:	048019c4 	movi	r18,103
 1082cb8:	003ea306 	br	1082748 <___vfprintf_internal_r+0x17a8>
 1082cbc:	e5c00044 	addi	r23,fp,1
 1082cc0:	003e6606 	br	108265c <___vfprintf_internal_r+0x16bc>
 1082cc4:	00800084 	movi	r2,2
 1082cc8:	1529c83a 	sub	r20,r2,r20
 1082ccc:	003ff306 	br	1082c9c <___vfprintf_internal_r+0x1cfc>
 1082cd0:	008011c4 	movi	r2,71
 1082cd4:	90be7226 	beq	r18,r2,10826a0 <___vfprintf_internal_r+0x1700>
 1082cd8:	003e7306 	br	10826a8 <___vfprintf_internal_r+0x1708>
 1082cdc:	d8812d17 	ldw	r2,1204(sp)
 1082ce0:	ac800043 	ldbu	r18,1(r21)
 1082ce4:	202b883a 	mov	r21,r4
 1082ce8:	17000017 	ldw	fp,0(r2)
 1082cec:	10800104 	addi	r2,r2,4
 1082cf0:	d8812d15 	stw	r2,1204(sp)
 1082cf4:	e0001b16 	blt	fp,zero,1082d64 <___vfprintf_internal_r+0x1dc4>
 1082cf8:	94803fcc 	andi	r18,r18,255
 1082cfc:	9480201c 	xori	r18,r18,128
 1082d00:	94bfe004 	addi	r18,r18,-128
 1082d04:	00390406 	br	1081118 <___vfprintf_internal_r+0x178>
 1082d08:	00bfffc4 	movi	r2,-1
 1082d0c:	d8812c15 	stw	r2,1200(sp)
 1082d10:	003a2506 	br	10815a8 <___vfprintf_internal_r+0x608>
 1082d14:	80a0703a 	and	r16,r16,r2
 1082d18:	803f9d1e 	bne	r16,zero,1082b90 <___vfprintf_internal_r+0x1bf0>
 1082d1c:	d8812b17 	ldw	r2,1196(sp)
 1082d20:	d8812815 	stw	r2,1184(sp)
 1082d24:	103e880e 	bge	r2,zero,1082748 <___vfprintf_internal_r+0x17a8>
 1082d28:	003f9e06 	br	1082ba4 <___vfprintf_internal_r+0x1c04>
 1082d2c:	00800b44 	movi	r2,45
 1082d30:	0529c83a 	sub	r20,zero,r20
 1082d34:	d8812005 	stb	r2,1152(sp)
 1082d38:	003f8606 	br	1082b54 <___vfprintf_internal_r+0x1bb4>
 1082d3c:	1007883a 	mov	r3,r2
 1082d40:	003e6d06 	br	10826f8 <___vfprintf_internal_r+0x1758>
 1082d44:	e000021e 	bne	fp,zero,1082d50 <___vfprintf_internal_r+0x1db0>
 1082d48:	8400004c 	andi	r16,r16,1
 1082d4c:	80000e26 	beq	r16,zero,1082d88 <___vfprintf_internal_r+0x1de8>
 1082d50:	e7000084 	addi	fp,fp,2
 1082d54:	df012b15 	stw	fp,1196(sp)
 1082d58:	df012815 	stw	fp,1184(sp)
 1082d5c:	e03e7a0e 	bge	fp,zero,1082748 <___vfprintf_internal_r+0x17a8>
 1082d60:	003f9006 	br	1082ba4 <___vfprintf_internal_r+0x1c04>
 1082d64:	94803fcc 	andi	r18,r18,255
 1082d68:	9480201c 	xori	r18,r18,128
 1082d6c:	073fffc4 	movi	fp,-1
 1082d70:	94bfe004 	addi	r18,r18,-128
 1082d74:	0038e806 	br	1081118 <___vfprintf_internal_r+0x178>
 1082d78:	d8c12044 	addi	r3,sp,1153
 1082d7c:	003f7d06 	br	1082b74 <___vfprintf_internal_r+0x1bd4>
 1082d80:	dd012417 	ldw	r20,1168(sp)
 1082d84:	003f6d06 	br	1082b3c <___vfprintf_internal_r+0x1b9c>
 1082d88:	00c00044 	movi	r3,1
 1082d8c:	d8c12815 	stw	r3,1184(sp)
 1082d90:	d8c12b15 	stw	r3,1196(sp)
 1082d94:	003e6c06 	br	1082748 <___vfprintf_internal_r+0x17a8>

01082d98 <__vfprintf_internal>:
 1082d98:	00804274 	movhi	r2,265
 1082d9c:	10b6f704 	addi	r2,r2,-9252
 1082da0:	2007883a 	mov	r3,r4
 1082da4:	11000017 	ldw	r4,0(r2)
 1082da8:	2805883a 	mov	r2,r5
 1082dac:	300f883a 	mov	r7,r6
 1082db0:	180b883a 	mov	r5,r3
 1082db4:	100d883a 	mov	r6,r2
 1082db8:	1080fa01 	jmpi	1080fa0 <___vfprintf_internal_r>

01082dbc <__swsetup_r>:
 1082dbc:	00804274 	movhi	r2,265
 1082dc0:	10b6f704 	addi	r2,r2,-9252
 1082dc4:	10800017 	ldw	r2,0(r2)
 1082dc8:	defffd04 	addi	sp,sp,-12
 1082dcc:	dc400115 	stw	r17,4(sp)
 1082dd0:	dc000015 	stw	r16,0(sp)
 1082dd4:	dfc00215 	stw	ra,8(sp)
 1082dd8:	2023883a 	mov	r17,r4
 1082ddc:	2821883a 	mov	r16,r5
 1082de0:	10000226 	beq	r2,zero,1082dec <__swsetup_r+0x30>
 1082de4:	10c00e17 	ldw	r3,56(r2)
 1082de8:	18003d26 	beq	r3,zero,1082ee0 <__swsetup_r+0x124>
 1082dec:	8080030b 	ldhu	r2,12(r16)
 1082df0:	10c0020c 	andi	r3,r2,8
 1082df4:	18ffffcc 	andi	r3,r3,65535
 1082df8:	18e0001c 	xori	r3,r3,32768
 1082dfc:	18e00004 	addi	r3,r3,-32768
 1082e00:	18001226 	beq	r3,zero,1082e4c <__swsetup_r+0x90>
 1082e04:	80c00417 	ldw	r3,16(r16)
 1082e08:	18001f26 	beq	r3,zero,1082e88 <__swsetup_r+0xcc>
 1082e0c:	1100004c 	andi	r4,r2,1
 1082e10:	2000261e 	bne	r4,zero,1082eac <__swsetup_r+0xf0>
 1082e14:	1080008c 	andi	r2,r2,2
 1082e18:	10bfffcc 	andi	r2,r2,65535
 1082e1c:	10a0001c 	xori	r2,r2,32768
 1082e20:	10a00004 	addi	r2,r2,-32768
 1082e24:	1000311e 	bne	r2,zero,1082eec <__swsetup_r+0x130>
 1082e28:	80800517 	ldw	r2,20(r16)
 1082e2c:	80800215 	stw	r2,8(r16)
 1082e30:	18002326 	beq	r3,zero,1082ec0 <__swsetup_r+0x104>
 1082e34:	0005883a 	mov	r2,zero
 1082e38:	dfc00217 	ldw	ra,8(sp)
 1082e3c:	dc400117 	ldw	r17,4(sp)
 1082e40:	dc000017 	ldw	r16,0(sp)
 1082e44:	dec00304 	addi	sp,sp,12
 1082e48:	f800283a 	ret
 1082e4c:	10c0040c 	andi	r3,r2,16
 1082e50:	18ffffcc 	andi	r3,r3,65535
 1082e54:	18e0001c 	xori	r3,r3,32768
 1082e58:	18e00004 	addi	r3,r3,-32768
 1082e5c:	18001e26 	beq	r3,zero,1082ed8 <__swsetup_r+0x11c>
 1082e60:	10c0010c 	andi	r3,r2,4
 1082e64:	18ffffcc 	andi	r3,r3,65535
 1082e68:	18e0001c 	xori	r3,r3,32768
 1082e6c:	18e00004 	addi	r3,r3,-32768
 1082e70:	1800211e 	bne	r3,zero,1082ef8 <__swsetup_r+0x13c>
 1082e74:	80c00417 	ldw	r3,16(r16)
 1082e78:	11400214 	ori	r5,r2,8
 1082e7c:	8140030d 	sth	r5,12(r16)
 1082e80:	2805883a 	mov	r2,r5
 1082e84:	183fe11e 	bne	r3,zero,1082e0c <__swsetup_r+0x50>
 1082e88:	1140a00c 	andi	r5,r2,640
 1082e8c:	01008004 	movi	r4,512
 1082e90:	293fde26 	beq	r5,r4,1082e0c <__swsetup_r+0x50>
 1082e94:	8809883a 	mov	r4,r17
 1082e98:	800b883a 	mov	r5,r16
 1082e9c:	10857700 	call	1085770 <__smakebuf_r>
 1082ea0:	8080030b 	ldhu	r2,12(r16)
 1082ea4:	80c00417 	ldw	r3,16(r16)
 1082ea8:	003fd806 	br	1082e0c <__swsetup_r+0x50>
 1082eac:	80800517 	ldw	r2,20(r16)
 1082eb0:	80000215 	stw	zero,8(r16)
 1082eb4:	0085c83a 	sub	r2,zero,r2
 1082eb8:	80800615 	stw	r2,24(r16)
 1082ebc:	183fdd1e 	bne	r3,zero,1082e34 <__swsetup_r+0x78>
 1082ec0:	8080030b 	ldhu	r2,12(r16)
 1082ec4:	1080200c 	andi	r2,r2,128
 1082ec8:	10bfffcc 	andi	r2,r2,65535
 1082ecc:	10a0001c 	xori	r2,r2,32768
 1082ed0:	10a00004 	addi	r2,r2,-32768
 1082ed4:	103fd826 	beq	r2,zero,1082e38 <__swsetup_r+0x7c>
 1082ed8:	00bfffc4 	movi	r2,-1
 1082edc:	003fd606 	br	1082e38 <__swsetup_r+0x7c>
 1082ee0:	1009883a 	mov	r4,r2
 1082ee4:	10849fc0 	call	10849fc <__sinit>
 1082ee8:	003fc006 	br	1082dec <__swsetup_r+0x30>
 1082eec:	0005883a 	mov	r2,zero
 1082ef0:	80800215 	stw	r2,8(r16)
 1082ef4:	003fce06 	br	1082e30 <__swsetup_r+0x74>
 1082ef8:	81400c17 	ldw	r5,48(r16)
 1082efc:	28000626 	beq	r5,zero,1082f18 <__swsetup_r+0x15c>
 1082f00:	80c01004 	addi	r3,r16,64
 1082f04:	28c00326 	beq	r5,r3,1082f14 <__swsetup_r+0x158>
 1082f08:	8809883a 	mov	r4,r17
 1082f0c:	1084d800 	call	1084d80 <_free_r>
 1082f10:	8080030b 	ldhu	r2,12(r16)
 1082f14:	80000c15 	stw	zero,48(r16)
 1082f18:	80c00417 	ldw	r3,16(r16)
 1082f1c:	013ff6c4 	movi	r4,-37
 1082f20:	2084703a 	and	r2,r4,r2
 1082f24:	80000115 	stw	zero,4(r16)
 1082f28:	80c00015 	stw	r3,0(r16)
 1082f2c:	003fd206 	br	1082e78 <__swsetup_r+0xbc>

01082f30 <quorem>:
 1082f30:	defff704 	addi	sp,sp,-36
 1082f34:	dc400115 	stw	r17,4(sp)
 1082f38:	20800417 	ldw	r2,16(r4)
 1082f3c:	2c400417 	ldw	r17,16(r5)
 1082f40:	dd800615 	stw	r22,24(sp)
 1082f44:	dd400515 	stw	r21,20(sp)
 1082f48:	dfc00815 	stw	ra,32(sp)
 1082f4c:	ddc00715 	stw	r23,28(sp)
 1082f50:	dd000415 	stw	r20,16(sp)
 1082f54:	dcc00315 	stw	r19,12(sp)
 1082f58:	dc800215 	stw	r18,8(sp)
 1082f5c:	dc000015 	stw	r16,0(sp)
 1082f60:	202b883a 	mov	r21,r4
 1082f64:	282d883a 	mov	r22,r5
 1082f68:	14407116 	blt	r2,r17,1083130 <quorem+0x200>
 1082f6c:	88800104 	addi	r2,r17,4
 1082f70:	1085883a 	add	r2,r2,r2
 1082f74:	1085883a 	add	r2,r2,r2
 1082f78:	28a7883a 	add	r19,r5,r2
 1082f7c:	2085883a 	add	r2,r4,r2
 1082f80:	15c00017 	ldw	r23,0(r2)
 1082f84:	99400017 	ldw	r5,0(r19)
 1082f88:	8c7fffc4 	addi	r17,r17,-1
 1082f8c:	b809883a 	mov	r4,r23
 1082f90:	29400044 	addi	r5,r5,1
 1082f94:	10895a80 	call	10895a8 <__udivsi3>
 1082f98:	1025883a 	mov	r18,r2
 1082f9c:	b4000504 	addi	r16,r22,20
 1082fa0:	ad000504 	addi	r20,r21,20
 1082fa4:	10002d26 	beq	r2,zero,108305c <quorem+0x12c>
 1082fa8:	800d883a 	mov	r6,r16
 1082fac:	a007883a 	mov	r3,r20
 1082fb0:	000f883a 	mov	r7,zero
 1082fb4:	0005883a 	mov	r2,zero
 1082fb8:	32c00017 	ldw	r11,0(r6)
 1082fbc:	1a400017 	ldw	r9,0(r3)
 1082fc0:	31800104 	addi	r6,r6,4
 1082fc4:	5abfffcc 	andi	r10,r11,65535
 1082fc8:	5495383a 	mul	r10,r10,r18
 1082fcc:	5816d43a 	srli	r11,r11,16
 1082fd0:	4a3fffcc 	andi	r8,r9,65535
 1082fd4:	3a95883a 	add	r10,r7,r10
 1082fd8:	500ed43a 	srli	r7,r10,16
 1082fdc:	5c97383a 	mul	r11,r11,r18
 1082fe0:	4085883a 	add	r2,r8,r2
 1082fe4:	52bfffcc 	andi	r10,r10,65535
 1082fe8:	1291c83a 	sub	r8,r2,r10
 1082fec:	4804d43a 	srli	r2,r9,16
 1082ff0:	3acf883a 	add	r7,r7,r11
 1082ff4:	4015d43a 	srai	r10,r8,16
 1082ff8:	393fffcc 	andi	r4,r7,65535
 1082ffc:	1105c83a 	sub	r2,r2,r4
 1083000:	1285883a 	add	r2,r2,r10
 1083004:	1880008d 	sth	r2,2(r3)
 1083008:	1a00000d 	sth	r8,0(r3)
 108300c:	380ed43a 	srli	r7,r7,16
 1083010:	1005d43a 	srai	r2,r2,16
 1083014:	18c00104 	addi	r3,r3,4
 1083018:	99bfe72e 	bgeu	r19,r6,1082fb8 <quorem+0x88>
 108301c:	b8000f1e 	bne	r23,zero,108305c <quorem+0x12c>
 1083020:	88800144 	addi	r2,r17,5
 1083024:	1085883a 	add	r2,r2,r2
 1083028:	1085883a 	add	r2,r2,r2
 108302c:	a887883a 	add	r3,r21,r2
 1083030:	18bfff04 	addi	r2,r3,-4
 1083034:	a080082e 	bgeu	r20,r2,1083058 <quorem+0x128>
 1083038:	18ffff17 	ldw	r3,-4(r3)
 108303c:	18000326 	beq	r3,zero,108304c <quorem+0x11c>
 1083040:	00000506 	br	1083058 <quorem+0x128>
 1083044:	10c00017 	ldw	r3,0(r2)
 1083048:	1800031e 	bne	r3,zero,1083058 <quorem+0x128>
 108304c:	10bfff04 	addi	r2,r2,-4
 1083050:	8c7fffc4 	addi	r17,r17,-1
 1083054:	a0bffb36 	bltu	r20,r2,1083044 <quorem+0x114>
 1083058:	ac400415 	stw	r17,16(r21)
 108305c:	a809883a 	mov	r4,r21
 1083060:	b00b883a 	mov	r5,r22
 1083064:	1086d340 	call	1086d34 <__mcmp>
 1083068:	10002516 	blt	r2,zero,1083100 <quorem+0x1d0>
 108306c:	94800044 	addi	r18,r18,1
 1083070:	a007883a 	mov	r3,r20
 1083074:	000b883a 	mov	r5,zero
 1083078:	1a000017 	ldw	r8,0(r3)
 108307c:	81c00017 	ldw	r7,0(r16)
 1083080:	84000104 	addi	r16,r16,4
 1083084:	41bfffcc 	andi	r6,r8,65535
 1083088:	38bfffcc 	andi	r2,r7,65535
 108308c:	314b883a 	add	r5,r6,r5
 1083090:	288dc83a 	sub	r6,r5,r2
 1083094:	380ed43a 	srli	r7,r7,16
 1083098:	400ad43a 	srli	r5,r8,16
 108309c:	3005d43a 	srai	r2,r6,16
 10830a0:	1980000d 	sth	r6,0(r3)
 10830a4:	29cbc83a 	sub	r5,r5,r7
 10830a8:	288b883a 	add	r5,r5,r2
 10830ac:	1940008d 	sth	r5,2(r3)
 10830b0:	280bd43a 	srai	r5,r5,16
 10830b4:	18c00104 	addi	r3,r3,4
 10830b8:	9c3fef2e 	bgeu	r19,r16,1083078 <quorem+0x148>
 10830bc:	88800144 	addi	r2,r17,5
 10830c0:	1085883a 	add	r2,r2,r2
 10830c4:	1085883a 	add	r2,r2,r2
 10830c8:	a885883a 	add	r2,r21,r2
 10830cc:	10c00017 	ldw	r3,0(r2)
 10830d0:	18000b1e 	bne	r3,zero,1083100 <quorem+0x1d0>
 10830d4:	10ffff04 	addi	r3,r2,-4
 10830d8:	a0c0082e 	bgeu	r20,r3,10830fc <quorem+0x1cc>
 10830dc:	10bfff17 	ldw	r2,-4(r2)
 10830e0:	10000326 	beq	r2,zero,10830f0 <quorem+0x1c0>
 10830e4:	00000506 	br	10830fc <quorem+0x1cc>
 10830e8:	18800017 	ldw	r2,0(r3)
 10830ec:	1000031e 	bne	r2,zero,10830fc <quorem+0x1cc>
 10830f0:	18ffff04 	addi	r3,r3,-4
 10830f4:	8c7fffc4 	addi	r17,r17,-1
 10830f8:	a0fffb36 	bltu	r20,r3,10830e8 <quorem+0x1b8>
 10830fc:	ac400415 	stw	r17,16(r21)
 1083100:	9005883a 	mov	r2,r18
 1083104:	dfc00817 	ldw	ra,32(sp)
 1083108:	ddc00717 	ldw	r23,28(sp)
 108310c:	dd800617 	ldw	r22,24(sp)
 1083110:	dd400517 	ldw	r21,20(sp)
 1083114:	dd000417 	ldw	r20,16(sp)
 1083118:	dcc00317 	ldw	r19,12(sp)
 108311c:	dc800217 	ldw	r18,8(sp)
 1083120:	dc400117 	ldw	r17,4(sp)
 1083124:	dc000017 	ldw	r16,0(sp)
 1083128:	dec00904 	addi	sp,sp,36
 108312c:	f800283a 	ret
 1083130:	0005883a 	mov	r2,zero
 1083134:	003ff306 	br	1083104 <quorem+0x1d4>

01083138 <_dtoa_r>:
 1083138:	20801017 	ldw	r2,64(r4)
 108313c:	deffdf04 	addi	sp,sp,-132
 1083140:	dcc01a15 	stw	r19,104(sp)
 1083144:	dc801915 	stw	r18,100(sp)
 1083148:	dc401815 	stw	r17,96(sp)
 108314c:	dc001715 	stw	r16,92(sp)
 1083150:	dfc02015 	stw	ra,128(sp)
 1083154:	df001f15 	stw	fp,124(sp)
 1083158:	ddc01e15 	stw	r23,120(sp)
 108315c:	dd801d15 	stw	r22,116(sp)
 1083160:	dd401c15 	stw	r21,112(sp)
 1083164:	dd001b15 	stw	r20,108(sp)
 1083168:	d9400315 	stw	r5,12(sp)
 108316c:	d9c00415 	stw	r7,16(sp)
 1083170:	2021883a 	mov	r16,r4
 1083174:	3025883a 	mov	r18,r6
 1083178:	dcc02317 	ldw	r19,140(sp)
 108317c:	3023883a 	mov	r17,r6
 1083180:	10000826 	beq	r2,zero,10831a4 <_dtoa_r+0x6c>
 1083184:	20c01117 	ldw	r3,68(r4)
 1083188:	01800044 	movi	r6,1
 108318c:	100b883a 	mov	r5,r2
 1083190:	30cc983a 	sll	r6,r6,r3
 1083194:	10c00115 	stw	r3,4(r2)
 1083198:	11800215 	stw	r6,8(r2)
 108319c:	10865380 	call	1086538 <_Bfree>
 10831a0:	80001015 	stw	zero,64(r16)
 10831a4:	90002f16 	blt	r18,zero,1083264 <_dtoa_r+0x12c>
 10831a8:	98000015 	stw	zero,0(r19)
 10831ac:	90dffc2c 	andhi	r3,r18,32752
 10831b0:	009ffc34 	movhi	r2,32752
 10831b4:	18801c26 	beq	r3,r2,1083228 <_dtoa_r+0xf0>
 10831b8:	d9000317 	ldw	r4,12(sp)
 10831bc:	880b883a 	mov	r5,r17
 10831c0:	000d883a 	mov	r6,zero
 10831c4:	000f883a 	mov	r7,zero
 10831c8:	10890bc0 	call	10890bc <__eqdf2>
 10831cc:	10002c1e 	bne	r2,zero,1083280 <_dtoa_r+0x148>
 10831d0:	d9002217 	ldw	r4,136(sp)
 10831d4:	d9c02417 	ldw	r7,144(sp)
 10831d8:	00800044 	movi	r2,1
 10831dc:	20800015 	stw	r2,0(r4)
 10831e0:	38019426 	beq	r7,zero,1083834 <_dtoa_r+0x6fc>
 10831e4:	00804274 	movhi	r2,265
 10831e8:	10affd44 	addi	r2,r2,-16395
 10831ec:	38800015 	stw	r2,0(r7)
 10831f0:	15ffffc4 	addi	r23,r2,-1
 10831f4:	b805883a 	mov	r2,r23
 10831f8:	dfc02017 	ldw	ra,128(sp)
 10831fc:	df001f17 	ldw	fp,124(sp)
 1083200:	ddc01e17 	ldw	r23,120(sp)
 1083204:	dd801d17 	ldw	r22,116(sp)
 1083208:	dd401c17 	ldw	r21,112(sp)
 108320c:	dd001b17 	ldw	r20,108(sp)
 1083210:	dcc01a17 	ldw	r19,104(sp)
 1083214:	dc801917 	ldw	r18,100(sp)
 1083218:	dc401817 	ldw	r17,96(sp)
 108321c:	dc001717 	ldw	r16,92(sp)
 1083220:	dec02104 	addi	sp,sp,132
 1083224:	f800283a 	ret
 1083228:	d8c02217 	ldw	r3,136(sp)
 108322c:	d9000317 	ldw	r4,12(sp)
 1083230:	0089c3c4 	movi	r2,9999
 1083234:	18800015 	stw	r2,0(r3)
 1083238:	20016c26 	beq	r4,zero,10837ec <_dtoa_r+0x6b4>
 108323c:	05c04274 	movhi	r23,265
 1083240:	bdf00904 	addi	r23,r23,-16348
 1083244:	d9c02417 	ldw	r7,144(sp)
 1083248:	383fea26 	beq	r7,zero,10831f4 <_dtoa_r+0xbc>
 108324c:	b88000c7 	ldb	r2,3(r23)
 1083250:	10016d1e 	bne	r2,zero,1083808 <_dtoa_r+0x6d0>
 1083254:	b88000c4 	addi	r2,r23,3
 1083258:	d8c02417 	ldw	r3,144(sp)
 108325c:	18800015 	stw	r2,0(r3)
 1083260:	003fe406 	br	10831f4 <_dtoa_r+0xbc>
 1083264:	04600034 	movhi	r17,32768
 1083268:	8c7fffc4 	addi	r17,r17,-1
 108326c:	9462703a 	and	r17,r18,r17
 1083270:	00800044 	movi	r2,1
 1083274:	98800015 	stw	r2,0(r19)
 1083278:	8825883a 	mov	r18,r17
 108327c:	003fcb06 	br	10831ac <_dtoa_r+0x74>
 1083280:	d9400317 	ldw	r5,12(sp)
 1083284:	9028d53a 	srli	r20,r18,20
 1083288:	d8800204 	addi	r2,sp,8
 108328c:	d8800015 	stw	r2,0(sp)
 1083290:	8009883a 	mov	r4,r16
 1083294:	880d883a 	mov	r6,r17
 1083298:	d9c00104 	addi	r7,sp,4
 108329c:	10870dc0 	call	10870dc <__d2b>
 10832a0:	a501ffcc 	andi	r20,r20,2047
 10832a4:	1039883a 	mov	fp,r2
 10832a8:	a001591e 	bne	r20,zero,1083810 <_dtoa_r+0x6d8>
 10832ac:	dd400217 	ldw	r21,8(sp)
 10832b0:	dd000117 	ldw	r20,4(sp)
 10832b4:	00befbc4 	movi	r2,-1041
 10832b8:	ad29883a 	add	r20,r21,r20
 10832bc:	a082d216 	blt	r20,r2,1083e08 <_dtoa_r+0xcd0>
 10832c0:	d8c00317 	ldw	r3,12(sp)
 10832c4:	013f0384 	movi	r4,-1010
 10832c8:	2509c83a 	sub	r4,r4,r20
 10832cc:	a0810484 	addi	r2,r20,1042
 10832d0:	9124983a 	sll	r18,r18,r4
 10832d4:	1884d83a 	srl	r2,r3,r2
 10832d8:	9088b03a 	or	r4,r18,r2
 10832dc:	108936c0 	call	108936c <__floatunsidf>
 10832e0:	1009883a 	mov	r4,r2
 10832e4:	017f8434 	movhi	r5,65040
 10832e8:	00800044 	movi	r2,1
 10832ec:	194b883a 	add	r5,r3,r5
 10832f0:	a53fffc4 	addi	r20,r20,-1
 10832f4:	d8800f15 	stw	r2,60(sp)
 10832f8:	000d883a 	mov	r6,zero
 10832fc:	01cffe34 	movhi	r7,16376
 1083300:	108905c0 	call	108905c <__subdf3>
 1083304:	1009883a 	mov	r4,r2
 1083308:	180b883a 	mov	r5,r3
 108330c:	0198dbf4 	movhi	r6,25455
 1083310:	3190d844 	addi	r6,r6,17249
 1083314:	01cff4f4 	movhi	r7,16339
 1083318:	39e1e9c4 	addi	r7,r7,-30809
 108331c:	10803b80 	call	10803b8 <__muldf3>
 1083320:	180b883a 	mov	r5,r3
 1083324:	01a2d874 	movhi	r6,35681
 1083328:	31b22cc4 	addi	r6,r6,-14157
 108332c:	01cff1f4 	movhi	r7,16327
 1083330:	39e28a04 	addi	r7,r7,-30168
 1083334:	1009883a 	mov	r4,r2
 1083338:	10890080 	call	1089008 <__adddf3>
 108333c:	a009883a 	mov	r4,r20
 1083340:	1027883a 	mov	r19,r2
 1083344:	1825883a 	mov	r18,r3
 1083348:	10808500 	call	1080850 <__floatsidf>
 108334c:	1009883a 	mov	r4,r2
 1083350:	180b883a 	mov	r5,r3
 1083354:	019427f4 	movhi	r6,20639
 1083358:	319e7ec4 	addi	r6,r6,31227
 108335c:	01cff4f4 	movhi	r7,16339
 1083360:	39d104c4 	addi	r7,r7,17427
 1083364:	10803b80 	call	10803b8 <__muldf3>
 1083368:	9809883a 	mov	r4,r19
 108336c:	900b883a 	mov	r5,r18
 1083370:	100d883a 	mov	r6,r2
 1083374:	180f883a 	mov	r7,r3
 1083378:	10890080 	call	1089008 <__adddf3>
 108337c:	1009883a 	mov	r4,r2
 1083380:	180b883a 	mov	r5,r3
 1083384:	1027883a 	mov	r19,r2
 1083388:	1825883a 	mov	r18,r3
 108338c:	10892980 	call	1089298 <__fixdfsi>
 1083390:	9809883a 	mov	r4,r19
 1083394:	900b883a 	mov	r5,r18
 1083398:	000d883a 	mov	r6,zero
 108339c:	000f883a 	mov	r7,zero
 10833a0:	d8800615 	stw	r2,24(sp)
 10833a4:	108923c0 	call	108923c <__ltdf2>
 10833a8:	10027e16 	blt	r2,zero,1083da4 <_dtoa_r+0xc6c>
 10833ac:	d8c00617 	ldw	r3,24(sp)
 10833b0:	00800584 	movi	r2,22
 10833b4:	10c26c36 	bltu	r2,r3,1083d68 <_dtoa_r+0xc30>
 10833b8:	180490fa 	slli	r2,r3,3
 10833bc:	00c04274 	movhi	r3,265
 10833c0:	18f02f04 	addi	r3,r3,-16196
 10833c4:	d9800317 	ldw	r6,12(sp)
 10833c8:	1885883a 	add	r2,r3,r2
 10833cc:	11000017 	ldw	r4,0(r2)
 10833d0:	11400117 	ldw	r5,4(r2)
 10833d4:	880f883a 	mov	r7,r17
 10833d8:	10891740 	call	1089174 <__gtdf2>
 10833dc:	00828f0e 	bge	zero,r2,1083e1c <_dtoa_r+0xce4>
 10833e0:	d8800617 	ldw	r2,24(sp)
 10833e4:	d8000d15 	stw	zero,52(sp)
 10833e8:	10bfffc4 	addi	r2,r2,-1
 10833ec:	d8800615 	stw	r2,24(sp)
 10833f0:	ad29c83a 	sub	r20,r21,r20
 10833f4:	a53fffc4 	addi	r20,r20,-1
 10833f8:	a0026616 	blt	r20,zero,1083d94 <_dtoa_r+0xc5c>
 10833fc:	dd000715 	stw	r20,28(sp)
 1083400:	d8000815 	stw	zero,32(sp)
 1083404:	d8800617 	ldw	r2,24(sp)
 1083408:	10025a16 	blt	r2,zero,1083d74 <_dtoa_r+0xc3c>
 108340c:	d8c00717 	ldw	r3,28(sp)
 1083410:	d8800b15 	stw	r2,44(sp)
 1083414:	d8000a15 	stw	zero,40(sp)
 1083418:	1887883a 	add	r3,r3,r2
 108341c:	d8c00715 	stw	r3,28(sp)
 1083420:	d9c00417 	ldw	r7,16(sp)
 1083424:	00800244 	movi	r2,9
 1083428:	11c10536 	bltu	r2,r7,1083840 <_dtoa_r+0x708>
 108342c:	00800144 	movi	r2,5
 1083430:	11c4c60e 	bge	r2,r7,108474c <_dtoa_r+0x1614>
 1083434:	39ffff04 	addi	r7,r7,-4
 1083438:	d9c00415 	stw	r7,16(sp)
 108343c:	0027883a 	mov	r19,zero
 1083440:	d9c00417 	ldw	r7,16(sp)
 1083444:	008000c4 	movi	r2,3
 1083448:	3883a226 	beq	r7,r2,10842d4 <_dtoa_r+0x119c>
 108344c:	11c2bc16 	blt	r2,r7,1083f40 <_dtoa_r+0xe08>
 1083450:	00800084 	movi	r2,2
 1083454:	3880fb1e 	bne	r7,r2,1083844 <_dtoa_r+0x70c>
 1083458:	d8000c15 	stw	zero,48(sp)
 108345c:	d9002117 	ldw	r4,132(sp)
 1083460:	0103ae0e 	bge	zero,r4,108431c <_dtoa_r+0x11e4>
 1083464:	2025883a 	mov	r18,r4
 1083468:	d9000e15 	stw	r4,56(sp)
 108346c:	d9000915 	stw	r4,36(sp)
 1083470:	80001115 	stw	zero,68(r16)
 1083474:	008005c4 	movi	r2,23
 1083478:	1484b22e 	bgeu	r2,r18,1084744 <_dtoa_r+0x160c>
 108347c:	00c00044 	movi	r3,1
 1083480:	00800104 	movi	r2,4
 1083484:	1085883a 	add	r2,r2,r2
 1083488:	11000504 	addi	r4,r2,20
 108348c:	180b883a 	mov	r5,r3
 1083490:	18c00044 	addi	r3,r3,1
 1083494:	913ffb2e 	bgeu	r18,r4,1083484 <_dtoa_r+0x34c>
 1083498:	81401115 	stw	r5,68(r16)
 108349c:	8009883a 	mov	r4,r16
 10834a0:	10864900 	call	1086490 <_Balloc>
 10834a4:	102f883a 	mov	r23,r2
 10834a8:	80801015 	stw	r2,64(r16)
 10834ac:	00800384 	movi	r2,14
 10834b0:	1480f036 	bltu	r2,r18,1083874 <_dtoa_r+0x73c>
 10834b4:	9800ef26 	beq	r19,zero,1083874 <_dtoa_r+0x73c>
 10834b8:	d8800617 	ldw	r2,24(sp)
 10834bc:	00839c0e 	bge	zero,r2,1084330 <_dtoa_r+0x11f8>
 10834c0:	d8c00617 	ldw	r3,24(sp)
 10834c4:	108003cc 	andi	r2,r2,15
 10834c8:	100490fa 	slli	r2,r2,3
 10834cc:	182bd13a 	srai	r21,r3,4
 10834d0:	00c04274 	movhi	r3,265
 10834d4:	18f02f04 	addi	r3,r3,-16196
 10834d8:	1885883a 	add	r2,r3,r2
 10834dc:	a8c0040c 	andi	r3,r21,16
 10834e0:	12800017 	ldw	r10,0(r2)
 10834e4:	15800117 	ldw	r22,4(r2)
 10834e8:	18038726 	beq	r3,zero,1084308 <_dtoa_r+0x11d0>
 10834ec:	00804274 	movhi	r2,265
 10834f0:	10b02504 	addi	r2,r2,-16236
 10834f4:	11800817 	ldw	r6,32(r2)
 10834f8:	11c00917 	ldw	r7,36(r2)
 10834fc:	d9000317 	ldw	r4,12(sp)
 1083500:	880b883a 	mov	r5,r17
 1083504:	da801515 	stw	r10,84(sp)
 1083508:	108069c0 	call	108069c <__divdf3>
 108350c:	da801517 	ldw	r10,84(sp)
 1083510:	d8801015 	stw	r2,64(sp)
 1083514:	1829883a 	mov	r20,r3
 1083518:	ad4003cc 	andi	r21,r21,15
 108351c:	048000c4 	movi	r18,3
 1083520:	a8001126 	beq	r21,zero,1083568 <_dtoa_r+0x430>
 1083524:	04c04274 	movhi	r19,265
 1083528:	9cf02504 	addi	r19,r19,-16236
 108352c:	5005883a 	mov	r2,r10
 1083530:	b007883a 	mov	r3,r22
 1083534:	a980004c 	andi	r6,r21,1
 1083538:	1009883a 	mov	r4,r2
 108353c:	a82bd07a 	srai	r21,r21,1
 1083540:	180b883a 	mov	r5,r3
 1083544:	30000426 	beq	r6,zero,1083558 <_dtoa_r+0x420>
 1083548:	99800017 	ldw	r6,0(r19)
 108354c:	99c00117 	ldw	r7,4(r19)
 1083550:	94800044 	addi	r18,r18,1
 1083554:	10803b80 	call	10803b8 <__muldf3>
 1083558:	9cc00204 	addi	r19,r19,8
 108355c:	a83ff51e 	bne	r21,zero,1083534 <_dtoa_r+0x3fc>
 1083560:	1015883a 	mov	r10,r2
 1083564:	182d883a 	mov	r22,r3
 1083568:	d9001017 	ldw	r4,64(sp)
 108356c:	a00b883a 	mov	r5,r20
 1083570:	500d883a 	mov	r6,r10
 1083574:	b00f883a 	mov	r7,r22
 1083578:	108069c0 	call	108069c <__divdf3>
 108357c:	1027883a 	mov	r19,r2
 1083580:	1829883a 	mov	r20,r3
 1083584:	d8c00d17 	ldw	r3,52(sp)
 1083588:	18000626 	beq	r3,zero,10835a4 <_dtoa_r+0x46c>
 108358c:	9809883a 	mov	r4,r19
 1083590:	a00b883a 	mov	r5,r20
 1083594:	000d883a 	mov	r6,zero
 1083598:	01cffc34 	movhi	r7,16368
 108359c:	108923c0 	call	108923c <__ltdf2>
 10835a0:	10040e16 	blt	r2,zero,10845dc <_dtoa_r+0x14a4>
 10835a4:	9009883a 	mov	r4,r18
 10835a8:	10808500 	call	1080850 <__floatsidf>
 10835ac:	1009883a 	mov	r4,r2
 10835b0:	180b883a 	mov	r5,r3
 10835b4:	980d883a 	mov	r6,r19
 10835b8:	a00f883a 	mov	r7,r20
 10835bc:	10803b80 	call	10803b8 <__muldf3>
 10835c0:	1009883a 	mov	r4,r2
 10835c4:	180b883a 	mov	r5,r3
 10835c8:	000d883a 	mov	r6,zero
 10835cc:	01d00734 	movhi	r7,16412
 10835d0:	10890080 	call	1089008 <__adddf3>
 10835d4:	057f3034 	movhi	r21,64704
 10835d8:	1d6b883a 	add	r21,r3,r21
 10835dc:	d8c00917 	ldw	r3,36(sp)
 10835e0:	1025883a 	mov	r18,r2
 10835e4:	18031f26 	beq	r3,zero,1084264 <_dtoa_r+0x112c>
 10835e8:	d8800617 	ldw	r2,24(sp)
 10835ec:	dac00917 	ldw	r11,36(sp)
 10835f0:	d8801315 	stw	r2,76(sp)
 10835f4:	d8c00c17 	ldw	r3,48(sp)
 10835f8:	18039026 	beq	r3,zero,108443c <_dtoa_r+0x1304>
 10835fc:	58bfffc4 	addi	r2,r11,-1
 1083600:	100490fa 	slli	r2,r2,3
 1083604:	00c04274 	movhi	r3,265
 1083608:	18f02f04 	addi	r3,r3,-16196
 108360c:	0009883a 	mov	r4,zero
 1083610:	1885883a 	add	r2,r3,r2
 1083614:	11800017 	ldw	r6,0(r2)
 1083618:	11c00117 	ldw	r7,4(r2)
 108361c:	014ff834 	movhi	r5,16352
 1083620:	dac01615 	stw	r11,88(sp)
 1083624:	108069c0 	call	108069c <__divdf3>
 1083628:	900d883a 	mov	r6,r18
 108362c:	a80f883a 	mov	r7,r21
 1083630:	1009883a 	mov	r4,r2
 1083634:	180b883a 	mov	r5,r3
 1083638:	108905c0 	call	108905c <__subdf3>
 108363c:	a00b883a 	mov	r5,r20
 1083640:	9809883a 	mov	r4,r19
 1083644:	182b883a 	mov	r21,r3
 1083648:	d8801015 	stw	r2,64(sp)
 108364c:	10892980 	call	1089298 <__fixdfsi>
 1083650:	1009883a 	mov	r4,r2
 1083654:	d8801515 	stw	r2,84(sp)
 1083658:	10808500 	call	1080850 <__floatsidf>
 108365c:	9809883a 	mov	r4,r19
 1083660:	a00b883a 	mov	r5,r20
 1083664:	100d883a 	mov	r6,r2
 1083668:	180f883a 	mov	r7,r3
 108366c:	108905c0 	call	108905c <__subdf3>
 1083670:	da401517 	ldw	r9,84(sp)
 1083674:	d9001017 	ldw	r4,64(sp)
 1083678:	a80b883a 	mov	r5,r21
 108367c:	4d000c04 	addi	r20,r9,48
 1083680:	bd000005 	stb	r20,0(r23)
 1083684:	100d883a 	mov	r6,r2
 1083688:	180f883a 	mov	r7,r3
 108368c:	bd800044 	addi	r22,r23,1
 1083690:	1025883a 	mov	r18,r2
 1083694:	1827883a 	mov	r19,r3
 1083698:	10891740 	call	1089174 <__gtdf2>
 108369c:	00842216 	blt	zero,r2,1084728 <_dtoa_r+0x15f0>
 10836a0:	0009883a 	mov	r4,zero
 10836a4:	014ffc34 	movhi	r5,16368
 10836a8:	900d883a 	mov	r6,r18
 10836ac:	980f883a 	mov	r7,r19
 10836b0:	108905c0 	call	108905c <__subdf3>
 10836b4:	d9001017 	ldw	r4,64(sp)
 10836b8:	a80b883a 	mov	r5,r21
 10836bc:	100d883a 	mov	r6,r2
 10836c0:	180f883a 	mov	r7,r3
 10836c4:	10891740 	call	1089174 <__gtdf2>
 10836c8:	dac01617 	ldw	r11,88(sp)
 10836cc:	00841316 	blt	zero,r2,108471c <_dtoa_r+0x15e4>
 10836d0:	00800044 	movi	r2,1
 10836d4:	12c0670e 	bge	r2,r11,1083874 <_dtoa_r+0x73c>
 10836d8:	bad7883a 	add	r11,r23,r11
 10836dc:	df001115 	stw	fp,68(sp)
 10836e0:	dc401215 	stw	r17,72(sp)
 10836e4:	5839883a 	mov	fp,r11
 10836e8:	dc401017 	ldw	r17,64(sp)
 10836ec:	00000806 	br	1083710 <_dtoa_r+0x5d8>
 10836f0:	108905c0 	call	108905c <__subdf3>
 10836f4:	1009883a 	mov	r4,r2
 10836f8:	180b883a 	mov	r5,r3
 10836fc:	880d883a 	mov	r6,r17
 1083700:	a80f883a 	mov	r7,r21
 1083704:	108923c0 	call	108923c <__ltdf2>
 1083708:	1003ee16 	blt	r2,zero,10846c4 <_dtoa_r+0x158c>
 108370c:	b703f126 	beq	r22,fp,10846d4 <_dtoa_r+0x159c>
 1083710:	8809883a 	mov	r4,r17
 1083714:	a80b883a 	mov	r5,r21
 1083718:	000d883a 	mov	r6,zero
 108371c:	01d00934 	movhi	r7,16420
 1083720:	10803b80 	call	10803b8 <__muldf3>
 1083724:	000d883a 	mov	r6,zero
 1083728:	01d00934 	movhi	r7,16420
 108372c:	9009883a 	mov	r4,r18
 1083730:	980b883a 	mov	r5,r19
 1083734:	1023883a 	mov	r17,r2
 1083738:	182b883a 	mov	r21,r3
 108373c:	10803b80 	call	10803b8 <__muldf3>
 1083740:	180b883a 	mov	r5,r3
 1083744:	1009883a 	mov	r4,r2
 1083748:	1825883a 	mov	r18,r3
 108374c:	1027883a 	mov	r19,r2
 1083750:	10892980 	call	1089298 <__fixdfsi>
 1083754:	1009883a 	mov	r4,r2
 1083758:	1029883a 	mov	r20,r2
 108375c:	10808500 	call	1080850 <__floatsidf>
 1083760:	9809883a 	mov	r4,r19
 1083764:	900b883a 	mov	r5,r18
 1083768:	100d883a 	mov	r6,r2
 108376c:	180f883a 	mov	r7,r3
 1083770:	108905c0 	call	108905c <__subdf3>
 1083774:	a5000c04 	addi	r20,r20,48
 1083778:	b5000005 	stb	r20,0(r22)
 108377c:	1009883a 	mov	r4,r2
 1083780:	180b883a 	mov	r5,r3
 1083784:	880d883a 	mov	r6,r17
 1083788:	a80f883a 	mov	r7,r21
 108378c:	1025883a 	mov	r18,r2
 1083790:	1827883a 	mov	r19,r3
 1083794:	108923c0 	call	108923c <__ltdf2>
 1083798:	b5800044 	addi	r22,r22,1
 108379c:	0009883a 	mov	r4,zero
 10837a0:	014ffc34 	movhi	r5,16368
 10837a4:	900d883a 	mov	r6,r18
 10837a8:	980f883a 	mov	r7,r19
 10837ac:	103fd00e 	bge	r2,zero,10836f0 <_dtoa_r+0x5b8>
 10837b0:	d9001317 	ldw	r4,76(sp)
 10837b4:	df001117 	ldw	fp,68(sp)
 10837b8:	d9000615 	stw	r4,24(sp)
 10837bc:	8009883a 	mov	r4,r16
 10837c0:	e00b883a 	mov	r5,fp
 10837c4:	10865380 	call	1086538 <_Bfree>
 10837c8:	d9c00617 	ldw	r7,24(sp)
 10837cc:	d8c02217 	ldw	r3,136(sp)
 10837d0:	d9002417 	ldw	r4,144(sp)
 10837d4:	b0000005 	stb	zero,0(r22)
 10837d8:	38800044 	addi	r2,r7,1
 10837dc:	18800015 	stw	r2,0(r3)
 10837e0:	203e8426 	beq	r4,zero,10831f4 <_dtoa_r+0xbc>
 10837e4:	25800015 	stw	r22,0(r4)
 10837e8:	003e8206 	br	10831f4 <_dtoa_r+0xbc>
 10837ec:	00800434 	movhi	r2,16
 10837f0:	10bfffc4 	addi	r2,r2,-1
 10837f4:	90a4703a 	and	r18,r18,r2
 10837f8:	903e901e 	bne	r18,zero,108323c <_dtoa_r+0x104>
 10837fc:	05c04274 	movhi	r23,265
 1083800:	bdf00604 	addi	r23,r23,-16360
 1083804:	003e8f06 	br	1083244 <_dtoa_r+0x10c>
 1083808:	b8800204 	addi	r2,r23,8
 108380c:	003e9206 	br	1083258 <_dtoa_r+0x120>
 1083810:	01400434 	movhi	r5,16
 1083814:	297fffc4 	addi	r5,r5,-1
 1083818:	894a703a 	and	r5,r17,r5
 108381c:	d9000317 	ldw	r4,12(sp)
 1083820:	294ffc34 	orhi	r5,r5,16368
 1083824:	a53f0044 	addi	r20,r20,-1023
 1083828:	dd400217 	ldw	r21,8(sp)
 108382c:	d8000f15 	stw	zero,60(sp)
 1083830:	003eb106 	br	10832f8 <_dtoa_r+0x1c0>
 1083834:	05c04274 	movhi	r23,265
 1083838:	bdeffd04 	addi	r23,r23,-16396
 108383c:	003e6d06 	br	10831f4 <_dtoa_r+0xbc>
 1083840:	d8000415 	stw	zero,16(sp)
 1083844:	80001115 	stw	zero,68(r16)
 1083848:	8009883a 	mov	r4,r16
 108384c:	000b883a 	mov	r5,zero
 1083850:	10864900 	call	1086490 <_Balloc>
 1083854:	01ffffc4 	movi	r7,-1
 1083858:	102f883a 	mov	r23,r2
 108385c:	80801015 	stw	r2,64(r16)
 1083860:	00800044 	movi	r2,1
 1083864:	d9c00915 	stw	r7,36(sp)
 1083868:	d8002115 	stw	zero,132(sp)
 108386c:	d9c00e15 	stw	r7,56(sp)
 1083870:	d8800c15 	stw	r2,48(sp)
 1083874:	d8800117 	ldw	r2,4(sp)
 1083878:	10008b16 	blt	r2,zero,1083aa8 <_dtoa_r+0x970>
 108387c:	d9000617 	ldw	r4,24(sp)
 1083880:	00c00384 	movi	r3,14
 1083884:	19008816 	blt	r3,r4,1083aa8 <_dtoa_r+0x970>
 1083888:	200490fa 	slli	r2,r4,3
 108388c:	d9c02117 	ldw	r7,132(sp)
 1083890:	00c04274 	movhi	r3,265
 1083894:	18f02f04 	addi	r3,r3,-16196
 1083898:	1885883a 	add	r2,r3,r2
 108389c:	14800017 	ldw	r18,0(r2)
 10838a0:	14c00117 	ldw	r19,4(r2)
 10838a4:	3801c916 	blt	r7,zero,1083fcc <_dtoa_r+0xe94>
 10838a8:	d9000317 	ldw	r4,12(sp)
 10838ac:	900d883a 	mov	r6,r18
 10838b0:	980f883a 	mov	r7,r19
 10838b4:	880b883a 	mov	r5,r17
 10838b8:	108069c0 	call	108069c <__divdf3>
 10838bc:	180b883a 	mov	r5,r3
 10838c0:	1009883a 	mov	r4,r2
 10838c4:	10892980 	call	1089298 <__fixdfsi>
 10838c8:	1009883a 	mov	r4,r2
 10838cc:	102b883a 	mov	r21,r2
 10838d0:	10808500 	call	1080850 <__floatsidf>
 10838d4:	1009883a 	mov	r4,r2
 10838d8:	180b883a 	mov	r5,r3
 10838dc:	900d883a 	mov	r6,r18
 10838e0:	980f883a 	mov	r7,r19
 10838e4:	10803b80 	call	10803b8 <__muldf3>
 10838e8:	d9000317 	ldw	r4,12(sp)
 10838ec:	880b883a 	mov	r5,r17
 10838f0:	100d883a 	mov	r6,r2
 10838f4:	180f883a 	mov	r7,r3
 10838f8:	108905c0 	call	108905c <__subdf3>
 10838fc:	d9c00917 	ldw	r7,36(sp)
 1083900:	1009883a 	mov	r4,r2
 1083904:	a8800c04 	addi	r2,r21,48
 1083908:	b8800005 	stb	r2,0(r23)
 108390c:	01800044 	movi	r6,1
 1083910:	180b883a 	mov	r5,r3
 1083914:	2005883a 	mov	r2,r4
 1083918:	bd800044 	addi	r22,r23,1
 108391c:	39803726 	beq	r7,r6,10839fc <_dtoa_r+0x8c4>
 1083920:	000d883a 	mov	r6,zero
 1083924:	01d00934 	movhi	r7,16420
 1083928:	10803b80 	call	10803b8 <__muldf3>
 108392c:	1009883a 	mov	r4,r2
 1083930:	180b883a 	mov	r5,r3
 1083934:	000d883a 	mov	r6,zero
 1083938:	000f883a 	mov	r7,zero
 108393c:	1029883a 	mov	r20,r2
 1083940:	1823883a 	mov	r17,r3
 1083944:	10890bc0 	call	10890bc <__eqdf2>
 1083948:	103f9c26 	beq	r2,zero,10837bc <_dtoa_r+0x684>
 108394c:	dd400917 	ldw	r21,36(sp)
 1083950:	dc000415 	stw	r16,16(sp)
 1083954:	00000906 	br	108397c <_dtoa_r+0x844>
 1083958:	10803b80 	call	10803b8 <__muldf3>
 108395c:	1009883a 	mov	r4,r2
 1083960:	180b883a 	mov	r5,r3
 1083964:	000d883a 	mov	r6,zero
 1083968:	000f883a 	mov	r7,zero
 108396c:	1029883a 	mov	r20,r2
 1083970:	1823883a 	mov	r17,r3
 1083974:	10890bc0 	call	10890bc <__eqdf2>
 1083978:	10022926 	beq	r2,zero,1084220 <_dtoa_r+0x10e8>
 108397c:	900d883a 	mov	r6,r18
 1083980:	980f883a 	mov	r7,r19
 1083984:	a009883a 	mov	r4,r20
 1083988:	880b883a 	mov	r5,r17
 108398c:	108069c0 	call	108069c <__divdf3>
 1083990:	180b883a 	mov	r5,r3
 1083994:	1009883a 	mov	r4,r2
 1083998:	10892980 	call	1089298 <__fixdfsi>
 108399c:	1009883a 	mov	r4,r2
 10839a0:	1021883a 	mov	r16,r2
 10839a4:	10808500 	call	1080850 <__floatsidf>
 10839a8:	1009883a 	mov	r4,r2
 10839ac:	180b883a 	mov	r5,r3
 10839b0:	900d883a 	mov	r6,r18
 10839b4:	980f883a 	mov	r7,r19
 10839b8:	10803b80 	call	10803b8 <__muldf3>
 10839bc:	a009883a 	mov	r4,r20
 10839c0:	880b883a 	mov	r5,r17
 10839c4:	100d883a 	mov	r6,r2
 10839c8:	180f883a 	mov	r7,r3
 10839cc:	108905c0 	call	108905c <__subdf3>
 10839d0:	82400c04 	addi	r9,r16,48
 10839d4:	b2400005 	stb	r9,0(r22)
 10839d8:	b5800044 	addi	r22,r22,1
 10839dc:	b5d3c83a 	sub	r9,r22,r23
 10839e0:	000d883a 	mov	r6,zero
 10839e4:	01d00934 	movhi	r7,16420
 10839e8:	1009883a 	mov	r4,r2
 10839ec:	180b883a 	mov	r5,r3
 10839f0:	aa7fd91e 	bne	r21,r9,1083958 <_dtoa_r+0x820>
 10839f4:	802b883a 	mov	r21,r16
 10839f8:	dc000417 	ldw	r16,16(sp)
 10839fc:	1009883a 	mov	r4,r2
 1083a00:	180b883a 	mov	r5,r3
 1083a04:	100d883a 	mov	r6,r2
 1083a08:	180f883a 	mov	r7,r3
 1083a0c:	10890080 	call	1089008 <__adddf3>
 1083a10:	9009883a 	mov	r4,r18
 1083a14:	980b883a 	mov	r5,r19
 1083a18:	100d883a 	mov	r6,r2
 1083a1c:	180f883a 	mov	r7,r3
 1083a20:	1023883a 	mov	r17,r2
 1083a24:	1829883a 	mov	r20,r3
 1083a28:	108923c0 	call	108923c <__ltdf2>
 1083a2c:	10000816 	blt	r2,zero,1083a50 <_dtoa_r+0x918>
 1083a30:	9009883a 	mov	r4,r18
 1083a34:	980b883a 	mov	r5,r19
 1083a38:	880d883a 	mov	r6,r17
 1083a3c:	a00f883a 	mov	r7,r20
 1083a40:	10890bc0 	call	10890bc <__eqdf2>
 1083a44:	103f5d1e 	bne	r2,zero,10837bc <_dtoa_r+0x684>
 1083a48:	ad40004c 	andi	r21,r21,1
 1083a4c:	a83f5b26 	beq	r21,zero,10837bc <_dtoa_r+0x684>
 1083a50:	b53fffc3 	ldbu	r20,-1(r22)
 1083a54:	b0ffff84 	addi	r3,r22,-2
 1083a58:	01400e44 	movi	r5,57
 1083a5c:	00000306 	br	1083a6c <_dtoa_r+0x934>
 1083a60:	1d000003 	ldbu	r20,0(r3)
 1083a64:	102d883a 	mov	r22,r2
 1083a68:	18ffffc4 	addi	r3,r3,-1
 1083a6c:	a1003fcc 	andi	r4,r20,255
 1083a70:	2100201c 	xori	r4,r4,128
 1083a74:	213fe004 	addi	r4,r4,-128
 1083a78:	b0bfffc4 	addi	r2,r22,-1
 1083a7c:	2142ca1e 	bne	r4,r5,10845a8 <_dtoa_r+0x1470>
 1083a80:	b8bff71e 	bne	r23,r2,1083a60 <_dtoa_r+0x928>
 1083a84:	d8800617 	ldw	r2,24(sp)
 1083a88:	05000c44 	movi	r20,49
 1083a8c:	10800044 	addi	r2,r2,1
 1083a90:	d8800615 	stw	r2,24(sp)
 1083a94:	00800c04 	movi	r2,48
 1083a98:	b8800005 	stb	r2,0(r23)
 1083a9c:	b805883a 	mov	r2,r23
 1083aa0:	15000005 	stb	r20,0(r2)
 1083aa4:	003f4506 	br	10837bc <_dtoa_r+0x684>
 1083aa8:	d9c00c17 	ldw	r7,48(sp)
 1083aac:	3800c926 	beq	r7,zero,1083dd4 <_dtoa_r+0xc9c>
 1083ab0:	d9c00417 	ldw	r7,16(sp)
 1083ab4:	00c00044 	movi	r3,1
 1083ab8:	19c16c0e 	bge	r3,r7,108406c <_dtoa_r+0xf34>
 1083abc:	d9000917 	ldw	r4,36(sp)
 1083ac0:	d9c00a17 	ldw	r7,40(sp)
 1083ac4:	24ffffc4 	addi	r19,r4,-1
 1083ac8:	3cc20716 	blt	r7,r19,10842e8 <_dtoa_r+0x11b0>
 1083acc:	3ce7c83a 	sub	r19,r7,r19
 1083ad0:	d9c00917 	ldw	r7,36(sp)
 1083ad4:	3802ae16 	blt	r7,zero,1084590 <_dtoa_r+0x1458>
 1083ad8:	dc800817 	ldw	r18,32(sp)
 1083adc:	d8800917 	ldw	r2,36(sp)
 1083ae0:	d8c00817 	ldw	r3,32(sp)
 1083ae4:	d9c00717 	ldw	r7,28(sp)
 1083ae8:	8009883a 	mov	r4,r16
 1083aec:	1887883a 	add	r3,r3,r2
 1083af0:	388f883a 	add	r7,r7,r2
 1083af4:	01400044 	movi	r5,1
 1083af8:	d8c00815 	stw	r3,32(sp)
 1083afc:	d9c00715 	stw	r7,28(sp)
 1083b00:	10868900 	call	1086890 <__i2b>
 1083b04:	102b883a 	mov	r21,r2
 1083b08:	90000a26 	beq	r18,zero,1083b34 <_dtoa_r+0x9fc>
 1083b0c:	d8800717 	ldw	r2,28(sp)
 1083b10:	0080080e 	bge	zero,r2,1083b34 <_dtoa_r+0x9fc>
 1083b14:	90812b16 	blt	r18,r2,1083fc4 <_dtoa_r+0xe8c>
 1083b18:	d8c00817 	ldw	r3,32(sp)
 1083b1c:	d9000717 	ldw	r4,28(sp)
 1083b20:	90a5c83a 	sub	r18,r18,r2
 1083b24:	1887c83a 	sub	r3,r3,r2
 1083b28:	2089c83a 	sub	r4,r4,r2
 1083b2c:	d8c00815 	stw	r3,32(sp)
 1083b30:	d9000715 	stw	r4,28(sp)
 1083b34:	d9c00a17 	ldw	r7,40(sp)
 1083b38:	01c0140e 	bge	zero,r7,1083b8c <_dtoa_r+0xa54>
 1083b3c:	d8800c17 	ldw	r2,48(sp)
 1083b40:	1001de26 	beq	r2,zero,10842bc <_dtoa_r+0x1184>
 1083b44:	04c00e0e 	bge	zero,r19,1083b80 <_dtoa_r+0xa48>
 1083b48:	a80b883a 	mov	r5,r21
 1083b4c:	8009883a 	mov	r4,r16
 1083b50:	980d883a 	mov	r6,r19
 1083b54:	1086aac0 	call	1086aac <__pow5mult>
 1083b58:	e00d883a 	mov	r6,fp
 1083b5c:	8009883a 	mov	r4,r16
 1083b60:	100b883a 	mov	r5,r2
 1083b64:	102b883a 	mov	r21,r2
 1083b68:	10868cc0 	call	10868cc <__multiply>
 1083b6c:	1029883a 	mov	r20,r2
 1083b70:	e00b883a 	mov	r5,fp
 1083b74:	8009883a 	mov	r4,r16
 1083b78:	10865380 	call	1086538 <_Bfree>
 1083b7c:	a039883a 	mov	fp,r20
 1083b80:	d8c00a17 	ldw	r3,40(sp)
 1083b84:	1ccdc83a 	sub	r6,r3,r19
 1083b88:	3001291e 	bne	r6,zero,1084030 <_dtoa_r+0xef8>
 1083b8c:	8009883a 	mov	r4,r16
 1083b90:	01400044 	movi	r5,1
 1083b94:	10868900 	call	1086890 <__i2b>
 1083b98:	d9000b17 	ldw	r4,44(sp)
 1083b9c:	1029883a 	mov	r20,r2
 1083ba0:	0100050e 	bge	zero,r4,1083bb8 <_dtoa_r+0xa80>
 1083ba4:	d9800b17 	ldw	r6,44(sp)
 1083ba8:	8009883a 	mov	r4,r16
 1083bac:	100b883a 	mov	r5,r2
 1083bb0:	1086aac0 	call	1086aac <__pow5mult>
 1083bb4:	1029883a 	mov	r20,r2
 1083bb8:	d9c00417 	ldw	r7,16(sp)
 1083bbc:	00800044 	movi	r2,1
 1083bc0:	11c0f00e 	bge	r2,r7,1083f84 <_dtoa_r+0xe4c>
 1083bc4:	0023883a 	mov	r17,zero
 1083bc8:	d8800b17 	ldw	r2,44(sp)
 1083bcc:	1001741e 	bne	r2,zero,10841a0 <_dtoa_r+0x1068>
 1083bd0:	00800044 	movi	r2,1
 1083bd4:	d8c00717 	ldw	r3,28(sp)
 1083bd8:	10c5883a 	add	r2,r2,r3
 1083bdc:	108007cc 	andi	r2,r2,31
 1083be0:	10008026 	beq	r2,zero,1083de4 <_dtoa_r+0xcac>
 1083be4:	01000804 	movi	r4,32
 1083be8:	2089c83a 	sub	r4,r4,r2
 1083bec:	00c00104 	movi	r3,4
 1083bf0:	1902d00e 	bge	r3,r4,1084734 <_dtoa_r+0x15fc>
 1083bf4:	d9000817 	ldw	r4,32(sp)
 1083bf8:	d9c00717 	ldw	r7,28(sp)
 1083bfc:	00c00704 	movi	r3,28
 1083c00:	1885c83a 	sub	r2,r3,r2
 1083c04:	2089883a 	add	r4,r4,r2
 1083c08:	388f883a 	add	r7,r7,r2
 1083c0c:	d9000815 	stw	r4,32(sp)
 1083c10:	90a5883a 	add	r18,r18,r2
 1083c14:	d9c00715 	stw	r7,28(sp)
 1083c18:	d9c00817 	ldw	r7,32(sp)
 1083c1c:	01c0050e 	bge	zero,r7,1083c34 <_dtoa_r+0xafc>
 1083c20:	e00b883a 	mov	r5,fp
 1083c24:	8009883a 	mov	r4,r16
 1083c28:	380d883a 	mov	r6,r7
 1083c2c:	1086bd80 	call	1086bd8 <__lshift>
 1083c30:	1039883a 	mov	fp,r2
 1083c34:	d8800717 	ldw	r2,28(sp)
 1083c38:	0080050e 	bge	zero,r2,1083c50 <_dtoa_r+0xb18>
 1083c3c:	a00b883a 	mov	r5,r20
 1083c40:	8009883a 	mov	r4,r16
 1083c44:	100d883a 	mov	r6,r2
 1083c48:	1086bd80 	call	1086bd8 <__lshift>
 1083c4c:	1029883a 	mov	r20,r2
 1083c50:	d8c00d17 	ldw	r3,52(sp)
 1083c54:	1801401e 	bne	r3,zero,1084158 <_dtoa_r+0x1020>
 1083c58:	d8800917 	ldw	r2,36(sp)
 1083c5c:	00815a0e 	bge	zero,r2,10841c8 <_dtoa_r+0x1090>
 1083c60:	d8c00c17 	ldw	r3,48(sp)
 1083c64:	18006f1e 	bne	r3,zero,1083e24 <_dtoa_r+0xcec>
 1083c68:	b823883a 	mov	r17,r23
 1083c6c:	dc800917 	ldw	r18,36(sp)
 1083c70:	00000206 	br	1083c7c <_dtoa_r+0xb44>
 1083c74:	10865600 	call	1086560 <__multadd>
 1083c78:	1039883a 	mov	fp,r2
 1083c7c:	e009883a 	mov	r4,fp
 1083c80:	a00b883a 	mov	r5,r20
 1083c84:	1082f300 	call	1082f30 <quorem>
 1083c88:	10800c04 	addi	r2,r2,48
 1083c8c:	88800005 	stb	r2,0(r17)
 1083c90:	8c400044 	addi	r17,r17,1
 1083c94:	8dc7c83a 	sub	r3,r17,r23
 1083c98:	8009883a 	mov	r4,r16
 1083c9c:	e00b883a 	mov	r5,fp
 1083ca0:	01800284 	movi	r6,10
 1083ca4:	000f883a 	mov	r7,zero
 1083ca8:	1cbff216 	blt	r3,r18,1083c74 <_dtoa_r+0xb3c>
 1083cac:	dd800917 	ldw	r22,36(sp)
 1083cb0:	1007883a 	mov	r3,r2
 1083cb4:	05823a0e 	bge	zero,r22,10845a0 <_dtoa_r+0x1468>
 1083cb8:	bdad883a 	add	r22,r23,r22
 1083cbc:	0023883a 	mov	r17,zero
 1083cc0:	e00b883a 	mov	r5,fp
 1083cc4:	01800044 	movi	r6,1
 1083cc8:	8009883a 	mov	r4,r16
 1083ccc:	d8c01515 	stw	r3,84(sp)
 1083cd0:	1086bd80 	call	1086bd8 <__lshift>
 1083cd4:	1009883a 	mov	r4,r2
 1083cd8:	a00b883a 	mov	r5,r20
 1083cdc:	1039883a 	mov	fp,r2
 1083ce0:	1086d340 	call	1086d34 <__mcmp>
 1083ce4:	d8c01517 	ldw	r3,84(sp)
 1083ce8:	0080d60e 	bge	zero,r2,1084044 <_dtoa_r+0xf0c>
 1083cec:	b13fffc3 	ldbu	r4,-1(r22)
 1083cf0:	b0ffff84 	addi	r3,r22,-2
 1083cf4:	01800e44 	movi	r6,57
 1083cf8:	00000306 	br	1083d08 <_dtoa_r+0xbd0>
 1083cfc:	19000003 	ldbu	r4,0(r3)
 1083d00:	102d883a 	mov	r22,r2
 1083d04:	18ffffc4 	addi	r3,r3,-1
 1083d08:	21403fcc 	andi	r5,r4,255
 1083d0c:	2940201c 	xori	r5,r5,128
 1083d10:	297fe004 	addi	r5,r5,-128
 1083d14:	b0bfffc4 	addi	r2,r22,-1
 1083d18:	2981a71e 	bne	r5,r6,10843b8 <_dtoa_r+0x1280>
 1083d1c:	b8bff71e 	bne	r23,r2,1083cfc <_dtoa_r+0xbc4>
 1083d20:	d8800617 	ldw	r2,24(sp)
 1083d24:	10800044 	addi	r2,r2,1
 1083d28:	d8800615 	stw	r2,24(sp)
 1083d2c:	00800c44 	movi	r2,49
 1083d30:	b8800005 	stb	r2,0(r23)
 1083d34:	8009883a 	mov	r4,r16
 1083d38:	a00b883a 	mov	r5,r20
 1083d3c:	10865380 	call	1086538 <_Bfree>
 1083d40:	a83e9e26 	beq	r21,zero,10837bc <_dtoa_r+0x684>
 1083d44:	88000426 	beq	r17,zero,1083d58 <_dtoa_r+0xc20>
 1083d48:	8d400326 	beq	r17,r21,1083d58 <_dtoa_r+0xc20>
 1083d4c:	8009883a 	mov	r4,r16
 1083d50:	880b883a 	mov	r5,r17
 1083d54:	10865380 	call	1086538 <_Bfree>
 1083d58:	8009883a 	mov	r4,r16
 1083d5c:	a80b883a 	mov	r5,r21
 1083d60:	10865380 	call	1086538 <_Bfree>
 1083d64:	003e9506 	br	10837bc <_dtoa_r+0x684>
 1083d68:	00c00044 	movi	r3,1
 1083d6c:	d8c00d15 	stw	r3,52(sp)
 1083d70:	003d9f06 	br	10833f0 <_dtoa_r+0x2b8>
 1083d74:	d9000817 	ldw	r4,32(sp)
 1083d78:	d8800617 	ldw	r2,24(sp)
 1083d7c:	d8000b15 	stw	zero,44(sp)
 1083d80:	2089c83a 	sub	r4,r4,r2
 1083d84:	0087c83a 	sub	r3,zero,r2
 1083d88:	d9000815 	stw	r4,32(sp)
 1083d8c:	d8c00a15 	stw	r3,40(sp)
 1083d90:	003da306 	br	1083420 <_dtoa_r+0x2e8>
 1083d94:	0529c83a 	sub	r20,zero,r20
 1083d98:	dd000815 	stw	r20,32(sp)
 1083d9c:	d8000715 	stw	zero,28(sp)
 1083da0:	003d9806 	br	1083404 <_dtoa_r+0x2cc>
 1083da4:	d9000617 	ldw	r4,24(sp)
 1083da8:	10808500 	call	1080850 <__floatsidf>
 1083dac:	1009883a 	mov	r4,r2
 1083db0:	180b883a 	mov	r5,r3
 1083db4:	980d883a 	mov	r6,r19
 1083db8:	900f883a 	mov	r7,r18
 1083dbc:	10891180 	call	1089118 <__nedf2>
 1083dc0:	103d7a26 	beq	r2,zero,10833ac <_dtoa_r+0x274>
 1083dc4:	d8800617 	ldw	r2,24(sp)
 1083dc8:	10bfffc4 	addi	r2,r2,-1
 1083dcc:	d8800615 	stw	r2,24(sp)
 1083dd0:	003d7606 	br	10833ac <_dtoa_r+0x274>
 1083dd4:	dcc00a17 	ldw	r19,40(sp)
 1083dd8:	dc800817 	ldw	r18,32(sp)
 1083ddc:	002b883a 	mov	r21,zero
 1083de0:	003f4906 	br	1083b08 <_dtoa_r+0x9d0>
 1083de4:	00800704 	movi	r2,28
 1083de8:	d8c00817 	ldw	r3,32(sp)
 1083dec:	d9000717 	ldw	r4,28(sp)
 1083df0:	90a5883a 	add	r18,r18,r2
 1083df4:	1887883a 	add	r3,r3,r2
 1083df8:	2089883a 	add	r4,r4,r2
 1083dfc:	d8c00815 	stw	r3,32(sp)
 1083e00:	d9000715 	stw	r4,28(sp)
 1083e04:	003f8406 	br	1083c18 <_dtoa_r+0xae0>
 1083e08:	d9c00317 	ldw	r7,12(sp)
 1083e0c:	013efb84 	movi	r4,-1042
 1083e10:	2509c83a 	sub	r4,r4,r20
 1083e14:	3908983a 	sll	r4,r7,r4
 1083e18:	003d3006 	br	10832dc <_dtoa_r+0x1a4>
 1083e1c:	d8000d15 	stw	zero,52(sp)
 1083e20:	003d7306 	br	10833f0 <_dtoa_r+0x2b8>
 1083e24:	0480050e 	bge	zero,r18,1083e3c <_dtoa_r+0xd04>
 1083e28:	a80b883a 	mov	r5,r21
 1083e2c:	8009883a 	mov	r4,r16
 1083e30:	900d883a 	mov	r6,r18
 1083e34:	1086bd80 	call	1086bd8 <__lshift>
 1083e38:	102b883a 	mov	r21,r2
 1083e3c:	8801611e 	bne	r17,zero,10843c4 <_dtoa_r+0x128c>
 1083e40:	a827883a 	mov	r19,r21
 1083e44:	d8c00317 	ldw	r3,12(sp)
 1083e48:	d9000917 	ldw	r4,36(sp)
 1083e4c:	b8bfffc4 	addi	r2,r23,-1
 1083e50:	18c0004c 	andi	r3,r3,1
 1083e54:	1105883a 	add	r2,r2,r4
 1083e58:	b825883a 	mov	r18,r23
 1083e5c:	d8800515 	stw	r2,20(sp)
 1083e60:	a823883a 	mov	r17,r21
 1083e64:	d8c00315 	stw	r3,12(sp)
 1083e68:	ddc00715 	stw	r23,28(sp)
 1083e6c:	e009883a 	mov	r4,fp
 1083e70:	a00b883a 	mov	r5,r20
 1083e74:	1082f300 	call	1082f30 <quorem>
 1083e78:	e009883a 	mov	r4,fp
 1083e7c:	880b883a 	mov	r5,r17
 1083e80:	102d883a 	mov	r22,r2
 1083e84:	1086d340 	call	1086d34 <__mcmp>
 1083e88:	980d883a 	mov	r6,r19
 1083e8c:	8009883a 	mov	r4,r16
 1083e90:	a00b883a 	mov	r5,r20
 1083e94:	102b883a 	mov	r21,r2
 1083e98:	1086d8c0 	call	1086d8c <__mdiff>
 1083e9c:	100d883a 	mov	r6,r2
 1083ea0:	10800317 	ldw	r2,12(r2)
 1083ea4:	b5c00c04 	addi	r23,r22,48
 1083ea8:	10008c26 	beq	r2,zero,10840dc <_dtoa_r+0xfa4>
 1083eac:	8009883a 	mov	r4,r16
 1083eb0:	300b883a 	mov	r5,r6
 1083eb4:	10865380 	call	1086538 <_Bfree>
 1083eb8:	00800044 	movi	r2,1
 1083ebc:	a8007116 	blt	r21,zero,1084084 <_dtoa_r+0xf4c>
 1083ec0:	a800041e 	bne	r21,zero,1083ed4 <_dtoa_r+0xd9c>
 1083ec4:	d9c00417 	ldw	r7,16(sp)
 1083ec8:	3800021e 	bne	r7,zero,1083ed4 <_dtoa_r+0xd9c>
 1083ecc:	d8c00317 	ldw	r3,12(sp)
 1083ed0:	18006c26 	beq	r3,zero,1084084 <_dtoa_r+0xf4c>
 1083ed4:	00814c16 	blt	zero,r2,1084408 <_dtoa_r+0x12d0>
 1083ed8:	d8c00517 	ldw	r3,20(sp)
 1083edc:	95400044 	addi	r21,r18,1
 1083ee0:	95c00005 	stb	r23,0(r18)
 1083ee4:	a82d883a 	mov	r22,r21
 1083ee8:	90c14d26 	beq	r18,r3,1084420 <_dtoa_r+0x12e8>
 1083eec:	e00b883a 	mov	r5,fp
 1083ef0:	8009883a 	mov	r4,r16
 1083ef4:	01800284 	movi	r6,10
 1083ef8:	000f883a 	mov	r7,zero
 1083efc:	10865600 	call	1086560 <__multadd>
 1083f00:	1039883a 	mov	fp,r2
 1083f04:	8cc08b26 	beq	r17,r19,1084134 <_dtoa_r+0xffc>
 1083f08:	880b883a 	mov	r5,r17
 1083f0c:	01800284 	movi	r6,10
 1083f10:	000f883a 	mov	r7,zero
 1083f14:	8009883a 	mov	r4,r16
 1083f18:	10865600 	call	1086560 <__multadd>
 1083f1c:	980b883a 	mov	r5,r19
 1083f20:	8009883a 	mov	r4,r16
 1083f24:	01800284 	movi	r6,10
 1083f28:	000f883a 	mov	r7,zero
 1083f2c:	1023883a 	mov	r17,r2
 1083f30:	10865600 	call	1086560 <__multadd>
 1083f34:	1027883a 	mov	r19,r2
 1083f38:	a825883a 	mov	r18,r21
 1083f3c:	003fcb06 	br	1083e6c <_dtoa_r+0xd34>
 1083f40:	d9c00417 	ldw	r7,16(sp)
 1083f44:	00800104 	movi	r2,4
 1083f48:	3880e426 	beq	r7,r2,10842dc <_dtoa_r+0x11a4>
 1083f4c:	00800144 	movi	r2,5
 1083f50:	38be3c1e 	bne	r7,r2,1083844 <_dtoa_r+0x70c>
 1083f54:	00c00044 	movi	r3,1
 1083f58:	d8c00c15 	stw	r3,48(sp)
 1083f5c:	d9c02117 	ldw	r7,132(sp)
 1083f60:	d8800617 	ldw	r2,24(sp)
 1083f64:	388f883a 	add	r7,r7,r2
 1083f68:	3c800044 	addi	r18,r7,1
 1083f6c:	d9c00e15 	stw	r7,56(sp)
 1083f70:	dc800915 	stw	r18,36(sp)
 1083f74:	04bd3e16 	blt	zero,r18,1083470 <_dtoa_r+0x338>
 1083f78:	80001115 	stw	zero,68(r16)
 1083f7c:	000b883a 	mov	r5,zero
 1083f80:	003d4606 	br	108349c <_dtoa_r+0x364>
 1083f84:	d8c00317 	ldw	r3,12(sp)
 1083f88:	183f0e1e 	bne	r3,zero,1083bc4 <_dtoa_r+0xa8c>
 1083f8c:	00c00434 	movhi	r3,16
 1083f90:	18ffffc4 	addi	r3,r3,-1
 1083f94:	88c6703a 	and	r3,r17,r3
 1083f98:	183f0a1e 	bne	r3,zero,1083bc4 <_dtoa_r+0xa8c>
 1083f9c:	8c5ffc2c 	andhi	r17,r17,32752
 1083fa0:	883f0826 	beq	r17,zero,1083bc4 <_dtoa_r+0xa8c>
 1083fa4:	d9000817 	ldw	r4,32(sp)
 1083fa8:	d9c00717 	ldw	r7,28(sp)
 1083fac:	1023883a 	mov	r17,r2
 1083fb0:	2089883a 	add	r4,r4,r2
 1083fb4:	388f883a 	add	r7,r7,r2
 1083fb8:	d9000815 	stw	r4,32(sp)
 1083fbc:	d9c00715 	stw	r7,28(sp)
 1083fc0:	003f0106 	br	1083bc8 <_dtoa_r+0xa90>
 1083fc4:	9005883a 	mov	r2,r18
 1083fc8:	003ed306 	br	1083b18 <_dtoa_r+0x9e0>
 1083fcc:	d8800917 	ldw	r2,36(sp)
 1083fd0:	00be3516 	blt	zero,r2,10838a8 <_dtoa_r+0x770>
 1083fd4:	1000b61e 	bne	r2,zero,10842b0 <_dtoa_r+0x1178>
 1083fd8:	9009883a 	mov	r4,r18
 1083fdc:	980b883a 	mov	r5,r19
 1083fe0:	000d883a 	mov	r6,zero
 1083fe4:	01d00534 	movhi	r7,16404
 1083fe8:	10803b80 	call	10803b8 <__muldf3>
 1083fec:	d9800317 	ldw	r6,12(sp)
 1083ff0:	1009883a 	mov	r4,r2
 1083ff4:	180b883a 	mov	r5,r3
 1083ff8:	880f883a 	mov	r7,r17
 1083ffc:	10891d80 	call	10891d8 <__gedf2>
 1084000:	0029883a 	mov	r20,zero
 1084004:	002b883a 	mov	r21,zero
 1084008:	10007e16 	blt	r2,zero,1084204 <_dtoa_r+0x10cc>
 108400c:	d8802117 	ldw	r2,132(sp)
 1084010:	b82d883a 	mov	r22,r23
 1084014:	0084303a 	nor	r2,zero,r2
 1084018:	d8800615 	stw	r2,24(sp)
 108401c:	8009883a 	mov	r4,r16
 1084020:	a00b883a 	mov	r5,r20
 1084024:	10865380 	call	1086538 <_Bfree>
 1084028:	a83f4b1e 	bne	r21,zero,1083d58 <_dtoa_r+0xc20>
 108402c:	003de306 	br	10837bc <_dtoa_r+0x684>
 1084030:	e00b883a 	mov	r5,fp
 1084034:	8009883a 	mov	r4,r16
 1084038:	1086aac0 	call	1086aac <__pow5mult>
 108403c:	1039883a 	mov	fp,r2
 1084040:	003ed206 	br	1083b8c <_dtoa_r+0xa54>
 1084044:	1000021e 	bne	r2,zero,1084050 <_dtoa_r+0xf18>
 1084048:	18c0004c 	andi	r3,r3,1
 108404c:	183f271e 	bne	r3,zero,1083cec <_dtoa_r+0xbb4>
 1084050:	01000c04 	movi	r4,48
 1084054:	00000106 	br	108405c <_dtoa_r+0xf24>
 1084058:	102d883a 	mov	r22,r2
 108405c:	b0bfffc4 	addi	r2,r22,-1
 1084060:	10c00007 	ldb	r3,0(r2)
 1084064:	193ffc26 	beq	r3,r4,1084058 <_dtoa_r+0xf20>
 1084068:	003f3206 	br	1083d34 <_dtoa_r+0xbfc>
 108406c:	d8c00f17 	ldw	r3,60(sp)
 1084070:	18015026 	beq	r3,zero,10845b4 <_dtoa_r+0x147c>
 1084074:	10810cc4 	addi	r2,r2,1075
 1084078:	dcc00a17 	ldw	r19,40(sp)
 108407c:	dc800817 	ldw	r18,32(sp)
 1084080:	003e9706 	br	1083ae0 <_dtoa_r+0x9a8>
 1084084:	b807883a 	mov	r3,r23
 1084088:	182b883a 	mov	r21,r3
 108408c:	ddc00717 	ldw	r23,28(sp)
 1084090:	00800e0e 	bge	zero,r2,10840cc <_dtoa_r+0xf94>
 1084094:	e00b883a 	mov	r5,fp
 1084098:	01800044 	movi	r6,1
 108409c:	8009883a 	mov	r4,r16
 10840a0:	d8c01515 	stw	r3,84(sp)
 10840a4:	1086bd80 	call	1086bd8 <__lshift>
 10840a8:	1009883a 	mov	r4,r2
 10840ac:	a00b883a 	mov	r5,r20
 10840b0:	1039883a 	mov	fp,r2
 10840b4:	1086d340 	call	1086d34 <__mcmp>
 10840b8:	d8c01517 	ldw	r3,84(sp)
 10840bc:	0081880e 	bge	zero,r2,10846e0 <_dtoa_r+0x15a8>
 10840c0:	00800e44 	movi	r2,57
 10840c4:	b0c00c44 	addi	r3,r22,49
 10840c8:	a8816326 	beq	r21,r2,1084658 <_dtoa_r+0x1520>
 10840cc:	90c00005 	stb	r3,0(r18)
 10840d0:	95800044 	addi	r22,r18,1
 10840d4:	982b883a 	mov	r21,r19
 10840d8:	003f1606 	br	1083d34 <_dtoa_r+0xbfc>
 10840dc:	300b883a 	mov	r5,r6
 10840e0:	e009883a 	mov	r4,fp
 10840e4:	d9801515 	stw	r6,84(sp)
 10840e8:	1086d340 	call	1086d34 <__mcmp>
 10840ec:	d9801517 	ldw	r6,84(sp)
 10840f0:	8009883a 	mov	r4,r16
 10840f4:	d8801515 	stw	r2,84(sp)
 10840f8:	300b883a 	mov	r5,r6
 10840fc:	10865380 	call	1086538 <_Bfree>
 1084100:	d8801517 	ldw	r2,84(sp)
 1084104:	103f6d1e 	bne	r2,zero,1083ebc <_dtoa_r+0xd84>
 1084108:	d9c00417 	ldw	r7,16(sp)
 108410c:	383f6b1e 	bne	r7,zero,1083ebc <_dtoa_r+0xd84>
 1084110:	d8c00317 	ldw	r3,12(sp)
 1084114:	183f691e 	bne	r3,zero,1083ebc <_dtoa_r+0xd84>
 1084118:	b807883a 	mov	r3,r23
 108411c:	00800e44 	movi	r2,57
 1084120:	ddc00717 	ldw	r23,28(sp)
 1084124:	18814c26 	beq	r3,r2,1084658 <_dtoa_r+0x1520>
 1084128:	057fe80e 	bge	zero,r21,10840cc <_dtoa_r+0xf94>
 108412c:	b0c00c44 	addi	r3,r22,49
 1084130:	003fe606 	br	10840cc <_dtoa_r+0xf94>
 1084134:	880b883a 	mov	r5,r17
 1084138:	8009883a 	mov	r4,r16
 108413c:	01800284 	movi	r6,10
 1084140:	000f883a 	mov	r7,zero
 1084144:	10865600 	call	1086560 <__multadd>
 1084148:	1023883a 	mov	r17,r2
 108414c:	1027883a 	mov	r19,r2
 1084150:	a825883a 	mov	r18,r21
 1084154:	003f4506 	br	1083e6c <_dtoa_r+0xd34>
 1084158:	e009883a 	mov	r4,fp
 108415c:	a00b883a 	mov	r5,r20
 1084160:	1086d340 	call	1086d34 <__mcmp>
 1084164:	103ebc0e 	bge	r2,zero,1083c58 <_dtoa_r+0xb20>
 1084168:	e00b883a 	mov	r5,fp
 108416c:	8009883a 	mov	r4,r16
 1084170:	01800284 	movi	r6,10
 1084174:	000f883a 	mov	r7,zero
 1084178:	10865600 	call	1086560 <__multadd>
 108417c:	1039883a 	mov	fp,r2
 1084180:	d8800617 	ldw	r2,24(sp)
 1084184:	d8c00c17 	ldw	r3,48(sp)
 1084188:	10bfffc4 	addi	r2,r2,-1
 108418c:	d8800615 	stw	r2,24(sp)
 1084190:	1801571e 	bne	r3,zero,10846f0 <_dtoa_r+0x15b8>
 1084194:	d9c00e17 	ldw	r7,56(sp)
 1084198:	d9c00915 	stw	r7,36(sp)
 108419c:	003eae06 	br	1083c58 <_dtoa_r+0xb20>
 10841a0:	a0800417 	ldw	r2,16(r20)
 10841a4:	10800104 	addi	r2,r2,4
 10841a8:	1085883a 	add	r2,r2,r2
 10841ac:	1085883a 	add	r2,r2,r2
 10841b0:	a085883a 	add	r2,r20,r2
 10841b4:	11000017 	ldw	r4,0(r2)
 10841b8:	10867780 	call	1086778 <__hi0bits>
 10841bc:	00c00804 	movi	r3,32
 10841c0:	1885c83a 	sub	r2,r3,r2
 10841c4:	003e8306 	br	1083bd4 <_dtoa_r+0xa9c>
 10841c8:	d9c00417 	ldw	r7,16(sp)
 10841cc:	00800084 	movi	r2,2
 10841d0:	11fea30e 	bge	r2,r7,1083c60 <_dtoa_r+0xb28>
 10841d4:	d8800917 	ldw	r2,36(sp)
 10841d8:	103f8c1e 	bne	r2,zero,108400c <_dtoa_r+0xed4>
 10841dc:	a00b883a 	mov	r5,r20
 10841e0:	8009883a 	mov	r4,r16
 10841e4:	01800144 	movi	r6,5
 10841e8:	000f883a 	mov	r7,zero
 10841ec:	10865600 	call	1086560 <__multadd>
 10841f0:	e009883a 	mov	r4,fp
 10841f4:	100b883a 	mov	r5,r2
 10841f8:	1029883a 	mov	r20,r2
 10841fc:	1086d340 	call	1086d34 <__mcmp>
 1084200:	00bf820e 	bge	zero,r2,108400c <_dtoa_r+0xed4>
 1084204:	00800c44 	movi	r2,49
 1084208:	b8800005 	stb	r2,0(r23)
 108420c:	d8800617 	ldw	r2,24(sp)
 1084210:	bd800044 	addi	r22,r23,1
 1084214:	10800044 	addi	r2,r2,1
 1084218:	d8800615 	stw	r2,24(sp)
 108421c:	003f7f06 	br	108401c <_dtoa_r+0xee4>
 1084220:	dc000417 	ldw	r16,16(sp)
 1084224:	003d6506 	br	10837bc <_dtoa_r+0x684>
 1084228:	9009883a 	mov	r4,r18
 108422c:	10808500 	call	1080850 <__floatsidf>
 1084230:	1009883a 	mov	r4,r2
 1084234:	180b883a 	mov	r5,r3
 1084238:	980d883a 	mov	r6,r19
 108423c:	a00f883a 	mov	r7,r20
 1084240:	10803b80 	call	10803b8 <__muldf3>
 1084244:	1009883a 	mov	r4,r2
 1084248:	180b883a 	mov	r5,r3
 108424c:	000d883a 	mov	r6,zero
 1084250:	01d00734 	movhi	r7,16412
 1084254:	10890080 	call	1089008 <__adddf3>
 1084258:	057f3034 	movhi	r21,64704
 108425c:	1025883a 	mov	r18,r2
 1084260:	1d6b883a 	add	r21,r3,r21
 1084264:	9809883a 	mov	r4,r19
 1084268:	a00b883a 	mov	r5,r20
 108426c:	000d883a 	mov	r6,zero
 1084270:	01d00534 	movhi	r7,16404
 1084274:	108905c0 	call	108905c <__subdf3>
 1084278:	1009883a 	mov	r4,r2
 108427c:	180b883a 	mov	r5,r3
 1084280:	900d883a 	mov	r6,r18
 1084284:	a80f883a 	mov	r7,r21
 1084288:	1027883a 	mov	r19,r2
 108428c:	1829883a 	mov	r20,r3
 1084290:	10891740 	call	1089174 <__gtdf2>
 1084294:	00806616 	blt	zero,r2,1084430 <_dtoa_r+0x12f8>
 1084298:	a9e0003c 	xorhi	r7,r21,32768
 108429c:	9809883a 	mov	r4,r19
 10842a0:	a00b883a 	mov	r5,r20
 10842a4:	900d883a 	mov	r6,r18
 10842a8:	108923c0 	call	108923c <__ltdf2>
 10842ac:	103d710e 	bge	r2,zero,1083874 <_dtoa_r+0x73c>
 10842b0:	0029883a 	mov	r20,zero
 10842b4:	002b883a 	mov	r21,zero
 10842b8:	003f5406 	br	108400c <_dtoa_r+0xed4>
 10842bc:	d9800a17 	ldw	r6,40(sp)
 10842c0:	e00b883a 	mov	r5,fp
 10842c4:	8009883a 	mov	r4,r16
 10842c8:	1086aac0 	call	1086aac <__pow5mult>
 10842cc:	1039883a 	mov	fp,r2
 10842d0:	003e2e06 	br	1083b8c <_dtoa_r+0xa54>
 10842d4:	d8000c15 	stw	zero,48(sp)
 10842d8:	003f2006 	br	1083f5c <_dtoa_r+0xe24>
 10842dc:	00800044 	movi	r2,1
 10842e0:	d8800c15 	stw	r2,48(sp)
 10842e4:	003c5d06 	br	108345c <_dtoa_r+0x324>
 10842e8:	d8c00a17 	ldw	r3,40(sp)
 10842ec:	d9000b17 	ldw	r4,44(sp)
 10842f0:	dcc00a15 	stw	r19,40(sp)
 10842f4:	98c5c83a 	sub	r2,r19,r3
 10842f8:	2089883a 	add	r4,r4,r2
 10842fc:	d9000b15 	stw	r4,44(sp)
 1084300:	0027883a 	mov	r19,zero
 1084304:	003df206 	br	1083ad0 <_dtoa_r+0x998>
 1084308:	d9000317 	ldw	r4,12(sp)
 108430c:	8829883a 	mov	r20,r17
 1084310:	04800084 	movi	r18,2
 1084314:	d9001015 	stw	r4,64(sp)
 1084318:	003c8106 	br	1083520 <_dtoa_r+0x3e8>
 108431c:	04800044 	movi	r18,1
 1084320:	dc800e15 	stw	r18,56(sp)
 1084324:	dc800915 	stw	r18,36(sp)
 1084328:	dc802115 	stw	r18,132(sp)
 108432c:	003f1206 	br	1083f78 <_dtoa_r+0xe40>
 1084330:	d8800617 	ldw	r2,24(sp)
 1084334:	00abc83a 	sub	r21,zero,r2
 1084338:	a800a426 	beq	r21,zero,10845cc <_dtoa_r+0x1494>
 108433c:	a88003cc 	andi	r2,r21,15
 1084340:	100490fa 	slli	r2,r2,3
 1084344:	00c04274 	movhi	r3,265
 1084348:	18f02f04 	addi	r3,r3,-16196
 108434c:	d9000317 	ldw	r4,12(sp)
 1084350:	1885883a 	add	r2,r3,r2
 1084354:	11800017 	ldw	r6,0(r2)
 1084358:	11c00117 	ldw	r7,4(r2)
 108435c:	a82bd13a 	srai	r21,r21,4
 1084360:	880b883a 	mov	r5,r17
 1084364:	10803b80 	call	10803b8 <__muldf3>
 1084368:	1027883a 	mov	r19,r2
 108436c:	1829883a 	mov	r20,r3
 1084370:	a800e826 	beq	r21,zero,1084714 <_dtoa_r+0x15dc>
 1084374:	05804274 	movhi	r22,265
 1084378:	b5b02504 	addi	r22,r22,-16236
 108437c:	04800084 	movi	r18,2
 1084380:	a980004c 	andi	r6,r21,1
 1084384:	1009883a 	mov	r4,r2
 1084388:	a82bd07a 	srai	r21,r21,1
 108438c:	180b883a 	mov	r5,r3
 1084390:	30000426 	beq	r6,zero,10843a4 <_dtoa_r+0x126c>
 1084394:	b1800017 	ldw	r6,0(r22)
 1084398:	b1c00117 	ldw	r7,4(r22)
 108439c:	94800044 	addi	r18,r18,1
 10843a0:	10803b80 	call	10803b8 <__muldf3>
 10843a4:	b5800204 	addi	r22,r22,8
 10843a8:	a83ff51e 	bne	r21,zero,1084380 <_dtoa_r+0x1248>
 10843ac:	1027883a 	mov	r19,r2
 10843b0:	1829883a 	mov	r20,r3
 10843b4:	003c7306 	br	1083584 <_dtoa_r+0x44c>
 10843b8:	21000044 	addi	r4,r4,1
 10843bc:	11000005 	stb	r4,0(r2)
 10843c0:	003e5c06 	br	1083d34 <_dtoa_r+0xbfc>
 10843c4:	a9400117 	ldw	r5,4(r21)
 10843c8:	8009883a 	mov	r4,r16
 10843cc:	10864900 	call	1086490 <_Balloc>
 10843d0:	a9800417 	ldw	r6,16(r21)
 10843d4:	11000304 	addi	r4,r2,12
 10843d8:	a9400304 	addi	r5,r21,12
 10843dc:	31800084 	addi	r6,r6,2
 10843e0:	318d883a 	add	r6,r6,r6
 10843e4:	318d883a 	add	r6,r6,r6
 10843e8:	1023883a 	mov	r17,r2
 10843ec:	10861940 	call	1086194 <memcpy>
 10843f0:	8009883a 	mov	r4,r16
 10843f4:	880b883a 	mov	r5,r17
 10843f8:	01800044 	movi	r6,1
 10843fc:	1086bd80 	call	1086bd8 <__lshift>
 1084400:	1027883a 	mov	r19,r2
 1084404:	003e8f06 	br	1083e44 <_dtoa_r+0xd0c>
 1084408:	b807883a 	mov	r3,r23
 108440c:	00800e44 	movi	r2,57
 1084410:	ddc00717 	ldw	r23,28(sp)
 1084414:	18809026 	beq	r3,r2,1084658 <_dtoa_r+0x1520>
 1084418:	18c00044 	addi	r3,r3,1
 108441c:	003f2b06 	br	10840cc <_dtoa_r+0xf94>
 1084420:	b807883a 	mov	r3,r23
 1084424:	982b883a 	mov	r21,r19
 1084428:	ddc00717 	ldw	r23,28(sp)
 108442c:	003e2406 	br	1083cc0 <_dtoa_r+0xb88>
 1084430:	0029883a 	mov	r20,zero
 1084434:	002b883a 	mov	r21,zero
 1084438:	003f7206 	br	1084204 <_dtoa_r+0x10cc>
 108443c:	593fffc4 	addi	r4,r11,-1
 1084440:	200490fa 	slli	r2,r4,3
 1084444:	00c04274 	movhi	r3,265
 1084448:	18f02f04 	addi	r3,r3,-16196
 108444c:	d9001015 	stw	r4,64(sp)
 1084450:	1885883a 	add	r2,r3,r2
 1084454:	11000017 	ldw	r4,0(r2)
 1084458:	11400117 	ldw	r5,4(r2)
 108445c:	900d883a 	mov	r6,r18
 1084460:	a80f883a 	mov	r7,r21
 1084464:	dac01615 	stw	r11,88(sp)
 1084468:	10803b80 	call	10803b8 <__muldf3>
 108446c:	a00b883a 	mov	r5,r20
 1084470:	9809883a 	mov	r4,r19
 1084474:	d8c01215 	stw	r3,72(sp)
 1084478:	d8801115 	stw	r2,68(sp)
 108447c:	10892980 	call	1089298 <__fixdfsi>
 1084480:	1009883a 	mov	r4,r2
 1084484:	1025883a 	mov	r18,r2
 1084488:	10808500 	call	1080850 <__floatsidf>
 108448c:	9809883a 	mov	r4,r19
 1084490:	a00b883a 	mov	r5,r20
 1084494:	100d883a 	mov	r6,r2
 1084498:	180f883a 	mov	r7,r3
 108449c:	94800c04 	addi	r18,r18,48
 10844a0:	108905c0 	call	108905c <__subdf3>
 10844a4:	bc800005 	stb	r18,0(r23)
 10844a8:	dac01617 	ldw	r11,88(sp)
 10844ac:	102b883a 	mov	r21,r2
 10844b0:	00800044 	movi	r2,1
 10844b4:	bd800044 	addi	r22,r23,1
 10844b8:	1815883a 	mov	r10,r3
 10844bc:	58802226 	beq	r11,r2,1084548 <_dtoa_r+0x1410>
 10844c0:	bad7883a 	add	r11,r23,r11
 10844c4:	dc001415 	stw	r16,80(sp)
 10844c8:	a805883a 	mov	r2,r21
 10844cc:	b027883a 	mov	r19,r22
 10844d0:	5821883a 	mov	r16,r11
 10844d4:	882b883a 	mov	r21,r17
 10844d8:	000d883a 	mov	r6,zero
 10844dc:	01d00934 	movhi	r7,16420
 10844e0:	1009883a 	mov	r4,r2
 10844e4:	180b883a 	mov	r5,r3
 10844e8:	10803b80 	call	10803b8 <__muldf3>
 10844ec:	180b883a 	mov	r5,r3
 10844f0:	1009883a 	mov	r4,r2
 10844f4:	1829883a 	mov	r20,r3
 10844f8:	1023883a 	mov	r17,r2
 10844fc:	10892980 	call	1089298 <__fixdfsi>
 1084500:	1009883a 	mov	r4,r2
 1084504:	1025883a 	mov	r18,r2
 1084508:	10808500 	call	1080850 <__floatsidf>
 108450c:	8809883a 	mov	r4,r17
 1084510:	a00b883a 	mov	r5,r20
 1084514:	100d883a 	mov	r6,r2
 1084518:	180f883a 	mov	r7,r3
 108451c:	94800c04 	addi	r18,r18,48
 1084520:	108905c0 	call	108905c <__subdf3>
 1084524:	9cc00044 	addi	r19,r19,1
 1084528:	9cbfffc5 	stb	r18,-1(r19)
 108452c:	9c3fea1e 	bne	r19,r16,10844d8 <_dtoa_r+0x13a0>
 1084530:	1815883a 	mov	r10,r3
 1084534:	d8c01017 	ldw	r3,64(sp)
 1084538:	dc001417 	ldw	r16,80(sp)
 108453c:	a823883a 	mov	r17,r21
 1084540:	b0ed883a 	add	r22,r22,r3
 1084544:	102b883a 	mov	r21,r2
 1084548:	d9001117 	ldw	r4,68(sp)
 108454c:	d9401217 	ldw	r5,72(sp)
 1084550:	000d883a 	mov	r6,zero
 1084554:	01cff834 	movhi	r7,16352
 1084558:	da801515 	stw	r10,84(sp)
 108455c:	10890080 	call	1089008 <__adddf3>
 1084560:	da801517 	ldw	r10,84(sp)
 1084564:	1009883a 	mov	r4,r2
 1084568:	180b883a 	mov	r5,r3
 108456c:	500f883a 	mov	r7,r10
 1084570:	a80d883a 	mov	r6,r21
 1084574:	108923c0 	call	108923c <__ltdf2>
 1084578:	da801517 	ldw	r10,84(sp)
 108457c:	10003b0e 	bge	r2,zero,108466c <_dtoa_r+0x1534>
 1084580:	d9c01317 	ldw	r7,76(sp)
 1084584:	b53fffc3 	ldbu	r20,-1(r22)
 1084588:	d9c00615 	stw	r7,24(sp)
 108458c:	003d3106 	br	1083a54 <_dtoa_r+0x91c>
 1084590:	d8800817 	ldw	r2,32(sp)
 1084594:	11e5c83a 	sub	r18,r2,r7
 1084598:	0005883a 	mov	r2,zero
 108459c:	003d5006 	br	1083ae0 <_dtoa_r+0x9a8>
 10845a0:	05800044 	movi	r22,1
 10845a4:	003dc406 	br	1083cb8 <_dtoa_r+0xb80>
 10845a8:	a5000044 	addi	r20,r20,1
 10845ac:	15000005 	stb	r20,0(r2)
 10845b0:	003c8206 	br	10837bc <_dtoa_r+0x684>
 10845b4:	d8800217 	ldw	r2,8(sp)
 10845b8:	00c00d84 	movi	r3,54
 10845bc:	dcc00a17 	ldw	r19,40(sp)
 10845c0:	1885c83a 	sub	r2,r3,r2
 10845c4:	dc800817 	ldw	r18,32(sp)
 10845c8:	003d4506 	br	1083ae0 <_dtoa_r+0x9a8>
 10845cc:	dcc00317 	ldw	r19,12(sp)
 10845d0:	8829883a 	mov	r20,r17
 10845d4:	04800084 	movi	r18,2
 10845d8:	003bea06 	br	1083584 <_dtoa_r+0x44c>
 10845dc:	d9000917 	ldw	r4,36(sp)
 10845e0:	203f1126 	beq	r4,zero,1084228 <_dtoa_r+0x10f0>
 10845e4:	d9c00e17 	ldw	r7,56(sp)
 10845e8:	01fca20e 	bge	zero,r7,1083874 <_dtoa_r+0x73c>
 10845ec:	a00b883a 	mov	r5,r20
 10845f0:	9809883a 	mov	r4,r19
 10845f4:	000d883a 	mov	r6,zero
 10845f8:	01d00934 	movhi	r7,16420
 10845fc:	10803b80 	call	10803b8 <__muldf3>
 1084600:	91000044 	addi	r4,r18,1
 1084604:	1027883a 	mov	r19,r2
 1084608:	1829883a 	mov	r20,r3
 108460c:	10808500 	call	1080850 <__floatsidf>
 1084610:	9809883a 	mov	r4,r19
 1084614:	a00b883a 	mov	r5,r20
 1084618:	100d883a 	mov	r6,r2
 108461c:	180f883a 	mov	r7,r3
 1084620:	10803b80 	call	10803b8 <__muldf3>
 1084624:	1009883a 	mov	r4,r2
 1084628:	180b883a 	mov	r5,r3
 108462c:	000d883a 	mov	r6,zero
 1084630:	01d00734 	movhi	r7,16412
 1084634:	10890080 	call	1089008 <__adddf3>
 1084638:	1025883a 	mov	r18,r2
 108463c:	d8800617 	ldw	r2,24(sp)
 1084640:	057f3034 	movhi	r21,64704
 1084644:	1d6b883a 	add	r21,r3,r21
 1084648:	10bfffc4 	addi	r2,r2,-1
 108464c:	d8801315 	stw	r2,76(sp)
 1084650:	dac00e17 	ldw	r11,56(sp)
 1084654:	003be706 	br	10835f4 <_dtoa_r+0x4bc>
 1084658:	01000e44 	movi	r4,57
 108465c:	91000005 	stb	r4,0(r18)
 1084660:	95800044 	addi	r22,r18,1
 1084664:	982b883a 	mov	r21,r19
 1084668:	003da106 	br	1083cf0 <_dtoa_r+0xbb8>
 108466c:	d9801117 	ldw	r6,68(sp)
 1084670:	d9c01217 	ldw	r7,72(sp)
 1084674:	0009883a 	mov	r4,zero
 1084678:	014ff834 	movhi	r5,16352
 108467c:	da801515 	stw	r10,84(sp)
 1084680:	108905c0 	call	108905c <__subdf3>
 1084684:	da801517 	ldw	r10,84(sp)
 1084688:	1009883a 	mov	r4,r2
 108468c:	180b883a 	mov	r5,r3
 1084690:	a80d883a 	mov	r6,r21
 1084694:	500f883a 	mov	r7,r10
 1084698:	10891740 	call	1089174 <__gtdf2>
 108469c:	00bc750e 	bge	zero,r2,1083874 <_dtoa_r+0x73c>
 10846a0:	01000c04 	movi	r4,48
 10846a4:	00000106 	br	10846ac <_dtoa_r+0x1574>
 10846a8:	102d883a 	mov	r22,r2
 10846ac:	b0bfffc4 	addi	r2,r22,-1
 10846b0:	10c00007 	ldb	r3,0(r2)
 10846b4:	193ffc26 	beq	r3,r4,10846a8 <_dtoa_r+0x1570>
 10846b8:	d8801317 	ldw	r2,76(sp)
 10846bc:	d8800615 	stw	r2,24(sp)
 10846c0:	003c3e06 	br	10837bc <_dtoa_r+0x684>
 10846c4:	d9001317 	ldw	r4,76(sp)
 10846c8:	df001117 	ldw	fp,68(sp)
 10846cc:	d9000615 	stw	r4,24(sp)
 10846d0:	003ce006 	br	1083a54 <_dtoa_r+0x91c>
 10846d4:	df001117 	ldw	fp,68(sp)
 10846d8:	dc401217 	ldw	r17,72(sp)
 10846dc:	003c6506 	br	1083874 <_dtoa_r+0x73c>
 10846e0:	103e7a1e 	bne	r2,zero,10840cc <_dtoa_r+0xf94>
 10846e4:	1880004c 	andi	r2,r3,1
 10846e8:	103e7826 	beq	r2,zero,10840cc <_dtoa_r+0xf94>
 10846ec:	003e7406 	br	10840c0 <_dtoa_r+0xf88>
 10846f0:	8009883a 	mov	r4,r16
 10846f4:	a80b883a 	mov	r5,r21
 10846f8:	01800284 	movi	r6,10
 10846fc:	000f883a 	mov	r7,zero
 1084700:	10865600 	call	1086560 <__multadd>
 1084704:	d9000e17 	ldw	r4,56(sp)
 1084708:	102b883a 	mov	r21,r2
 108470c:	d9000915 	stw	r4,36(sp)
 1084710:	003d5106 	br	1083c58 <_dtoa_r+0xb20>
 1084714:	04800084 	movi	r18,2
 1084718:	003b9a06 	br	1083584 <_dtoa_r+0x44c>
 108471c:	d8c01317 	ldw	r3,76(sp)
 1084720:	d8c00615 	stw	r3,24(sp)
 1084724:	003ccb06 	br	1083a54 <_dtoa_r+0x91c>
 1084728:	d8c01317 	ldw	r3,76(sp)
 108472c:	d8c00615 	stw	r3,24(sp)
 1084730:	003c2206 	br	10837bc <_dtoa_r+0x684>
 1084734:	20fd3826 	beq	r4,r3,1083c18 <_dtoa_r+0xae0>
 1084738:	00c00f04 	movi	r3,60
 108473c:	1885c83a 	sub	r2,r3,r2
 1084740:	003da906 	br	1083de8 <_dtoa_r+0xcb0>
 1084744:	000b883a 	mov	r5,zero
 1084748:	003b5406 	br	108349c <_dtoa_r+0x364>
 108474c:	04c00044 	movi	r19,1
 1084750:	003b3b06 	br	1083440 <_dtoa_r+0x308>

01084754 <_fflush_r>:
 1084754:	defffb04 	addi	sp,sp,-20
 1084758:	dcc00315 	stw	r19,12(sp)
 108475c:	dc400115 	stw	r17,4(sp)
 1084760:	dfc00415 	stw	ra,16(sp)
 1084764:	dc800215 	stw	r18,8(sp)
 1084768:	dc000015 	stw	r16,0(sp)
 108476c:	2027883a 	mov	r19,r4
 1084770:	2823883a 	mov	r17,r5
 1084774:	20000226 	beq	r4,zero,1084780 <_fflush_r+0x2c>
 1084778:	20800e17 	ldw	r2,56(r4)
 108477c:	10005726 	beq	r2,zero,10848dc <_fflush_r+0x188>
 1084780:	8880030b 	ldhu	r2,12(r17)
 1084784:	10c0020c 	andi	r3,r2,8
 1084788:	18ffffcc 	andi	r3,r3,65535
 108478c:	18e0001c 	xori	r3,r3,32768
 1084790:	18e00004 	addi	r3,r3,-32768
 1084794:	1800311e 	bne	r3,zero,108485c <_fflush_r+0x108>
 1084798:	89000117 	ldw	r4,4(r17)
 108479c:	10c20014 	ori	r3,r2,2048
 10847a0:	88c0030d 	sth	r3,12(r17)
 10847a4:	180b883a 	mov	r5,r3
 10847a8:	0100520e 	bge	zero,r4,10848f4 <_fflush_r+0x1a0>
 10847ac:	88c00a17 	ldw	r3,40(r17)
 10847b0:	18002226 	beq	r3,zero,108483c <_fflush_r+0xe8>
 10847b4:	1084000c 	andi	r2,r2,4096
 10847b8:	10bfffcc 	andi	r2,r2,65535
 10847bc:	10a0001c 	xori	r2,r2,32768
 10847c0:	10a00004 	addi	r2,r2,-32768
 10847c4:	10004e26 	beq	r2,zero,1084900 <_fflush_r+0x1ac>
 10847c8:	8c001417 	ldw	r16,80(r17)
 10847cc:	2940010c 	andi	r5,r5,4
 10847d0:	297fffcc 	andi	r5,r5,65535
 10847d4:	2960001c 	xori	r5,r5,32768
 10847d8:	29600004 	addi	r5,r5,-32768
 10847dc:	28000626 	beq	r5,zero,10847f8 <_fflush_r+0xa4>
 10847e0:	89000117 	ldw	r4,4(r17)
 10847e4:	88800c17 	ldw	r2,48(r17)
 10847e8:	8121c83a 	sub	r16,r16,r4
 10847ec:	10000226 	beq	r2,zero,10847f8 <_fflush_r+0xa4>
 10847f0:	88800f17 	ldw	r2,60(r17)
 10847f4:	80a1c83a 	sub	r16,r16,r2
 10847f8:	89400717 	ldw	r5,28(r17)
 10847fc:	9809883a 	mov	r4,r19
 1084800:	800d883a 	mov	r6,r16
 1084804:	000f883a 	mov	r7,zero
 1084808:	183ee83a 	callr	r3
 108480c:	8080281e 	bne	r16,r2,10848b0 <_fflush_r+0x15c>
 1084810:	8880030b 	ldhu	r2,12(r17)
 1084814:	88c00417 	ldw	r3,16(r17)
 1084818:	88000115 	stw	zero,4(r17)
 108481c:	113dffcc 	andi	r4,r2,63487
 1084820:	1084000c 	andi	r2,r2,4096
 1084824:	10bfffcc 	andi	r2,r2,65535
 1084828:	10a0001c 	xori	r2,r2,32768
 108482c:	8900030d 	sth	r4,12(r17)
 1084830:	88c00015 	stw	r3,0(r17)
 1084834:	10a00004 	addi	r2,r2,-32768
 1084838:	10002c1e 	bne	r2,zero,10848ec <_fflush_r+0x198>
 108483c:	0005883a 	mov	r2,zero
 1084840:	dfc00417 	ldw	ra,16(sp)
 1084844:	dcc00317 	ldw	r19,12(sp)
 1084848:	dc800217 	ldw	r18,8(sp)
 108484c:	dc400117 	ldw	r17,4(sp)
 1084850:	dc000017 	ldw	r16,0(sp)
 1084854:	dec00504 	addi	sp,sp,20
 1084858:	f800283a 	ret
 108485c:	8c800417 	ldw	r18,16(r17)
 1084860:	903ff626 	beq	r18,zero,108483c <_fflush_r+0xe8>
 1084864:	8c000017 	ldw	r16,0(r17)
 1084868:	108000cc 	andi	r2,r2,3
 108486c:	8c800015 	stw	r18,0(r17)
 1084870:	84a1c83a 	sub	r16,r16,r18
 1084874:	10001b1e 	bne	r2,zero,10848e4 <_fflush_r+0x190>
 1084878:	88800517 	ldw	r2,20(r17)
 108487c:	88800215 	stw	r2,8(r17)
 1084880:	04000316 	blt	zero,r16,1084890 <_fflush_r+0x13c>
 1084884:	003fed06 	br	108483c <_fflush_r+0xe8>
 1084888:	90a5883a 	add	r18,r18,r2
 108488c:	043feb0e 	bge	zero,r16,108483c <_fflush_r+0xe8>
 1084890:	88800917 	ldw	r2,36(r17)
 1084894:	89400717 	ldw	r5,28(r17)
 1084898:	800f883a 	mov	r7,r16
 108489c:	900d883a 	mov	r6,r18
 10848a0:	9809883a 	mov	r4,r19
 10848a4:	103ee83a 	callr	r2
 10848a8:	80a1c83a 	sub	r16,r16,r2
 10848ac:	00bff616 	blt	zero,r2,1084888 <_fflush_r+0x134>
 10848b0:	88c0030b 	ldhu	r3,12(r17)
 10848b4:	00bfffc4 	movi	r2,-1
 10848b8:	18c01014 	ori	r3,r3,64
 10848bc:	88c0030d 	sth	r3,12(r17)
 10848c0:	dfc00417 	ldw	ra,16(sp)
 10848c4:	dcc00317 	ldw	r19,12(sp)
 10848c8:	dc800217 	ldw	r18,8(sp)
 10848cc:	dc400117 	ldw	r17,4(sp)
 10848d0:	dc000017 	ldw	r16,0(sp)
 10848d4:	dec00504 	addi	sp,sp,20
 10848d8:	f800283a 	ret
 10848dc:	10849fc0 	call	10849fc <__sinit>
 10848e0:	003fa706 	br	1084780 <_fflush_r+0x2c>
 10848e4:	0005883a 	mov	r2,zero
 10848e8:	003fe406 	br	108487c <_fflush_r+0x128>
 10848ec:	8c001415 	stw	r16,80(r17)
 10848f0:	003fd206 	br	108483c <_fflush_r+0xe8>
 10848f4:	88c00f17 	ldw	r3,60(r17)
 10848f8:	00ffac16 	blt	zero,r3,10847ac <_fflush_r+0x58>
 10848fc:	003fcf06 	br	108483c <_fflush_r+0xe8>
 1084900:	89400717 	ldw	r5,28(r17)
 1084904:	9809883a 	mov	r4,r19
 1084908:	000d883a 	mov	r6,zero
 108490c:	01c00044 	movi	r7,1
 1084910:	183ee83a 	callr	r3
 1084914:	1021883a 	mov	r16,r2
 1084918:	00bfffc4 	movi	r2,-1
 108491c:	80800326 	beq	r16,r2,108492c <_fflush_r+0x1d8>
 1084920:	8940030b 	ldhu	r5,12(r17)
 1084924:	88c00a17 	ldw	r3,40(r17)
 1084928:	003fa806 	br	10847cc <_fflush_r+0x78>
 108492c:	98c00017 	ldw	r3,0(r19)
 1084930:	00800744 	movi	r2,29
 1084934:	18bfde1e 	bne	r3,r2,10848b0 <_fflush_r+0x15c>
 1084938:	003fc006 	br	108483c <_fflush_r+0xe8>

0108493c <fflush>:
 108493c:	200b883a 	mov	r5,r4
 1084940:	20000426 	beq	r4,zero,1084954 <fflush+0x18>
 1084944:	00804274 	movhi	r2,265
 1084948:	10b6f704 	addi	r2,r2,-9252
 108494c:	11000017 	ldw	r4,0(r2)
 1084950:	10847541 	jmpi	1084754 <_fflush_r>
 1084954:	00804274 	movhi	r2,265
 1084958:	10b6f604 	addi	r2,r2,-9256
 108495c:	11000017 	ldw	r4,0(r2)
 1084960:	01404234 	movhi	r5,264
 1084964:	2951d504 	addi	r5,r5,18260
 1084968:	10855dc1 	jmpi	10855dc <_fwalk_reent>

0108496c <__fp_lock>:
 108496c:	0005883a 	mov	r2,zero
 1084970:	f800283a 	ret

01084974 <__fp_unlock>:
 1084974:	0005883a 	mov	r2,zero
 1084978:	f800283a 	ret

0108497c <_cleanup_r>:
 108497c:	01404234 	movhi	r5,264
 1084980:	295fea04 	addi	r5,r5,32680
 1084984:	10855341 	jmpi	1085534 <_fwalk>

01084988 <__sfmoreglue>:
 1084988:	defffc04 	addi	sp,sp,-16
 108498c:	dc400115 	stw	r17,4(sp)
 1084990:	2c401724 	muli	r17,r5,92
 1084994:	dc800215 	stw	r18,8(sp)
 1084998:	2825883a 	mov	r18,r5
 108499c:	89400304 	addi	r5,r17,12
 10849a0:	dc000015 	stw	r16,0(sp)
 10849a4:	dfc00315 	stw	ra,12(sp)
 10849a8:	10859180 	call	1085918 <_malloc_r>
 10849ac:	1021883a 	mov	r16,r2
 10849b0:	10000726 	beq	r2,zero,10849d0 <__sfmoreglue+0x48>
 10849b4:	11000304 	addi	r4,r2,12
 10849b8:	10000015 	stw	zero,0(r2)
 10849bc:	14800115 	stw	r18,4(r2)
 10849c0:	11000215 	stw	r4,8(r2)
 10849c4:	000b883a 	mov	r5,zero
 10849c8:	880d883a 	mov	r6,r17
 10849cc:	10863b40 	call	10863b4 <memset>
 10849d0:	8005883a 	mov	r2,r16
 10849d4:	dfc00317 	ldw	ra,12(sp)
 10849d8:	dc800217 	ldw	r18,8(sp)
 10849dc:	dc400117 	ldw	r17,4(sp)
 10849e0:	dc000017 	ldw	r16,0(sp)
 10849e4:	dec00404 	addi	sp,sp,16
 10849e8:	f800283a 	ret

010849ec <_cleanup>:
 10849ec:	00804274 	movhi	r2,265
 10849f0:	10b6f604 	addi	r2,r2,-9256
 10849f4:	11000017 	ldw	r4,0(r2)
 10849f8:	108497c1 	jmpi	108497c <_cleanup_r>

010849fc <__sinit>:
 10849fc:	20800e17 	ldw	r2,56(r4)
 1084a00:	1000401e 	bne	r2,zero,1084b04 <__sinit+0x108>
 1084a04:	21400117 	ldw	r5,4(r4)
 1084a08:	01804234 	movhi	r6,264
 1084a0c:	31925f04 	addi	r6,r6,18812
 1084a10:	20c00217 	ldw	r3,8(r4)
 1084a14:	21800f15 	stw	r6,60(r4)
 1084a18:	2080bb04 	addi	r2,r4,748
 1084a1c:	02400044 	movi	r9,1
 1084a20:	018000c4 	movi	r6,3
 1084a24:	2180b915 	stw	r6,740(r4)
 1084a28:	2080ba15 	stw	r2,744(r4)
 1084a2c:	22400e15 	stw	r9,56(r4)
 1084a30:	20800317 	ldw	r2,12(r4)
 1084a34:	2000b815 	stw	zero,736(r4)
 1084a38:	02004234 	movhi	r8,264
 1084a3c:	421ebf04 	addi	r8,r8,31484
 1084a40:	01c04234 	movhi	r7,264
 1084a44:	39ded404 	addi	r7,r7,31568
 1084a48:	01804234 	movhi	r6,264
 1084a4c:	319ef604 	addi	r6,r6,31704
 1084a50:	01004234 	movhi	r4,264
 1084a54:	211f0d04 	addi	r4,r4,31796
 1084a58:	02800104 	movi	r10,4
 1084a5c:	28000015 	stw	zero,0(r5)
 1084a60:	28000115 	stw	zero,4(r5)
 1084a64:	28000215 	stw	zero,8(r5)
 1084a68:	2a80030d 	sth	r10,12(r5)
 1084a6c:	2800038d 	sth	zero,14(r5)
 1084a70:	28000415 	stw	zero,16(r5)
 1084a74:	28000515 	stw	zero,20(r5)
 1084a78:	28000615 	stw	zero,24(r5)
 1084a7c:	29400715 	stw	r5,28(r5)
 1084a80:	2a000815 	stw	r8,32(r5)
 1084a84:	29c00915 	stw	r7,36(r5)
 1084a88:	29800a15 	stw	r6,40(r5)
 1084a8c:	29000b15 	stw	r4,44(r5)
 1084a90:	01400284 	movi	r5,10
 1084a94:	18000015 	stw	zero,0(r3)
 1084a98:	18000115 	stw	zero,4(r3)
 1084a9c:	18000215 	stw	zero,8(r3)
 1084aa0:	1940030d 	sth	r5,12(r3)
 1084aa4:	1a40038d 	sth	r9,14(r3)
 1084aa8:	18000415 	stw	zero,16(r3)
 1084aac:	18000515 	stw	zero,20(r3)
 1084ab0:	18000615 	stw	zero,24(r3)
 1084ab4:	18c00715 	stw	r3,28(r3)
 1084ab8:	1a000815 	stw	r8,32(r3)
 1084abc:	19c00915 	stw	r7,36(r3)
 1084ac0:	19800a15 	stw	r6,40(r3)
 1084ac4:	19000b15 	stw	r4,44(r3)
 1084ac8:	00c00484 	movi	r3,18
 1084acc:	10c0030d 	sth	r3,12(r2)
 1084ad0:	00c00084 	movi	r3,2
 1084ad4:	10000015 	stw	zero,0(r2)
 1084ad8:	10000115 	stw	zero,4(r2)
 1084adc:	10000215 	stw	zero,8(r2)
 1084ae0:	10c0038d 	sth	r3,14(r2)
 1084ae4:	10000415 	stw	zero,16(r2)
 1084ae8:	10000515 	stw	zero,20(r2)
 1084aec:	10000615 	stw	zero,24(r2)
 1084af0:	10800715 	stw	r2,28(r2)
 1084af4:	12000815 	stw	r8,32(r2)
 1084af8:	11c00915 	stw	r7,36(r2)
 1084afc:	11800a15 	stw	r6,40(r2)
 1084b00:	11000b15 	stw	r4,44(r2)
 1084b04:	f800283a 	ret

01084b08 <__sfp>:
 1084b08:	defffc04 	addi	sp,sp,-16
 1084b0c:	00804274 	movhi	r2,265
 1084b10:	10b6f604 	addi	r2,r2,-9256
 1084b14:	dc400115 	stw	r17,4(sp)
 1084b18:	14400017 	ldw	r17,0(r2)
 1084b1c:	dc800215 	stw	r18,8(sp)
 1084b20:	dfc00315 	stw	ra,12(sp)
 1084b24:	88800e17 	ldw	r2,56(r17)
 1084b28:	dc000015 	stw	r16,0(sp)
 1084b2c:	2025883a 	mov	r18,r4
 1084b30:	10002826 	beq	r2,zero,1084bd4 <__sfp+0xcc>
 1084b34:	8c40b804 	addi	r17,r17,736
 1084b38:	043fffc4 	movi	r16,-1
 1084b3c:	89400117 	ldw	r5,4(r17)
 1084b40:	88800217 	ldw	r2,8(r17)
 1084b44:	297fffc4 	addi	r5,r5,-1
 1084b48:	28000a16 	blt	r5,zero,1084b74 <__sfp+0x6c>
 1084b4c:	10c0030f 	ldh	r3,12(r2)
 1084b50:	18000c26 	beq	r3,zero,1084b84 <__sfp+0x7c>
 1084b54:	10c01a04 	addi	r3,r2,104
 1084b58:	00000206 	br	1084b64 <__sfp+0x5c>
 1084b5c:	19bfe90f 	ldh	r6,-92(r3)
 1084b60:	30000826 	beq	r6,zero,1084b84 <__sfp+0x7c>
 1084b64:	297fffc4 	addi	r5,r5,-1
 1084b68:	18bffd04 	addi	r2,r3,-12
 1084b6c:	18c01704 	addi	r3,r3,92
 1084b70:	2c3ffa1e 	bne	r5,r16,1084b5c <__sfp+0x54>
 1084b74:	88800017 	ldw	r2,0(r17)
 1084b78:	10001926 	beq	r2,zero,1084be0 <__sfp+0xd8>
 1084b7c:	1023883a 	mov	r17,r2
 1084b80:	003fee06 	br	1084b3c <__sfp+0x34>
 1084b84:	00ffffc4 	movi	r3,-1
 1084b88:	10c0038d 	sth	r3,14(r2)
 1084b8c:	00c00044 	movi	r3,1
 1084b90:	10c0030d 	sth	r3,12(r2)
 1084b94:	10000015 	stw	zero,0(r2)
 1084b98:	10000215 	stw	zero,8(r2)
 1084b9c:	10000115 	stw	zero,4(r2)
 1084ba0:	10000415 	stw	zero,16(r2)
 1084ba4:	10000515 	stw	zero,20(r2)
 1084ba8:	10000615 	stw	zero,24(r2)
 1084bac:	10000c15 	stw	zero,48(r2)
 1084bb0:	10000d15 	stw	zero,52(r2)
 1084bb4:	10001115 	stw	zero,68(r2)
 1084bb8:	10001215 	stw	zero,72(r2)
 1084bbc:	dfc00317 	ldw	ra,12(sp)
 1084bc0:	dc800217 	ldw	r18,8(sp)
 1084bc4:	dc400117 	ldw	r17,4(sp)
 1084bc8:	dc000017 	ldw	r16,0(sp)
 1084bcc:	dec00404 	addi	sp,sp,16
 1084bd0:	f800283a 	ret
 1084bd4:	8809883a 	mov	r4,r17
 1084bd8:	10849fc0 	call	10849fc <__sinit>
 1084bdc:	003fd506 	br	1084b34 <__sfp+0x2c>
 1084be0:	9009883a 	mov	r4,r18
 1084be4:	01400104 	movi	r5,4
 1084be8:	10849880 	call	1084988 <__sfmoreglue>
 1084bec:	88800015 	stw	r2,0(r17)
 1084bf0:	103fe21e 	bne	r2,zero,1084b7c <__sfp+0x74>
 1084bf4:	00800304 	movi	r2,12
 1084bf8:	90800015 	stw	r2,0(r18)
 1084bfc:	0005883a 	mov	r2,zero
 1084c00:	003fee06 	br	1084bbc <__sfp+0xb4>

01084c04 <__sfp_lock_acquire>:
 1084c04:	f800283a 	ret

01084c08 <__sfp_lock_release>:
 1084c08:	f800283a 	ret

01084c0c <__sinit_lock_acquire>:
 1084c0c:	f800283a 	ret

01084c10 <__sinit_lock_release>:
 1084c10:	f800283a 	ret

01084c14 <__fp_lock_all>:
 1084c14:	00804274 	movhi	r2,265
 1084c18:	10b6f704 	addi	r2,r2,-9252
 1084c1c:	11000017 	ldw	r4,0(r2)
 1084c20:	01404234 	movhi	r5,264
 1084c24:	29525b04 	addi	r5,r5,18796
 1084c28:	10855341 	jmpi	1085534 <_fwalk>

01084c2c <__fp_unlock_all>:
 1084c2c:	00804274 	movhi	r2,265
 1084c30:	10b6f704 	addi	r2,r2,-9252
 1084c34:	11000017 	ldw	r4,0(r2)
 1084c38:	01404234 	movhi	r5,264
 1084c3c:	29525d04 	addi	r5,r5,18804
 1084c40:	10855341 	jmpi	1085534 <_fwalk>

01084c44 <_malloc_trim_r>:
 1084c44:	defffb04 	addi	sp,sp,-20
 1084c48:	dcc00315 	stw	r19,12(sp)
 1084c4c:	dc800215 	stw	r18,8(sp)
 1084c50:	dc400115 	stw	r17,4(sp)
 1084c54:	dc000015 	stw	r16,0(sp)
 1084c58:	2827883a 	mov	r19,r5
 1084c5c:	dfc00415 	stw	ra,16(sp)
 1084c60:	04404274 	movhi	r17,265
 1084c64:	8c717204 	addi	r17,r17,-14904
 1084c68:	2021883a 	mov	r16,r4
 1084c6c:	1089c3c0 	call	1089c3c <__malloc_lock>
 1084c70:	88800217 	ldw	r2,8(r17)
 1084c74:	14800117 	ldw	r18,4(r2)
 1084c78:	00bfff04 	movi	r2,-4
 1084c7c:	90a4703a 	and	r18,r18,r2
 1084c80:	9083fbc4 	addi	r2,r18,4079
 1084c84:	14e7c83a 	sub	r19,r2,r19
 1084c88:	9826d33a 	srli	r19,r19,12
 1084c8c:	0083ffc4 	movi	r2,4095
 1084c90:	9cffffc4 	addi	r19,r19,-1
 1084c94:	9826933a 	slli	r19,r19,12
 1084c98:	14c0060e 	bge	r2,r19,1084cb4 <_malloc_trim_r+0x70>
 1084c9c:	8009883a 	mov	r4,r16
 1084ca0:	000b883a 	mov	r5,zero
 1084ca4:	1087a980 	call	1087a98 <_sbrk_r>
 1084ca8:	88c00217 	ldw	r3,8(r17)
 1084cac:	1c87883a 	add	r3,r3,r18
 1084cb0:	10c00a26 	beq	r2,r3,1084cdc <_malloc_trim_r+0x98>
 1084cb4:	8009883a 	mov	r4,r16
 1084cb8:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1084cbc:	0005883a 	mov	r2,zero
 1084cc0:	dfc00417 	ldw	ra,16(sp)
 1084cc4:	dcc00317 	ldw	r19,12(sp)
 1084cc8:	dc800217 	ldw	r18,8(sp)
 1084ccc:	dc400117 	ldw	r17,4(sp)
 1084cd0:	dc000017 	ldw	r16,0(sp)
 1084cd4:	dec00504 	addi	sp,sp,20
 1084cd8:	f800283a 	ret
 1084cdc:	8009883a 	mov	r4,r16
 1084ce0:	04cbc83a 	sub	r5,zero,r19
 1084ce4:	1087a980 	call	1087a98 <_sbrk_r>
 1084ce8:	00ffffc4 	movi	r3,-1
 1084cec:	10c01326 	beq	r2,r3,1084d3c <_malloc_trim_r+0xf8>
 1084cf0:	00804274 	movhi	r2,265
 1084cf4:	10bda804 	addi	r2,r2,-2400
 1084cf8:	11000017 	ldw	r4,0(r2)
 1084cfc:	88c00217 	ldw	r3,8(r17)
 1084d00:	94e5c83a 	sub	r18,r18,r19
 1084d04:	94800054 	ori	r18,r18,1
 1084d08:	24e7c83a 	sub	r19,r4,r19
 1084d0c:	1c800115 	stw	r18,4(r3)
 1084d10:	8009883a 	mov	r4,r16
 1084d14:	14c00015 	stw	r19,0(r2)
 1084d18:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1084d1c:	00800044 	movi	r2,1
 1084d20:	dfc00417 	ldw	ra,16(sp)
 1084d24:	dcc00317 	ldw	r19,12(sp)
 1084d28:	dc800217 	ldw	r18,8(sp)
 1084d2c:	dc400117 	ldw	r17,4(sp)
 1084d30:	dc000017 	ldw	r16,0(sp)
 1084d34:	dec00504 	addi	sp,sp,20
 1084d38:	f800283a 	ret
 1084d3c:	8009883a 	mov	r4,r16
 1084d40:	000b883a 	mov	r5,zero
 1084d44:	1087a980 	call	1087a98 <_sbrk_r>
 1084d48:	88c00217 	ldw	r3,8(r17)
 1084d4c:	014003c4 	movi	r5,15
 1084d50:	10c9c83a 	sub	r4,r2,r3
 1084d54:	293fd70e 	bge	r5,r4,1084cb4 <_malloc_trim_r+0x70>
 1084d58:	01404274 	movhi	r5,265
 1084d5c:	2976f904 	addi	r5,r5,-9244
 1084d60:	29400017 	ldw	r5,0(r5)
 1084d64:	21000054 	ori	r4,r4,1
 1084d68:	19000115 	stw	r4,4(r3)
 1084d6c:	1145c83a 	sub	r2,r2,r5
 1084d70:	01404274 	movhi	r5,265
 1084d74:	297da804 	addi	r5,r5,-2400
 1084d78:	28800015 	stw	r2,0(r5)
 1084d7c:	003fcd06 	br	1084cb4 <_malloc_trim_r+0x70>

01084d80 <_free_r>:
 1084d80:	defffd04 	addi	sp,sp,-12
 1084d84:	dc400115 	stw	r17,4(sp)
 1084d88:	dc000015 	stw	r16,0(sp)
 1084d8c:	dfc00215 	stw	ra,8(sp)
 1084d90:	2821883a 	mov	r16,r5
 1084d94:	2023883a 	mov	r17,r4
 1084d98:	28004b26 	beq	r5,zero,1084ec8 <_free_r+0x148>
 1084d9c:	1089c3c0 	call	1089c3c <__malloc_lock>
 1084da0:	823fff17 	ldw	r8,-4(r16)
 1084da4:	00bfff84 	movi	r2,-2
 1084da8:	81bffe04 	addi	r6,r16,-8
 1084dac:	4084703a 	and	r2,r8,r2
 1084db0:	3087883a 	add	r3,r6,r2
 1084db4:	01404274 	movhi	r5,265
 1084db8:	29717204 	addi	r5,r5,-14904
 1084dbc:	1a400117 	ldw	r9,4(r3)
 1084dc0:	29000217 	ldw	r4,8(r5)
 1084dc4:	01ffff04 	movi	r7,-4
 1084dc8:	49ce703a 	and	r7,r9,r7
 1084dcc:	20c06526 	beq	r4,r3,1084f64 <_free_r+0x1e4>
 1084dd0:	19c00115 	stw	r7,4(r3)
 1084dd4:	4200004c 	andi	r8,r8,1
 1084dd8:	40003026 	beq	r8,zero,1084e9c <_free_r+0x11c>
 1084ddc:	0009883a 	mov	r4,zero
 1084de0:	19d1883a 	add	r8,r3,r7
 1084de4:	42000117 	ldw	r8,4(r8)
 1084de8:	4200004c 	andi	r8,r8,1
 1084dec:	4000061e 	bne	r8,zero,1084e08 <_free_r+0x88>
 1084df0:	11c5883a 	add	r2,r2,r7
 1084df4:	19c00217 	ldw	r7,8(r3)
 1084df8:	20004e26 	beq	r4,zero,1084f34 <_free_r+0x1b4>
 1084dfc:	18c00317 	ldw	r3,12(r3)
 1084e00:	38c00315 	stw	r3,12(r7)
 1084e04:	19c00215 	stw	r7,8(r3)
 1084e08:	11c00054 	ori	r7,r2,1
 1084e0c:	3087883a 	add	r3,r6,r2
 1084e10:	31c00115 	stw	r7,4(r6)
 1084e14:	18800015 	stw	r2,0(r3)
 1084e18:	20001a1e 	bne	r4,zero,1084e84 <_free_r+0x104>
 1084e1c:	00c07fc4 	movi	r3,511
 1084e20:	18802e2e 	bgeu	r3,r2,1084edc <_free_r+0x15c>
 1084e24:	1006d27a 	srli	r3,r2,9
 1084e28:	01000104 	movi	r4,4
 1084e2c:	20c06636 	bltu	r4,r3,1084fc8 <_free_r+0x248>
 1084e30:	1008d1ba 	srli	r4,r2,6
 1084e34:	21000e04 	addi	r4,r4,56
 1084e38:	210f883a 	add	r7,r4,r4
 1084e3c:	39cf883a 	add	r7,r7,r7
 1084e40:	39cf883a 	add	r7,r7,r7
 1084e44:	29cf883a 	add	r7,r5,r7
 1084e48:	38c00217 	ldw	r3,8(r7)
 1084e4c:	01404274 	movhi	r5,265
 1084e50:	29717204 	addi	r5,r5,-14904
 1084e54:	19c06126 	beq	r3,r7,1084fdc <_free_r+0x25c>
 1084e58:	013fff04 	movi	r4,-4
 1084e5c:	19400117 	ldw	r5,4(r3)
 1084e60:	290a703a 	and	r5,r5,r4
 1084e64:	1140022e 	bgeu	r2,r5,1084e70 <_free_r+0xf0>
 1084e68:	18c00217 	ldw	r3,8(r3)
 1084e6c:	38fffb1e 	bne	r7,r3,1084e5c <_free_r+0xdc>
 1084e70:	18800317 	ldw	r2,12(r3)
 1084e74:	30800315 	stw	r2,12(r6)
 1084e78:	30c00215 	stw	r3,8(r6)
 1084e7c:	11800215 	stw	r6,8(r2)
 1084e80:	19800315 	stw	r6,12(r3)
 1084e84:	8809883a 	mov	r4,r17
 1084e88:	dfc00217 	ldw	ra,8(sp)
 1084e8c:	dc400117 	ldw	r17,4(sp)
 1084e90:	dc000017 	ldw	r16,0(sp)
 1084e94:	dec00304 	addi	sp,sp,12
 1084e98:	1089c5c1 	jmpi	1089c5c <__malloc_unlock>
 1084e9c:	813ffe17 	ldw	r4,-8(r16)
 1084ea0:	2a400204 	addi	r9,r5,8
 1084ea4:	310dc83a 	sub	r6,r6,r4
 1084ea8:	32000217 	ldw	r8,8(r6)
 1084eac:	1105883a 	add	r2,r2,r4
 1084eb0:	42404326 	beq	r8,r9,1084fc0 <_free_r+0x240>
 1084eb4:	32400317 	ldw	r9,12(r6)
 1084eb8:	0009883a 	mov	r4,zero
 1084ebc:	42400315 	stw	r9,12(r8)
 1084ec0:	4a000215 	stw	r8,8(r9)
 1084ec4:	003fc606 	br	1084de0 <_free_r+0x60>
 1084ec8:	dfc00217 	ldw	ra,8(sp)
 1084ecc:	dc400117 	ldw	r17,4(sp)
 1084ed0:	dc000017 	ldw	r16,0(sp)
 1084ed4:	dec00304 	addi	sp,sp,12
 1084ed8:	f800283a 	ret
 1084edc:	1004d0fa 	srli	r2,r2,3
 1084ee0:	02000044 	movi	r8,1
 1084ee4:	29c00117 	ldw	r7,4(r5)
 1084ee8:	1087883a 	add	r3,r2,r2
 1084eec:	18c7883a 	add	r3,r3,r3
 1084ef0:	1005d0ba 	srai	r2,r2,2
 1084ef4:	18c7883a 	add	r3,r3,r3
 1084ef8:	28c7883a 	add	r3,r5,r3
 1084efc:	19000217 	ldw	r4,8(r3)
 1084f00:	4084983a 	sll	r2,r8,r2
 1084f04:	30c00315 	stw	r3,12(r6)
 1084f08:	31000215 	stw	r4,8(r6)
 1084f0c:	11c4b03a 	or	r2,r2,r7
 1084f10:	21800315 	stw	r6,12(r4)
 1084f14:	8809883a 	mov	r4,r17
 1084f18:	28800115 	stw	r2,4(r5)
 1084f1c:	19800215 	stw	r6,8(r3)
 1084f20:	dfc00217 	ldw	ra,8(sp)
 1084f24:	dc400117 	ldw	r17,4(sp)
 1084f28:	dc000017 	ldw	r16,0(sp)
 1084f2c:	dec00304 	addi	sp,sp,12
 1084f30:	1089c5c1 	jmpi	1089c5c <__malloc_unlock>
 1084f34:	02004274 	movhi	r8,265
 1084f38:	42317404 	addi	r8,r8,-14896
 1084f3c:	3a3faf1e 	bne	r7,r8,1084dfc <_free_r+0x7c>
 1084f40:	29800515 	stw	r6,20(r5)
 1084f44:	29800415 	stw	r6,16(r5)
 1084f48:	11000054 	ori	r4,r2,1
 1084f4c:	3087883a 	add	r3,r6,r2
 1084f50:	31c00315 	stw	r7,12(r6)
 1084f54:	31c00215 	stw	r7,8(r6)
 1084f58:	31000115 	stw	r4,4(r6)
 1084f5c:	18800015 	stw	r2,0(r3)
 1084f60:	003fc806 	br	1084e84 <_free_r+0x104>
 1084f64:	4200004c 	andi	r8,r8,1
 1084f68:	3885883a 	add	r2,r7,r2
 1084f6c:	4000071e 	bne	r8,zero,1084f8c <_free_r+0x20c>
 1084f70:	81fffe17 	ldw	r7,-8(r16)
 1084f74:	31cdc83a 	sub	r6,r6,r7
 1084f78:	30c00317 	ldw	r3,12(r6)
 1084f7c:	31000217 	ldw	r4,8(r6)
 1084f80:	11c5883a 	add	r2,r2,r7
 1084f84:	20c00315 	stw	r3,12(r4)
 1084f88:	19000215 	stw	r4,8(r3)
 1084f8c:	00c04274 	movhi	r3,265
 1084f90:	18f6fa04 	addi	r3,r3,-9240
 1084f94:	18c00017 	ldw	r3,0(r3)
 1084f98:	11000054 	ori	r4,r2,1
 1084f9c:	31000115 	stw	r4,4(r6)
 1084fa0:	29800215 	stw	r6,8(r5)
 1084fa4:	10ffb736 	bltu	r2,r3,1084e84 <_free_r+0x104>
 1084fa8:	00804274 	movhi	r2,265
 1084fac:	10bda004 	addi	r2,r2,-2432
 1084fb0:	11400017 	ldw	r5,0(r2)
 1084fb4:	8809883a 	mov	r4,r17
 1084fb8:	1084c440 	call	1084c44 <_malloc_trim_r>
 1084fbc:	003fb106 	br	1084e84 <_free_r+0x104>
 1084fc0:	01000044 	movi	r4,1
 1084fc4:	003f8606 	br	1084de0 <_free_r+0x60>
 1084fc8:	01000504 	movi	r4,20
 1084fcc:	20c00b36 	bltu	r4,r3,1084ffc <_free_r+0x27c>
 1084fd0:	190016c4 	addi	r4,r3,91
 1084fd4:	210f883a 	add	r7,r4,r4
 1084fd8:	003f9806 	br	1084e3c <_free_r+0xbc>
 1084fdc:	2009d0ba 	srai	r4,r4,2
 1084fe0:	00800044 	movi	r2,1
 1084fe4:	29c00117 	ldw	r7,4(r5)
 1084fe8:	1108983a 	sll	r4,r2,r4
 1084fec:	1805883a 	mov	r2,r3
 1084ff0:	21c8b03a 	or	r4,r4,r7
 1084ff4:	29000115 	stw	r4,4(r5)
 1084ff8:	003f9e06 	br	1084e74 <_free_r+0xf4>
 1084ffc:	01001504 	movi	r4,84
 1085000:	20c00436 	bltu	r4,r3,1085014 <_free_r+0x294>
 1085004:	1008d33a 	srli	r4,r2,12
 1085008:	21001b84 	addi	r4,r4,110
 108500c:	210f883a 	add	r7,r4,r4
 1085010:	003f8a06 	br	1084e3c <_free_r+0xbc>
 1085014:	01005504 	movi	r4,340
 1085018:	20c00436 	bltu	r4,r3,108502c <_free_r+0x2ac>
 108501c:	1008d3fa 	srli	r4,r2,15
 1085020:	21001dc4 	addi	r4,r4,119
 1085024:	210f883a 	add	r7,r4,r4
 1085028:	003f8406 	br	1084e3c <_free_r+0xbc>
 108502c:	01015504 	movi	r4,1364
 1085030:	20c00436 	bltu	r4,r3,1085044 <_free_r+0x2c4>
 1085034:	1008d4ba 	srli	r4,r2,18
 1085038:	21001f04 	addi	r4,r4,124
 108503c:	210f883a 	add	r7,r4,r4
 1085040:	003f7e06 	br	1084e3c <_free_r+0xbc>
 1085044:	01c03f04 	movi	r7,252
 1085048:	01001f84 	movi	r4,126
 108504c:	003f7b06 	br	1084e3c <_free_r+0xbc>

01085050 <__sfvwrite_r>:
 1085050:	30800217 	ldw	r2,8(r6)
 1085054:	defff504 	addi	sp,sp,-44
 1085058:	dd400615 	stw	r21,24(sp)
 108505c:	dd000515 	stw	r20,20(sp)
 1085060:	dc000115 	stw	r16,4(sp)
 1085064:	dfc00a15 	stw	ra,40(sp)
 1085068:	df000915 	stw	fp,36(sp)
 108506c:	ddc00815 	stw	r23,32(sp)
 1085070:	dd800715 	stw	r22,28(sp)
 1085074:	dcc00415 	stw	r19,16(sp)
 1085078:	dc800315 	stw	r18,12(sp)
 108507c:	dc400215 	stw	r17,8(sp)
 1085080:	3029883a 	mov	r20,r6
 1085084:	202b883a 	mov	r21,r4
 1085088:	2821883a 	mov	r16,r5
 108508c:	10002126 	beq	r2,zero,1085114 <__sfvwrite_r+0xc4>
 1085090:	2880030b 	ldhu	r2,12(r5)
 1085094:	10c0020c 	andi	r3,r2,8
 1085098:	18ffffcc 	andi	r3,r3,65535
 108509c:	18e0001c 	xori	r3,r3,32768
 10850a0:	18e00004 	addi	r3,r3,-32768
 10850a4:	18002826 	beq	r3,zero,1085148 <__sfvwrite_r+0xf8>
 10850a8:	28c00417 	ldw	r3,16(r5)
 10850ac:	18002626 	beq	r3,zero,1085148 <__sfvwrite_r+0xf8>
 10850b0:	10c0008c 	andi	r3,r2,2
 10850b4:	18ffffcc 	andi	r3,r3,65535
 10850b8:	18e0001c 	xori	r3,r3,32768
 10850bc:	18e00004 	addi	r3,r3,-32768
 10850c0:	a4400017 	ldw	r17,0(r20)
 10850c4:	18002b26 	beq	r3,zero,1085174 <__sfvwrite_r+0x124>
 10850c8:	0027883a 	mov	r19,zero
 10850cc:	0025883a 	mov	r18,zero
 10850d0:	05810004 	movi	r22,1024
 10850d4:	980d883a 	mov	r6,r19
 10850d8:	a809883a 	mov	r4,r21
 10850dc:	90004f26 	beq	r18,zero,108521c <__sfvwrite_r+0x1cc>
 10850e0:	900f883a 	mov	r7,r18
 10850e4:	81400717 	ldw	r5,28(r16)
 10850e8:	b480012e 	bgeu	r22,r18,10850f0 <__sfvwrite_r+0xa0>
 10850ec:	01c10004 	movi	r7,1024
 10850f0:	80800917 	ldw	r2,36(r16)
 10850f4:	103ee83a 	callr	r2
 10850f8:	0080540e 	bge	zero,r2,108524c <__sfvwrite_r+0x1fc>
 10850fc:	a0c00217 	ldw	r3,8(r20)
 1085100:	98a7883a 	add	r19,r19,r2
 1085104:	90a5c83a 	sub	r18,r18,r2
 1085108:	1885c83a 	sub	r2,r3,r2
 108510c:	a0800215 	stw	r2,8(r20)
 1085110:	103ff01e 	bne	r2,zero,10850d4 <__sfvwrite_r+0x84>
 1085114:	0005883a 	mov	r2,zero
 1085118:	dfc00a17 	ldw	ra,40(sp)
 108511c:	df000917 	ldw	fp,36(sp)
 1085120:	ddc00817 	ldw	r23,32(sp)
 1085124:	dd800717 	ldw	r22,28(sp)
 1085128:	dd400617 	ldw	r21,24(sp)
 108512c:	dd000517 	ldw	r20,20(sp)
 1085130:	dcc00417 	ldw	r19,16(sp)
 1085134:	dc800317 	ldw	r18,12(sp)
 1085138:	dc400217 	ldw	r17,8(sp)
 108513c:	dc000117 	ldw	r16,4(sp)
 1085140:	dec00b04 	addi	sp,sp,44
 1085144:	f800283a 	ret
 1085148:	a809883a 	mov	r4,r21
 108514c:	800b883a 	mov	r5,r16
 1085150:	1082dbc0 	call	1082dbc <__swsetup_r>
 1085154:	1000f01e 	bne	r2,zero,1085518 <__sfvwrite_r+0x4c8>
 1085158:	8080030b 	ldhu	r2,12(r16)
 108515c:	a4400017 	ldw	r17,0(r20)
 1085160:	10c0008c 	andi	r3,r2,2
 1085164:	18ffffcc 	andi	r3,r3,65535
 1085168:	18e0001c 	xori	r3,r3,32768
 108516c:	18e00004 	addi	r3,r3,-32768
 1085170:	183fd51e 	bne	r3,zero,10850c8 <__sfvwrite_r+0x78>
 1085174:	10c0004c 	andi	r3,r2,1
 1085178:	002d883a 	mov	r22,zero
 108517c:	1800381e 	bne	r3,zero,1085260 <__sfvwrite_r+0x210>
 1085180:	0025883a 	mov	r18,zero
 1085184:	90002126 	beq	r18,zero,108520c <__sfvwrite_r+0x1bc>
 1085188:	10c0800c 	andi	r3,r2,512
 108518c:	18ffffcc 	andi	r3,r3,65535
 1085190:	18e0001c 	xori	r3,r3,32768
 1085194:	18e00004 	addi	r3,r3,-32768
 1085198:	84c00217 	ldw	r19,8(r16)
 108519c:	18006b26 	beq	r3,zero,108534c <__sfvwrite_r+0x2fc>
 10851a0:	980f883a 	mov	r7,r19
 10851a4:	94c08636 	bltu	r18,r19,10853c0 <__sfvwrite_r+0x370>
 10851a8:	10c1200c 	andi	r3,r2,1152
 10851ac:	18009f1e 	bne	r3,zero,108542c <__sfvwrite_r+0x3dc>
 10851b0:	81000017 	ldw	r4,0(r16)
 10851b4:	982f883a 	mov	r23,r19
 10851b8:	9039883a 	mov	fp,r18
 10851bc:	9027883a 	mov	r19,r18
 10851c0:	380d883a 	mov	r6,r7
 10851c4:	b00b883a 	mov	r5,r22
 10851c8:	d9c00015 	stw	r7,0(sp)
 10851cc:	108628c0 	call	108628c <memmove>
 10851d0:	d9c00017 	ldw	r7,0(sp)
 10851d4:	81000217 	ldw	r4,8(r16)
 10851d8:	80800017 	ldw	r2,0(r16)
 10851dc:	25efc83a 	sub	r23,r4,r23
 10851e0:	11cf883a 	add	r7,r2,r7
 10851e4:	85c00215 	stw	r23,8(r16)
 10851e8:	81c00015 	stw	r7,0(r16)
 10851ec:	a0800217 	ldw	r2,8(r20)
 10851f0:	b72d883a 	add	r22,r22,fp
 10851f4:	9725c83a 	sub	r18,r18,fp
 10851f8:	14e7c83a 	sub	r19,r2,r19
 10851fc:	a4c00215 	stw	r19,8(r20)
 1085200:	983fc426 	beq	r19,zero,1085114 <__sfvwrite_r+0xc4>
 1085204:	8080030b 	ldhu	r2,12(r16)
 1085208:	903fdf1e 	bne	r18,zero,1085188 <__sfvwrite_r+0x138>
 108520c:	8d800017 	ldw	r22,0(r17)
 1085210:	8c800117 	ldw	r18,4(r17)
 1085214:	8c400204 	addi	r17,r17,8
 1085218:	003fda06 	br	1085184 <__sfvwrite_r+0x134>
 108521c:	8cc00017 	ldw	r19,0(r17)
 1085220:	8c800117 	ldw	r18,4(r17)
 1085224:	8c400204 	addi	r17,r17,8
 1085228:	003faa06 	br	10850d4 <__sfvwrite_r+0x84>
 108522c:	10874380 	call	1087438 <_realloc_r>
 1085230:	102f883a 	mov	r23,r2
 1085234:	10009f1e 	bne	r2,zero,10854b4 <__sfvwrite_r+0x464>
 1085238:	81400417 	ldw	r5,16(r16)
 108523c:	a809883a 	mov	r4,r21
 1085240:	1084d800 	call	1084d80 <_free_r>
 1085244:	00800304 	movi	r2,12
 1085248:	a8800015 	stw	r2,0(r21)
 108524c:	80c0030b 	ldhu	r3,12(r16)
 1085250:	00bfffc4 	movi	r2,-1
 1085254:	18c01014 	ori	r3,r3,64
 1085258:	80c0030d 	sth	r3,12(r16)
 108525c:	003fae06 	br	1085118 <__sfvwrite_r+0xc8>
 1085260:	0007883a 	mov	r3,zero
 1085264:	0039883a 	mov	fp,zero
 1085268:	0025883a 	mov	r18,zero
 108526c:	90001e26 	beq	r18,zero,10852e8 <__sfvwrite_r+0x298>
 1085270:	18006526 	beq	r3,zero,1085408 <__sfvwrite_r+0x3b8>
 1085274:	b02f883a 	mov	r23,r22
 1085278:	9580012e 	bgeu	r18,r22,1085280 <__sfvwrite_r+0x230>
 108527c:	902f883a 	mov	r23,r18
 1085280:	81000017 	ldw	r4,0(r16)
 1085284:	80800417 	ldw	r2,16(r16)
 1085288:	84c00217 	ldw	r19,8(r16)
 108528c:	81c00517 	ldw	r7,20(r16)
 1085290:	1100022e 	bgeu	r2,r4,108529c <__sfvwrite_r+0x24c>
 1085294:	99e7883a 	add	r19,r19,r7
 1085298:	9dc01816 	blt	r19,r23,10852fc <__sfvwrite_r+0x2ac>
 108529c:	b9c03b16 	blt	r23,r7,108538c <__sfvwrite_r+0x33c>
 10852a0:	80800917 	ldw	r2,36(r16)
 10852a4:	81400717 	ldw	r5,28(r16)
 10852a8:	a809883a 	mov	r4,r21
 10852ac:	d8c00015 	stw	r3,0(sp)
 10852b0:	e00d883a 	mov	r6,fp
 10852b4:	103ee83a 	callr	r2
 10852b8:	1027883a 	mov	r19,r2
 10852bc:	d8c00017 	ldw	r3,0(sp)
 10852c0:	00bfe20e 	bge	zero,r2,108524c <__sfvwrite_r+0x1fc>
 10852c4:	b4edc83a 	sub	r22,r22,r19
 10852c8:	b0001a26 	beq	r22,zero,1085334 <__sfvwrite_r+0x2e4>
 10852cc:	a0800217 	ldw	r2,8(r20)
 10852d0:	e4f9883a 	add	fp,fp,r19
 10852d4:	94e5c83a 	sub	r18,r18,r19
 10852d8:	14e7c83a 	sub	r19,r2,r19
 10852dc:	a4c00215 	stw	r19,8(r20)
 10852e0:	983f8c26 	beq	r19,zero,1085114 <__sfvwrite_r+0xc4>
 10852e4:	903fe21e 	bne	r18,zero,1085270 <__sfvwrite_r+0x220>
 10852e8:	8f000017 	ldw	fp,0(r17)
 10852ec:	8c800117 	ldw	r18,4(r17)
 10852f0:	0007883a 	mov	r3,zero
 10852f4:	8c400204 	addi	r17,r17,8
 10852f8:	003fdc06 	br	108526c <__sfvwrite_r+0x21c>
 10852fc:	e00b883a 	mov	r5,fp
 1085300:	980d883a 	mov	r6,r19
 1085304:	d8c00015 	stw	r3,0(sp)
 1085308:	108628c0 	call	108628c <memmove>
 108530c:	80800017 	ldw	r2,0(r16)
 1085310:	a809883a 	mov	r4,r21
 1085314:	800b883a 	mov	r5,r16
 1085318:	14c5883a 	add	r2,r2,r19
 108531c:	80800015 	stw	r2,0(r16)
 1085320:	10847540 	call	1084754 <_fflush_r>
 1085324:	d8c00017 	ldw	r3,0(sp)
 1085328:	103fc81e 	bne	r2,zero,108524c <__sfvwrite_r+0x1fc>
 108532c:	b4edc83a 	sub	r22,r22,r19
 1085330:	b03fe61e 	bne	r22,zero,10852cc <__sfvwrite_r+0x27c>
 1085334:	a809883a 	mov	r4,r21
 1085338:	800b883a 	mov	r5,r16
 108533c:	10847540 	call	1084754 <_fflush_r>
 1085340:	103fc21e 	bne	r2,zero,108524c <__sfvwrite_r+0x1fc>
 1085344:	0007883a 	mov	r3,zero
 1085348:	003fe006 	br	10852cc <__sfvwrite_r+0x27c>
 108534c:	81000017 	ldw	r4,0(r16)
 1085350:	80800417 	ldw	r2,16(r16)
 1085354:	1100022e 	bgeu	r2,r4,1085360 <__sfvwrite_r+0x310>
 1085358:	9839883a 	mov	fp,r19
 108535c:	9c806036 	bltu	r19,r18,10854e0 <__sfvwrite_r+0x490>
 1085360:	81c00517 	ldw	r7,20(r16)
 1085364:	91c01c36 	bltu	r18,r7,10853d8 <__sfvwrite_r+0x388>
 1085368:	80800917 	ldw	r2,36(r16)
 108536c:	81400717 	ldw	r5,28(r16)
 1085370:	a809883a 	mov	r4,r21
 1085374:	b00d883a 	mov	r6,r22
 1085378:	103ee83a 	callr	r2
 108537c:	1027883a 	mov	r19,r2
 1085380:	00bfb20e 	bge	zero,r2,108524c <__sfvwrite_r+0x1fc>
 1085384:	1039883a 	mov	fp,r2
 1085388:	003f9806 	br	10851ec <__sfvwrite_r+0x19c>
 108538c:	b80d883a 	mov	r6,r23
 1085390:	e00b883a 	mov	r5,fp
 1085394:	d8c00015 	stw	r3,0(sp)
 1085398:	108628c0 	call	108628c <memmove>
 108539c:	80800217 	ldw	r2,8(r16)
 10853a0:	81000017 	ldw	r4,0(r16)
 10853a4:	b827883a 	mov	r19,r23
 10853a8:	15c5c83a 	sub	r2,r2,r23
 10853ac:	25ef883a 	add	r23,r4,r23
 10853b0:	80800215 	stw	r2,8(r16)
 10853b4:	85c00015 	stw	r23,0(r16)
 10853b8:	d8c00017 	ldw	r3,0(sp)
 10853bc:	003fc106 	br	10852c4 <__sfvwrite_r+0x274>
 10853c0:	81000017 	ldw	r4,0(r16)
 10853c4:	902f883a 	mov	r23,r18
 10853c8:	9039883a 	mov	fp,r18
 10853cc:	9027883a 	mov	r19,r18
 10853d0:	900f883a 	mov	r7,r18
 10853d4:	003f7a06 	br	10851c0 <__sfvwrite_r+0x170>
 10853d8:	b00b883a 	mov	r5,r22
 10853dc:	900d883a 	mov	r6,r18
 10853e0:	108628c0 	call	108628c <memmove>
 10853e4:	80c00217 	ldw	r3,8(r16)
 10853e8:	80800017 	ldw	r2,0(r16)
 10853ec:	9027883a 	mov	r19,r18
 10853f0:	1c87c83a 	sub	r3,r3,r18
 10853f4:	1485883a 	add	r2,r2,r18
 10853f8:	80c00215 	stw	r3,8(r16)
 10853fc:	80800015 	stw	r2,0(r16)
 1085400:	9039883a 	mov	fp,r18
 1085404:	003f7906 	br	10851ec <__sfvwrite_r+0x19c>
 1085408:	e009883a 	mov	r4,fp
 108540c:	01400284 	movi	r5,10
 1085410:	900d883a 	mov	r6,r18
 1085414:	108609c0 	call	108609c <memchr>
 1085418:	10003c26 	beq	r2,zero,108550c <__sfvwrite_r+0x4bc>
 108541c:	15800044 	addi	r22,r2,1
 1085420:	b72dc83a 	sub	r22,r22,fp
 1085424:	00c00044 	movi	r3,1
 1085428:	003f9206 	br	1085274 <__sfvwrite_r+0x224>
 108542c:	81000517 	ldw	r4,20(r16)
 1085430:	81400417 	ldw	r5,16(r16)
 1085434:	80c00017 	ldw	r3,0(r16)
 1085438:	210d883a 	add	r6,r4,r4
 108543c:	3109883a 	add	r4,r6,r4
 1085440:	2026d7fa 	srli	r19,r4,31
 1085444:	1979c83a 	sub	fp,r3,r5
 1085448:	e1800044 	addi	r6,fp,1
 108544c:	9909883a 	add	r4,r19,r4
 1085450:	2027d07a 	srai	r19,r4,1
 1085454:	3489883a 	add	r4,r6,r18
 1085458:	980d883a 	mov	r6,r19
 108545c:	9900022e 	bgeu	r19,r4,1085468 <__sfvwrite_r+0x418>
 1085460:	2027883a 	mov	r19,r4
 1085464:	200d883a 	mov	r6,r4
 1085468:	1081000c 	andi	r2,r2,1024
 108546c:	10bfffcc 	andi	r2,r2,65535
 1085470:	10a0001c 	xori	r2,r2,32768
 1085474:	10a00004 	addi	r2,r2,-32768
 1085478:	a809883a 	mov	r4,r21
 108547c:	103f6b26 	beq	r2,zero,108522c <__sfvwrite_r+0x1dc>
 1085480:	300b883a 	mov	r5,r6
 1085484:	10859180 	call	1085918 <_malloc_r>
 1085488:	102f883a 	mov	r23,r2
 108548c:	103f6d26 	beq	r2,zero,1085244 <__sfvwrite_r+0x1f4>
 1085490:	81400417 	ldw	r5,16(r16)
 1085494:	1009883a 	mov	r4,r2
 1085498:	e00d883a 	mov	r6,fp
 108549c:	10861940 	call	1086194 <memcpy>
 10854a0:	8080030b 	ldhu	r2,12(r16)
 10854a4:	00fedfc4 	movi	r3,-1153
 10854a8:	10c4703a 	and	r2,r2,r3
 10854ac:	10802014 	ori	r2,r2,128
 10854b0:	8080030d 	sth	r2,12(r16)
 10854b4:	bf09883a 	add	r4,r23,fp
 10854b8:	9f07c83a 	sub	r3,r19,fp
 10854bc:	85c00415 	stw	r23,16(r16)
 10854c0:	84c00515 	stw	r19,20(r16)
 10854c4:	81000015 	stw	r4,0(r16)
 10854c8:	902f883a 	mov	r23,r18
 10854cc:	80c00215 	stw	r3,8(r16)
 10854d0:	9039883a 	mov	fp,r18
 10854d4:	9027883a 	mov	r19,r18
 10854d8:	900f883a 	mov	r7,r18
 10854dc:	003f3806 	br	10851c0 <__sfvwrite_r+0x170>
 10854e0:	b00b883a 	mov	r5,r22
 10854e4:	980d883a 	mov	r6,r19
 10854e8:	108628c0 	call	108628c <memmove>
 10854ec:	80800017 	ldw	r2,0(r16)
 10854f0:	a809883a 	mov	r4,r21
 10854f4:	800b883a 	mov	r5,r16
 10854f8:	14c5883a 	add	r2,r2,r19
 10854fc:	80800015 	stw	r2,0(r16)
 1085500:	10847540 	call	1084754 <_fflush_r>
 1085504:	103f3926 	beq	r2,zero,10851ec <__sfvwrite_r+0x19c>
 1085508:	003f5006 	br	108524c <__sfvwrite_r+0x1fc>
 108550c:	95800044 	addi	r22,r18,1
 1085510:	00c00044 	movi	r3,1
 1085514:	003f5706 	br	1085274 <__sfvwrite_r+0x224>
 1085518:	80c0030b 	ldhu	r3,12(r16)
 108551c:	00bfffc4 	movi	r2,-1
 1085520:	18c01014 	ori	r3,r3,64
 1085524:	80c0030d 	sth	r3,12(r16)
 1085528:	00c00244 	movi	r3,9
 108552c:	a8c00015 	stw	r3,0(r21)
 1085530:	003ef906 	br	1085118 <__sfvwrite_r+0xc8>

01085534 <_fwalk>:
 1085534:	defff904 	addi	sp,sp,-28
 1085538:	dcc00315 	stw	r19,12(sp)
 108553c:	24c0b804 	addi	r19,r4,736
 1085540:	dd400515 	stw	r21,20(sp)
 1085544:	dd000415 	stw	r20,16(sp)
 1085548:	dfc00615 	stw	ra,24(sp)
 108554c:	dc800215 	stw	r18,8(sp)
 1085550:	dc400115 	stw	r17,4(sp)
 1085554:	dc000015 	stw	r16,0(sp)
 1085558:	282b883a 	mov	r21,r5
 108555c:	0029883a 	mov	r20,zero
 1085560:	1084c040 	call	1084c04 <__sfp_lock_acquire>
 1085564:	98001226 	beq	r19,zero,10855b0 <_fwalk+0x7c>
 1085568:	04bfffc4 	movi	r18,-1
 108556c:	9c400117 	ldw	r17,4(r19)
 1085570:	9c000217 	ldw	r16,8(r19)
 1085574:	8c7fffc4 	addi	r17,r17,-1
 1085578:	88000b16 	blt	r17,zero,10855a8 <_fwalk+0x74>
 108557c:	84000304 	addi	r16,r16,12
 1085580:	80c0000f 	ldh	r3,0(r16)
 1085584:	8c7fffc4 	addi	r17,r17,-1
 1085588:	813ffd04 	addi	r4,r16,-12
 108558c:	18000426 	beq	r3,zero,10855a0 <_fwalk+0x6c>
 1085590:	80c0008f 	ldh	r3,2(r16)
 1085594:	1c800226 	beq	r3,r18,10855a0 <_fwalk+0x6c>
 1085598:	a83ee83a 	callr	r21
 108559c:	a0a8b03a 	or	r20,r20,r2
 10855a0:	84001704 	addi	r16,r16,92
 10855a4:	8cbff61e 	bne	r17,r18,1085580 <_fwalk+0x4c>
 10855a8:	9cc00017 	ldw	r19,0(r19)
 10855ac:	983fef1e 	bne	r19,zero,108556c <_fwalk+0x38>
 10855b0:	1084c080 	call	1084c08 <__sfp_lock_release>
 10855b4:	a005883a 	mov	r2,r20
 10855b8:	dfc00617 	ldw	ra,24(sp)
 10855bc:	dd400517 	ldw	r21,20(sp)
 10855c0:	dd000417 	ldw	r20,16(sp)
 10855c4:	dcc00317 	ldw	r19,12(sp)
 10855c8:	dc800217 	ldw	r18,8(sp)
 10855cc:	dc400117 	ldw	r17,4(sp)
 10855d0:	dc000017 	ldw	r16,0(sp)
 10855d4:	dec00704 	addi	sp,sp,28
 10855d8:	f800283a 	ret

010855dc <_fwalk_reent>:
 10855dc:	defff804 	addi	sp,sp,-32
 10855e0:	dcc00315 	stw	r19,12(sp)
 10855e4:	24c0b804 	addi	r19,r4,736
 10855e8:	dd800615 	stw	r22,24(sp)
 10855ec:	dd400515 	stw	r21,20(sp)
 10855f0:	dd000415 	stw	r20,16(sp)
 10855f4:	dfc00715 	stw	ra,28(sp)
 10855f8:	dc800215 	stw	r18,8(sp)
 10855fc:	dc400115 	stw	r17,4(sp)
 1085600:	dc000015 	stw	r16,0(sp)
 1085604:	2029883a 	mov	r20,r4
 1085608:	282b883a 	mov	r21,r5
 108560c:	002d883a 	mov	r22,zero
 1085610:	1084c040 	call	1084c04 <__sfp_lock_acquire>
 1085614:	98001326 	beq	r19,zero,1085664 <_fwalk_reent+0x88>
 1085618:	04bfffc4 	movi	r18,-1
 108561c:	9c400117 	ldw	r17,4(r19)
 1085620:	9c000217 	ldw	r16,8(r19)
 1085624:	8c7fffc4 	addi	r17,r17,-1
 1085628:	88000c16 	blt	r17,zero,108565c <_fwalk_reent+0x80>
 108562c:	84000304 	addi	r16,r16,12
 1085630:	80c0000f 	ldh	r3,0(r16)
 1085634:	8c7fffc4 	addi	r17,r17,-1
 1085638:	817ffd04 	addi	r5,r16,-12
 108563c:	18000526 	beq	r3,zero,1085654 <_fwalk_reent+0x78>
 1085640:	80c0008f 	ldh	r3,2(r16)
 1085644:	a009883a 	mov	r4,r20
 1085648:	1c800226 	beq	r3,r18,1085654 <_fwalk_reent+0x78>
 108564c:	a83ee83a 	callr	r21
 1085650:	b0acb03a 	or	r22,r22,r2
 1085654:	84001704 	addi	r16,r16,92
 1085658:	8cbff51e 	bne	r17,r18,1085630 <_fwalk_reent+0x54>
 108565c:	9cc00017 	ldw	r19,0(r19)
 1085660:	983fee1e 	bne	r19,zero,108561c <_fwalk_reent+0x40>
 1085664:	1084c080 	call	1084c08 <__sfp_lock_release>
 1085668:	b005883a 	mov	r2,r22
 108566c:	dfc00717 	ldw	ra,28(sp)
 1085670:	dd800617 	ldw	r22,24(sp)
 1085674:	dd400517 	ldw	r21,20(sp)
 1085678:	dd000417 	ldw	r20,16(sp)
 108567c:	dcc00317 	ldw	r19,12(sp)
 1085680:	dc800217 	ldw	r18,8(sp)
 1085684:	dc400117 	ldw	r17,4(sp)
 1085688:	dc000017 	ldw	r16,0(sp)
 108568c:	dec00804 	addi	sp,sp,32
 1085690:	f800283a 	ret

01085694 <_setlocale_r>:
 1085694:	defffc04 	addi	sp,sp,-16
 1085698:	dc800215 	stw	r18,8(sp)
 108569c:	dc400115 	stw	r17,4(sp)
 10856a0:	dc000015 	stw	r16,0(sp)
 10856a4:	dfc00315 	stw	ra,12(sp)
 10856a8:	3021883a 	mov	r16,r6
 10856ac:	2023883a 	mov	r17,r4
 10856b0:	2825883a 	mov	r18,r5
 10856b4:	30001626 	beq	r6,zero,1085710 <_setlocale_r+0x7c>
 10856b8:	3009883a 	mov	r4,r6
 10856bc:	01404274 	movhi	r5,265
 10856c0:	29700a04 	addi	r5,r5,-16344
 10856c4:	1087c3c0 	call	1087c3c <strcmp>
 10856c8:	10000a1e 	bne	r2,zero,10856f4 <_setlocale_r+0x60>
 10856cc:	8c800c15 	stw	r18,48(r17)
 10856d0:	8c000d15 	stw	r16,52(r17)
 10856d4:	00804274 	movhi	r2,265
 10856d8:	10b00a04 	addi	r2,r2,-16344
 10856dc:	dfc00317 	ldw	ra,12(sp)
 10856e0:	dc800217 	ldw	r18,8(sp)
 10856e4:	dc400117 	ldw	r17,4(sp)
 10856e8:	dc000017 	ldw	r16,0(sp)
 10856ec:	dec00404 	addi	sp,sp,16
 10856f0:	f800283a 	ret
 10856f4:	8009883a 	mov	r4,r16
 10856f8:	01404274 	movhi	r5,265
 10856fc:	296ff504 	addi	r5,r5,-16428
 1085700:	1087c3c0 	call	1087c3c <strcmp>
 1085704:	103ff126 	beq	r2,zero,10856cc <_setlocale_r+0x38>
 1085708:	0005883a 	mov	r2,zero
 108570c:	003ff306 	br	10856dc <_setlocale_r+0x48>
 1085710:	00804274 	movhi	r2,265
 1085714:	10b00a04 	addi	r2,r2,-16344
 1085718:	dfc00317 	ldw	ra,12(sp)
 108571c:	dc800217 	ldw	r18,8(sp)
 1085720:	dc400117 	ldw	r17,4(sp)
 1085724:	dc000017 	ldw	r16,0(sp)
 1085728:	dec00404 	addi	sp,sp,16
 108572c:	f800283a 	ret

01085730 <__locale_charset>:
 1085730:	00804274 	movhi	r2,265
 1085734:	10b00b04 	addi	r2,r2,-16340
 1085738:	f800283a 	ret

0108573c <_localeconv_r>:
 108573c:	00804274 	movhi	r2,265
 1085740:	10b00f04 	addi	r2,r2,-16324
 1085744:	f800283a 	ret

01085748 <setlocale>:
 1085748:	00c04274 	movhi	r3,265
 108574c:	18f6f704 	addi	r3,r3,-9252
 1085750:	2005883a 	mov	r2,r4
 1085754:	19000017 	ldw	r4,0(r3)
 1085758:	280d883a 	mov	r6,r5
 108575c:	100b883a 	mov	r5,r2
 1085760:	10856941 	jmpi	1085694 <_setlocale_r>

01085764 <localeconv>:
 1085764:	00804274 	movhi	r2,265
 1085768:	10b00f04 	addi	r2,r2,-16324
 108576c:	f800283a 	ret

01085770 <__smakebuf_r>:
 1085770:	2880030b 	ldhu	r2,12(r5)
 1085774:	deffed04 	addi	sp,sp,-76
 1085778:	dc401015 	stw	r17,64(sp)
 108577c:	10c0008c 	andi	r3,r2,2
 1085780:	18ffffcc 	andi	r3,r3,65535
 1085784:	18e0001c 	xori	r3,r3,32768
 1085788:	dc000f15 	stw	r16,60(sp)
 108578c:	dfc01215 	stw	ra,72(sp)
 1085790:	dc801115 	stw	r18,68(sp)
 1085794:	18e00004 	addi	r3,r3,-32768
 1085798:	2821883a 	mov	r16,r5
 108579c:	2023883a 	mov	r17,r4
 10857a0:	1800381e 	bne	r3,zero,1085884 <__smakebuf_r+0x114>
 10857a4:	2940038f 	ldh	r5,14(r5)
 10857a8:	28002d16 	blt	r5,zero,1085860 <__smakebuf_r+0xf0>
 10857ac:	d80d883a 	mov	r6,sp
 10857b0:	1087fbc0 	call	1087fbc <_fstat_r>
 10857b4:	10002916 	blt	r2,zero,108585c <__smakebuf_r+0xec>
 10857b8:	d8800117 	ldw	r2,4(sp)
 10857bc:	00e00014 	movui	r3,32768
 10857c0:	10bc000c 	andi	r2,r2,61440
 10857c4:	10c03c26 	beq	r2,r3,10858b8 <__smakebuf_r+0x148>
 10857c8:	80c0030b 	ldhu	r3,12(r16)
 10857cc:	18c20014 	ori	r3,r3,2048
 10857d0:	80c0030d 	sth	r3,12(r16)
 10857d4:	00c80004 	movi	r3,8192
 10857d8:	10c00c1e 	bne	r2,r3,108580c <__smakebuf_r+0x9c>
 10857dc:	8140038f 	ldh	r5,14(r16)
 10857e0:	8809883a 	mov	r4,r17
 10857e4:	10880240 	call	1088024 <_isatty_r>
 10857e8:	10000826 	beq	r2,zero,108580c <__smakebuf_r+0x9c>
 10857ec:	80c0030b 	ldhu	r3,12(r16)
 10857f0:	808010c4 	addi	r2,r16,67
 10857f4:	80800015 	stw	r2,0(r16)
 10857f8:	18c00054 	ori	r3,r3,1
 10857fc:	80800415 	stw	r2,16(r16)
 1085800:	00800044 	movi	r2,1
 1085804:	80c0030d 	sth	r3,12(r16)
 1085808:	80800515 	stw	r2,20(r16)
 108580c:	04810004 	movi	r18,1024
 1085810:	8809883a 	mov	r4,r17
 1085814:	900b883a 	mov	r5,r18
 1085818:	10859180 	call	1085918 <_malloc_r>
 108581c:	10003026 	beq	r2,zero,10858e0 <__smakebuf_r+0x170>
 1085820:	80c0030b 	ldhu	r3,12(r16)
 1085824:	01004234 	movhi	r4,264
 1085828:	21125f04 	addi	r4,r4,18812
 108582c:	89000f15 	stw	r4,60(r17)
 1085830:	18c02014 	ori	r3,r3,128
 1085834:	80c0030d 	sth	r3,12(r16)
 1085838:	80800015 	stw	r2,0(r16)
 108583c:	80800415 	stw	r2,16(r16)
 1085840:	84800515 	stw	r18,20(r16)
 1085844:	dfc01217 	ldw	ra,72(sp)
 1085848:	dc801117 	ldw	r18,68(sp)
 108584c:	dc401017 	ldw	r17,64(sp)
 1085850:	dc000f17 	ldw	r16,60(sp)
 1085854:	dec01304 	addi	sp,sp,76
 1085858:	f800283a 	ret
 108585c:	8080030b 	ldhu	r2,12(r16)
 1085860:	10c0200c 	andi	r3,r2,128
 1085864:	18ffffcc 	andi	r3,r3,65535
 1085868:	18e0001c 	xori	r3,r3,32768
 108586c:	18e00004 	addi	r3,r3,-32768
 1085870:	18000f1e 	bne	r3,zero,10858b0 <__smakebuf_r+0x140>
 1085874:	04810004 	movi	r18,1024
 1085878:	10820014 	ori	r2,r2,2048
 108587c:	8080030d 	sth	r2,12(r16)
 1085880:	003fe306 	br	1085810 <__smakebuf_r+0xa0>
 1085884:	288010c4 	addi	r2,r5,67
 1085888:	28800015 	stw	r2,0(r5)
 108588c:	28800415 	stw	r2,16(r5)
 1085890:	00800044 	movi	r2,1
 1085894:	28800515 	stw	r2,20(r5)
 1085898:	dfc01217 	ldw	ra,72(sp)
 108589c:	dc801117 	ldw	r18,68(sp)
 10858a0:	dc401017 	ldw	r17,64(sp)
 10858a4:	dc000f17 	ldw	r16,60(sp)
 10858a8:	dec01304 	addi	sp,sp,76
 10858ac:	f800283a 	ret
 10858b0:	04801004 	movi	r18,64
 10858b4:	003ff006 	br	1085878 <__smakebuf_r+0x108>
 10858b8:	81000a17 	ldw	r4,40(r16)
 10858bc:	00c04234 	movhi	r3,264
 10858c0:	18def604 	addi	r3,r3,31704
 10858c4:	20ffc01e 	bne	r4,r3,10857c8 <__smakebuf_r+0x58>
 10858c8:	8080030b 	ldhu	r2,12(r16)
 10858cc:	00c10004 	movi	r3,1024
 10858d0:	80c01315 	stw	r3,76(r16)
 10858d4:	10c4b03a 	or	r2,r2,r3
 10858d8:	8080030d 	sth	r2,12(r16)
 10858dc:	003fcb06 	br	108580c <__smakebuf_r+0x9c>
 10858e0:	8080030b 	ldhu	r2,12(r16)
 10858e4:	10c0800c 	andi	r3,r2,512
 10858e8:	18ffffcc 	andi	r3,r3,65535
 10858ec:	18e0001c 	xori	r3,r3,32768
 10858f0:	18e00004 	addi	r3,r3,-32768
 10858f4:	183fd31e 	bne	r3,zero,1085844 <__smakebuf_r+0xd4>
 10858f8:	10800094 	ori	r2,r2,2
 10858fc:	80c010c4 	addi	r3,r16,67
 1085900:	8080030d 	sth	r2,12(r16)
 1085904:	00800044 	movi	r2,1
 1085908:	80c00015 	stw	r3,0(r16)
 108590c:	80c00415 	stw	r3,16(r16)
 1085910:	80800515 	stw	r2,20(r16)
 1085914:	003fcb06 	br	1085844 <__smakebuf_r+0xd4>

01085918 <_malloc_r>:
 1085918:	defff604 	addi	sp,sp,-40
 108591c:	dc800215 	stw	r18,8(sp)
 1085920:	dfc00915 	stw	ra,36(sp)
 1085924:	df000815 	stw	fp,32(sp)
 1085928:	ddc00715 	stw	r23,28(sp)
 108592c:	dd800615 	stw	r22,24(sp)
 1085930:	dd400515 	stw	r21,20(sp)
 1085934:	dd000415 	stw	r20,16(sp)
 1085938:	dcc00315 	stw	r19,12(sp)
 108593c:	dc400115 	stw	r17,4(sp)
 1085940:	dc000015 	stw	r16,0(sp)
 1085944:	288002c4 	addi	r2,r5,11
 1085948:	00c00584 	movi	r3,22
 108594c:	2025883a 	mov	r18,r4
 1085950:	18802b2e 	bgeu	r3,r2,1085a00 <_malloc_r+0xe8>
 1085954:	047ffe04 	movi	r17,-8
 1085958:	1462703a 	and	r17,r2,r17
 108595c:	88002a16 	blt	r17,zero,1085a08 <_malloc_r+0xf0>
 1085960:	89402936 	bltu	r17,r5,1085a08 <_malloc_r+0xf0>
 1085964:	9009883a 	mov	r4,r18
 1085968:	1089c3c0 	call	1089c3c <__malloc_lock>
 108596c:	00807dc4 	movi	r2,503
 1085970:	14402936 	bltu	r2,r17,1085a18 <_malloc_r+0x100>
 1085974:	8808d0fa 	srli	r4,r17,3
 1085978:	04c04274 	movhi	r19,265
 108597c:	9cf17204 	addi	r19,r19,-14904
 1085980:	2105883a 	add	r2,r4,r4
 1085984:	1085883a 	add	r2,r2,r2
 1085988:	1085883a 	add	r2,r2,r2
 108598c:	9885883a 	add	r2,r19,r2
 1085990:	14000317 	ldw	r16,12(r2)
 1085994:	80815526 	beq	r16,r2,1085eec <_malloc_r+0x5d4>
 1085998:	81000117 	ldw	r4,4(r16)
 108599c:	00bfff04 	movi	r2,-4
 10859a0:	80c00317 	ldw	r3,12(r16)
 10859a4:	2084703a 	and	r2,r4,r2
 10859a8:	8085883a 	add	r2,r16,r2
 10859ac:	11800117 	ldw	r6,4(r2)
 10859b0:	81400217 	ldw	r5,8(r16)
 10859b4:	9009883a 	mov	r4,r18
 10859b8:	31800054 	ori	r6,r6,1
 10859bc:	11800115 	stw	r6,4(r2)
 10859c0:	28c00315 	stw	r3,12(r5)
 10859c4:	19400215 	stw	r5,8(r3)
 10859c8:	1089c5c0 	call	1089c5c <__malloc_unlock>
 10859cc:	80800204 	addi	r2,r16,8
 10859d0:	dfc00917 	ldw	ra,36(sp)
 10859d4:	df000817 	ldw	fp,32(sp)
 10859d8:	ddc00717 	ldw	r23,28(sp)
 10859dc:	dd800617 	ldw	r22,24(sp)
 10859e0:	dd400517 	ldw	r21,20(sp)
 10859e4:	dd000417 	ldw	r20,16(sp)
 10859e8:	dcc00317 	ldw	r19,12(sp)
 10859ec:	dc800217 	ldw	r18,8(sp)
 10859f0:	dc400117 	ldw	r17,4(sp)
 10859f4:	dc000017 	ldw	r16,0(sp)
 10859f8:	dec00a04 	addi	sp,sp,40
 10859fc:	f800283a 	ret
 1085a00:	04400404 	movi	r17,16
 1085a04:	897fd72e 	bgeu	r17,r5,1085964 <_malloc_r+0x4c>
 1085a08:	00800304 	movi	r2,12
 1085a0c:	90800015 	stw	r2,0(r18)
 1085a10:	0005883a 	mov	r2,zero
 1085a14:	003fee06 	br	10859d0 <_malloc_r+0xb8>
 1085a18:	8808d27a 	srli	r4,r17,9
 1085a1c:	20007126 	beq	r4,zero,1085be4 <_malloc_r+0x2cc>
 1085a20:	00800104 	movi	r2,4
 1085a24:	1100eb36 	bltu	r2,r4,1085dd4 <_malloc_r+0x4bc>
 1085a28:	8808d1ba 	srli	r4,r17,6
 1085a2c:	21000e04 	addi	r4,r4,56
 1085a30:	210b883a 	add	r5,r4,r4
 1085a34:	294b883a 	add	r5,r5,r5
 1085a38:	294b883a 	add	r5,r5,r5
 1085a3c:	04c04274 	movhi	r19,265
 1085a40:	9cf17204 	addi	r19,r19,-14904
 1085a44:	994b883a 	add	r5,r19,r5
 1085a48:	2c000317 	ldw	r16,12(r5)
 1085a4c:	2c000e26 	beq	r5,r16,1085a88 <_malloc_r+0x170>
 1085a50:	80c00117 	ldw	r3,4(r16)
 1085a54:	01ffff04 	movi	r7,-4
 1085a58:	018003c4 	movi	r6,15
 1085a5c:	19c6703a 	and	r3,r3,r7
 1085a60:	1c45c83a 	sub	r2,r3,r17
 1085a64:	30800716 	blt	r6,r2,1085a84 <_malloc_r+0x16c>
 1085a68:	1000610e 	bge	r2,zero,1085bf0 <_malloc_r+0x2d8>
 1085a6c:	84000317 	ldw	r16,12(r16)
 1085a70:	2c000526 	beq	r5,r16,1085a88 <_malloc_r+0x170>
 1085a74:	80c00117 	ldw	r3,4(r16)
 1085a78:	19c6703a 	and	r3,r3,r7
 1085a7c:	1c45c83a 	sub	r2,r3,r17
 1085a80:	30bff90e 	bge	r6,r2,1085a68 <_malloc_r+0x150>
 1085a84:	213fffc4 	addi	r4,r4,-1
 1085a88:	21000044 	addi	r4,r4,1
 1085a8c:	9c000417 	ldw	r16,16(r19)
 1085a90:	00c04274 	movhi	r3,265
 1085a94:	18f17204 	addi	r3,r3,-14904
 1085a98:	1a400204 	addi	r9,r3,8
 1085a9c:	8240ff26 	beq	r16,r9,1085e9c <_malloc_r+0x584>
 1085aa0:	81400117 	ldw	r5,4(r16)
 1085aa4:	00bfff04 	movi	r2,-4
 1085aa8:	018003c4 	movi	r6,15
 1085aac:	2884703a 	and	r2,r5,r2
 1085ab0:	144bc83a 	sub	r5,r2,r17
 1085ab4:	3140ea16 	blt	r6,r5,1085e60 <_malloc_r+0x548>
 1085ab8:	1a400515 	stw	r9,20(r3)
 1085abc:	1a400415 	stw	r9,16(r3)
 1085ac0:	2800570e 	bge	r5,zero,1085c20 <_malloc_r+0x308>
 1085ac4:	01407fc4 	movi	r5,511
 1085ac8:	2880ca36 	bltu	r5,r2,1085df4 <_malloc_r+0x4dc>
 1085acc:	1004d0fa 	srli	r2,r2,3
 1085ad0:	02000044 	movi	r8,1
 1085ad4:	19c00117 	ldw	r7,4(r3)
 1085ad8:	108b883a 	add	r5,r2,r2
 1085adc:	294b883a 	add	r5,r5,r5
 1085ae0:	1005d0ba 	srai	r2,r2,2
 1085ae4:	294b883a 	add	r5,r5,r5
 1085ae8:	28cb883a 	add	r5,r5,r3
 1085aec:	29800217 	ldw	r6,8(r5)
 1085af0:	4084983a 	sll	r2,r8,r2
 1085af4:	81400315 	stw	r5,12(r16)
 1085af8:	81800215 	stw	r6,8(r16)
 1085afc:	11c4b03a 	or	r2,r2,r7
 1085b00:	18800115 	stw	r2,4(r3)
 1085b04:	2c000215 	stw	r16,8(r5)
 1085b08:	34000315 	stw	r16,12(r6)
 1085b0c:	200bd0ba 	srai	r5,r4,2
 1085b10:	00c00044 	movi	r3,1
 1085b14:	194a983a 	sll	r5,r3,r5
 1085b18:	11404936 	bltu	r2,r5,1085c40 <_malloc_r+0x328>
 1085b1c:	1146703a 	and	r3,r2,r5
 1085b20:	18000a1e 	bne	r3,zero,1085b4c <_malloc_r+0x234>
 1085b24:	00ffff04 	movi	r3,-4
 1085b28:	294b883a 	add	r5,r5,r5
 1085b2c:	20c8703a 	and	r4,r4,r3
 1085b30:	1146703a 	and	r3,r2,r5
 1085b34:	21000104 	addi	r4,r4,4
 1085b38:	1800041e 	bne	r3,zero,1085b4c <_malloc_r+0x234>
 1085b3c:	294b883a 	add	r5,r5,r5
 1085b40:	1146703a 	and	r3,r2,r5
 1085b44:	21000104 	addi	r4,r4,4
 1085b48:	183ffc26 	beq	r3,zero,1085b3c <_malloc_r+0x224>
 1085b4c:	023fff04 	movi	r8,-4
 1085b50:	01c003c4 	movi	r7,15
 1085b54:	2105883a 	add	r2,r4,r4
 1085b58:	1085883a 	add	r2,r2,r2
 1085b5c:	1085883a 	add	r2,r2,r2
 1085b60:	9899883a 	add	r12,r19,r2
 1085b64:	62800304 	addi	r10,r12,12
 1085b68:	2017883a 	mov	r11,r4
 1085b6c:	54000017 	ldw	r16,0(r10)
 1085b70:	51bffd04 	addi	r6,r10,-12
 1085b74:	8180041e 	bne	r16,r6,1085b88 <_malloc_r+0x270>
 1085b78:	0000ca06 	br	1085ea4 <_malloc_r+0x58c>
 1085b7c:	10001c0e 	bge	r2,zero,1085bf0 <_malloc_r+0x2d8>
 1085b80:	84000317 	ldw	r16,12(r16)
 1085b84:	8180c726 	beq	r16,r6,1085ea4 <_malloc_r+0x58c>
 1085b88:	80c00117 	ldw	r3,4(r16)
 1085b8c:	1a06703a 	and	r3,r3,r8
 1085b90:	1c45c83a 	sub	r2,r3,r17
 1085b94:	38bff90e 	bge	r7,r2,1085b7c <_malloc_r+0x264>
 1085b98:	81000317 	ldw	r4,12(r16)
 1085b9c:	81400217 	ldw	r5,8(r16)
 1085ba0:	8447883a 	add	r3,r16,r17
 1085ba4:	8c400054 	ori	r17,r17,1
 1085ba8:	29000315 	stw	r4,12(r5)
 1085bac:	21400215 	stw	r5,8(r4)
 1085bb0:	84400115 	stw	r17,4(r16)
 1085bb4:	1889883a 	add	r4,r3,r2
 1085bb8:	11400054 	ori	r5,r2,1
 1085bbc:	98c00515 	stw	r3,20(r19)
 1085bc0:	98c00415 	stw	r3,16(r19)
 1085bc4:	20800015 	stw	r2,0(r4)
 1085bc8:	1a400315 	stw	r9,12(r3)
 1085bcc:	1a400215 	stw	r9,8(r3)
 1085bd0:	19400115 	stw	r5,4(r3)
 1085bd4:	9009883a 	mov	r4,r18
 1085bd8:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1085bdc:	80800204 	addi	r2,r16,8
 1085be0:	003f7b06 	br	10859d0 <_malloc_r+0xb8>
 1085be4:	8808d0fa 	srli	r4,r17,3
 1085be8:	210b883a 	add	r5,r4,r4
 1085bec:	003f9106 	br	1085a34 <_malloc_r+0x11c>
 1085bf0:	80c7883a 	add	r3,r16,r3
 1085bf4:	19400117 	ldw	r5,4(r3)
 1085bf8:	80800317 	ldw	r2,12(r16)
 1085bfc:	81000217 	ldw	r4,8(r16)
 1085c00:	29400054 	ori	r5,r5,1
 1085c04:	19400115 	stw	r5,4(r3)
 1085c08:	20800315 	stw	r2,12(r4)
 1085c0c:	11000215 	stw	r4,8(r2)
 1085c10:	9009883a 	mov	r4,r18
 1085c14:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1085c18:	80800204 	addi	r2,r16,8
 1085c1c:	003f6c06 	br	10859d0 <_malloc_r+0xb8>
 1085c20:	8085883a 	add	r2,r16,r2
 1085c24:	10c00117 	ldw	r3,4(r2)
 1085c28:	9009883a 	mov	r4,r18
 1085c2c:	18c00054 	ori	r3,r3,1
 1085c30:	10c00115 	stw	r3,4(r2)
 1085c34:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1085c38:	80800204 	addi	r2,r16,8
 1085c3c:	003f6406 	br	10859d0 <_malloc_r+0xb8>
 1085c40:	9c000217 	ldw	r16,8(r19)
 1085c44:	00bfff04 	movi	r2,-4
 1085c48:	85400117 	ldw	r21,4(r16)
 1085c4c:	a8aa703a 	and	r21,r21,r2
 1085c50:	ac400336 	bltu	r21,r17,1085c60 <_malloc_r+0x348>
 1085c54:	ac45c83a 	sub	r2,r21,r17
 1085c58:	00c003c4 	movi	r3,15
 1085c5c:	18805316 	blt	r3,r2,1085dac <_malloc_r+0x494>
 1085c60:	d5e6aa17 	ldw	r23,-25944(gp)
 1085c64:	d0e00317 	ldw	r3,-32756(gp)
 1085c68:	00bfffc4 	movi	r2,-1
 1085c6c:	8579883a 	add	fp,r16,r21
 1085c70:	8def883a 	add	r23,r17,r23
 1085c74:	1880d226 	beq	r3,r2,1085fc0 <_malloc_r+0x6a8>
 1085c78:	bdc403c4 	addi	r23,r23,4111
 1085c7c:	00bc0004 	movi	r2,-4096
 1085c80:	b8ae703a 	and	r23,r23,r2
 1085c84:	9009883a 	mov	r4,r18
 1085c88:	b80b883a 	mov	r5,r23
 1085c8c:	1087a980 	call	1087a98 <_sbrk_r>
 1085c90:	1029883a 	mov	r20,r2
 1085c94:	00bfffc4 	movi	r2,-1
 1085c98:	a080d126 	beq	r20,r2,1085fe0 <_malloc_r+0x6c8>
 1085c9c:	a7009f36 	bltu	r20,fp,1085f1c <_malloc_r+0x604>
 1085ca0:	05804274 	movhi	r22,265
 1085ca4:	b5bda804 	addi	r22,r22,-2400
 1085ca8:	b0800017 	ldw	r2,0(r22)
 1085cac:	b885883a 	add	r2,r23,r2
 1085cb0:	b0800015 	stw	r2,0(r22)
 1085cb4:	e500cf26 	beq	fp,r20,1085ff4 <_malloc_r+0x6dc>
 1085cb8:	d1200317 	ldw	r4,-32756(gp)
 1085cbc:	00ffffc4 	movi	r3,-1
 1085cc0:	20c0e026 	beq	r4,r3,1086044 <_malloc_r+0x72c>
 1085cc4:	a739c83a 	sub	fp,r20,fp
 1085cc8:	1705883a 	add	r2,r2,fp
 1085ccc:	b0800015 	stw	r2,0(r22)
 1085cd0:	a08001cc 	andi	r2,r20,7
 1085cd4:	1000a526 	beq	r2,zero,1085f6c <_malloc_r+0x654>
 1085cd8:	a0a9c83a 	sub	r20,r20,r2
 1085cdc:	00c40204 	movi	r3,4104
 1085ce0:	a5000204 	addi	r20,r20,8
 1085ce4:	1885c83a 	sub	r2,r3,r2
 1085ce8:	a5c7883a 	add	r3,r20,r23
 1085cec:	18c3ffcc 	andi	r3,r3,4095
 1085cf0:	10efc83a 	sub	r23,r2,r3
 1085cf4:	9009883a 	mov	r4,r18
 1085cf8:	b80b883a 	mov	r5,r23
 1085cfc:	1087a980 	call	1087a98 <_sbrk_r>
 1085d00:	00ffffc4 	movi	r3,-1
 1085d04:	10c0cc26 	beq	r2,r3,1086038 <_malloc_r+0x720>
 1085d08:	1505c83a 	sub	r2,r2,r20
 1085d0c:	b887883a 	add	r3,r23,r2
 1085d10:	18c00054 	ori	r3,r3,1
 1085d14:	b0800017 	ldw	r2,0(r22)
 1085d18:	9d000215 	stw	r20,8(r19)
 1085d1c:	a0c00115 	stw	r3,4(r20)
 1085d20:	b885883a 	add	r2,r23,r2
 1085d24:	b0800015 	stw	r2,0(r22)
 1085d28:	84c00e26 	beq	r16,r19,1085d64 <_malloc_r+0x44c>
 1085d2c:	00c003c4 	movi	r3,15
 1085d30:	1d40902e 	bgeu	r3,r21,1085f74 <_malloc_r+0x65c>
 1085d34:	ad7ffd04 	addi	r21,r21,-12
 1085d38:	013ffe04 	movi	r4,-8
 1085d3c:	a908703a 	and	r4,r21,r4
 1085d40:	810b883a 	add	r5,r16,r4
 1085d44:	01800144 	movi	r6,5
 1085d48:	29800115 	stw	r6,4(r5)
 1085d4c:	29800215 	stw	r6,8(r5)
 1085d50:	81400117 	ldw	r5,4(r16)
 1085d54:	2940004c 	andi	r5,r5,1
 1085d58:	214ab03a 	or	r5,r4,r5
 1085d5c:	81400115 	stw	r5,4(r16)
 1085d60:	1900ae36 	bltu	r3,r4,108601c <_malloc_r+0x704>
 1085d64:	d0e6a917 	ldw	r3,-25948(gp)
 1085d68:	1880012e 	bgeu	r3,r2,1085d70 <_malloc_r+0x458>
 1085d6c:	d0a6a915 	stw	r2,-25948(gp)
 1085d70:	d0e6a817 	ldw	r3,-25952(gp)
 1085d74:	9c000217 	ldw	r16,8(r19)
 1085d78:	1880012e 	bgeu	r3,r2,1085d80 <_malloc_r+0x468>
 1085d7c:	d0a6a815 	stw	r2,-25952(gp)
 1085d80:	80c00117 	ldw	r3,4(r16)
 1085d84:	00bfff04 	movi	r2,-4
 1085d88:	1886703a 	and	r3,r3,r2
 1085d8c:	1c45c83a 	sub	r2,r3,r17
 1085d90:	1c400236 	bltu	r3,r17,1085d9c <_malloc_r+0x484>
 1085d94:	00c003c4 	movi	r3,15
 1085d98:	18800416 	blt	r3,r2,1085dac <_malloc_r+0x494>
 1085d9c:	9009883a 	mov	r4,r18
 1085da0:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1085da4:	0005883a 	mov	r2,zero
 1085da8:	003f0906 	br	10859d0 <_malloc_r+0xb8>
 1085dac:	88c00054 	ori	r3,r17,1
 1085db0:	10800054 	ori	r2,r2,1
 1085db4:	80c00115 	stw	r3,4(r16)
 1085db8:	8463883a 	add	r17,r16,r17
 1085dbc:	88800115 	stw	r2,4(r17)
 1085dc0:	9009883a 	mov	r4,r18
 1085dc4:	9c400215 	stw	r17,8(r19)
 1085dc8:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1085dcc:	80800204 	addi	r2,r16,8
 1085dd0:	003eff06 	br	10859d0 <_malloc_r+0xb8>
 1085dd4:	00800504 	movi	r2,20
 1085dd8:	1100492e 	bgeu	r2,r4,1085f00 <_malloc_r+0x5e8>
 1085ddc:	00801504 	movi	r2,84
 1085de0:	11005c36 	bltu	r2,r4,1085f54 <_malloc_r+0x63c>
 1085de4:	8808d33a 	srli	r4,r17,12
 1085de8:	21001b84 	addi	r4,r4,110
 1085dec:	210b883a 	add	r5,r4,r4
 1085df0:	003f1006 	br	1085a34 <_malloc_r+0x11c>
 1085df4:	1006d27a 	srli	r3,r2,9
 1085df8:	01400104 	movi	r5,4
 1085dfc:	28c0432e 	bgeu	r5,r3,1085f0c <_malloc_r+0x5f4>
 1085e00:	01400504 	movi	r5,20
 1085e04:	28c07036 	bltu	r5,r3,1085fc8 <_malloc_r+0x6b0>
 1085e08:	194016c4 	addi	r5,r3,91
 1085e0c:	294d883a 	add	r6,r5,r5
 1085e10:	318d883a 	add	r6,r6,r6
 1085e14:	318d883a 	add	r6,r6,r6
 1085e18:	998d883a 	add	r6,r19,r6
 1085e1c:	30c00217 	ldw	r3,8(r6)
 1085e20:	01c04274 	movhi	r7,265
 1085e24:	39f17204 	addi	r7,r7,-14904
 1085e28:	19805726 	beq	r3,r6,1085f88 <_malloc_r+0x670>
 1085e2c:	01ffff04 	movi	r7,-4
 1085e30:	19400117 	ldw	r5,4(r3)
 1085e34:	29ca703a 	and	r5,r5,r7
 1085e38:	1140022e 	bgeu	r2,r5,1085e44 <_malloc_r+0x52c>
 1085e3c:	18c00217 	ldw	r3,8(r3)
 1085e40:	30fffb1e 	bne	r6,r3,1085e30 <_malloc_r+0x518>
 1085e44:	19400317 	ldw	r5,12(r3)
 1085e48:	98800117 	ldw	r2,4(r19)
 1085e4c:	81400315 	stw	r5,12(r16)
 1085e50:	80c00215 	stw	r3,8(r16)
 1085e54:	2c000215 	stw	r16,8(r5)
 1085e58:	1c000315 	stw	r16,12(r3)
 1085e5c:	003f2b06 	br	1085b0c <_malloc_r+0x1f4>
 1085e60:	8445883a 	add	r2,r16,r17
 1085e64:	8c400054 	ori	r17,r17,1
 1085e68:	18800515 	stw	r2,20(r3)
 1085e6c:	18800415 	stw	r2,16(r3)
 1085e70:	29000054 	ori	r4,r5,1
 1085e74:	1147883a 	add	r3,r2,r5
 1085e78:	84400115 	stw	r17,4(r16)
 1085e7c:	11000115 	stw	r4,4(r2)
 1085e80:	12400315 	stw	r9,12(r2)
 1085e84:	12400215 	stw	r9,8(r2)
 1085e88:	19400015 	stw	r5,0(r3)
 1085e8c:	9009883a 	mov	r4,r18
 1085e90:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1085e94:	80800204 	addi	r2,r16,8
 1085e98:	003ecd06 	br	10859d0 <_malloc_r+0xb8>
 1085e9c:	18800117 	ldw	r2,4(r3)
 1085ea0:	003f1a06 	br	1085b0c <_malloc_r+0x1f4>
 1085ea4:	5ac00044 	addi	r11,r11,1
 1085ea8:	588000cc 	andi	r2,r11,3
 1085eac:	52800204 	addi	r10,r10,8
 1085eb0:	103f2e1e 	bne	r2,zero,1085b6c <_malloc_r+0x254>
 1085eb4:	20c000cc 	andi	r3,r4,3
 1085eb8:	60bffe04 	addi	r2,r12,-8
 1085ebc:	18006f26 	beq	r3,zero,108607c <_malloc_r+0x764>
 1085ec0:	63000017 	ldw	r12,0(r12)
 1085ec4:	213fffc4 	addi	r4,r4,-1
 1085ec8:	60bffa26 	beq	r12,r2,1085eb4 <_malloc_r+0x59c>
 1085ecc:	98800117 	ldw	r2,4(r19)
 1085ed0:	294b883a 	add	r5,r5,r5
 1085ed4:	117f5a36 	bltu	r2,r5,1085c40 <_malloc_r+0x328>
 1085ed8:	283f5926 	beq	r5,zero,1085c40 <_malloc_r+0x328>
 1085edc:	1146703a 	and	r3,r2,r5
 1085ee0:	18001626 	beq	r3,zero,1085f3c <_malloc_r+0x624>
 1085ee4:	5809883a 	mov	r4,r11
 1085ee8:	003f1a06 	br	1085b54 <_malloc_r+0x23c>
 1085eec:	80800204 	addi	r2,r16,8
 1085ef0:	84000517 	ldw	r16,20(r16)
 1085ef4:	143ea81e 	bne	r2,r16,1085998 <_malloc_r+0x80>
 1085ef8:	21000084 	addi	r4,r4,2
 1085efc:	003ee306 	br	1085a8c <_malloc_r+0x174>
 1085f00:	210016c4 	addi	r4,r4,91
 1085f04:	210b883a 	add	r5,r4,r4
 1085f08:	003eca06 	br	1085a34 <_malloc_r+0x11c>
 1085f0c:	100ad1ba 	srli	r5,r2,6
 1085f10:	29400e04 	addi	r5,r5,56
 1085f14:	294d883a 	add	r6,r5,r5
 1085f18:	003fbd06 	br	1085e10 <_malloc_r+0x4f8>
 1085f1c:	84ff6026 	beq	r16,r19,1085ca0 <_malloc_r+0x388>
 1085f20:	00804274 	movhi	r2,265
 1085f24:	10b17204 	addi	r2,r2,-14904
 1085f28:	14000217 	ldw	r16,8(r2)
 1085f2c:	00bfff04 	movi	r2,-4
 1085f30:	80c00117 	ldw	r3,4(r16)
 1085f34:	1886703a 	and	r3,r3,r2
 1085f38:	003f9406 	br	1085d8c <_malloc_r+0x474>
 1085f3c:	294b883a 	add	r5,r5,r5
 1085f40:	1146703a 	and	r3,r2,r5
 1085f44:	5ac00104 	addi	r11,r11,4
 1085f48:	183ffc26 	beq	r3,zero,1085f3c <_malloc_r+0x624>
 1085f4c:	5809883a 	mov	r4,r11
 1085f50:	003f0006 	br	1085b54 <_malloc_r+0x23c>
 1085f54:	00805504 	movi	r2,340
 1085f58:	11001336 	bltu	r2,r4,1085fa8 <_malloc_r+0x690>
 1085f5c:	8808d3fa 	srli	r4,r17,15
 1085f60:	21001dc4 	addi	r4,r4,119
 1085f64:	210b883a 	add	r5,r4,r4
 1085f68:	003eb206 	br	1085a34 <_malloc_r+0x11c>
 1085f6c:	00840004 	movi	r2,4096
 1085f70:	003f5d06 	br	1085ce8 <_malloc_r+0x3d0>
 1085f74:	00800044 	movi	r2,1
 1085f78:	a0800115 	stw	r2,4(r20)
 1085f7c:	a021883a 	mov	r16,r20
 1085f80:	0007883a 	mov	r3,zero
 1085f84:	003f8106 	br	1085d8c <_malloc_r+0x474>
 1085f88:	280bd0ba 	srai	r5,r5,2
 1085f8c:	01800044 	movi	r6,1
 1085f90:	38800117 	ldw	r2,4(r7)
 1085f94:	314c983a 	sll	r6,r6,r5
 1085f98:	180b883a 	mov	r5,r3
 1085f9c:	3084b03a 	or	r2,r6,r2
 1085fa0:	38800115 	stw	r2,4(r7)
 1085fa4:	003fa906 	br	1085e4c <_malloc_r+0x534>
 1085fa8:	00815504 	movi	r2,1364
 1085fac:	11001836 	bltu	r2,r4,1086010 <_malloc_r+0x6f8>
 1085fb0:	8808d4ba 	srli	r4,r17,18
 1085fb4:	21001f04 	addi	r4,r4,124
 1085fb8:	210b883a 	add	r5,r4,r4
 1085fbc:	003e9d06 	br	1085a34 <_malloc_r+0x11c>
 1085fc0:	bdc00404 	addi	r23,r23,16
 1085fc4:	003f2f06 	br	1085c84 <_malloc_r+0x36c>
 1085fc8:	01401504 	movi	r5,84
 1085fcc:	28c01f36 	bltu	r5,r3,108604c <_malloc_r+0x734>
 1085fd0:	100ad33a 	srli	r5,r2,12
 1085fd4:	29401b84 	addi	r5,r5,110
 1085fd8:	294d883a 	add	r6,r5,r5
 1085fdc:	003f8c06 	br	1085e10 <_malloc_r+0x4f8>
 1085fe0:	9c000217 	ldw	r16,8(r19)
 1085fe4:	00bfff04 	movi	r2,-4
 1085fe8:	80c00117 	ldw	r3,4(r16)
 1085fec:	1886703a 	and	r3,r3,r2
 1085ff0:	003f6606 	br	1085d8c <_malloc_r+0x474>
 1085ff4:	e0c3ffcc 	andi	r3,fp,4095
 1085ff8:	183f2f1e 	bne	r3,zero,1085cb8 <_malloc_r+0x3a0>
 1085ffc:	98c00217 	ldw	r3,8(r19)
 1086000:	bd49883a 	add	r4,r23,r21
 1086004:	21000054 	ori	r4,r4,1
 1086008:	19000115 	stw	r4,4(r3)
 108600c:	003f5506 	br	1085d64 <_malloc_r+0x44c>
 1086010:	01403f04 	movi	r5,252
 1086014:	01001f84 	movi	r4,126
 1086018:	003e8606 	br	1085a34 <_malloc_r+0x11c>
 108601c:	9009883a 	mov	r4,r18
 1086020:	81400204 	addi	r5,r16,8
 1086024:	1084d800 	call	1084d80 <_free_r>
 1086028:	00804274 	movhi	r2,265
 108602c:	10bda804 	addi	r2,r2,-2400
 1086030:	10800017 	ldw	r2,0(r2)
 1086034:	003f4b06 	br	1085d64 <_malloc_r+0x44c>
 1086038:	00c00044 	movi	r3,1
 108603c:	002f883a 	mov	r23,zero
 1086040:	003f3406 	br	1085d14 <_malloc_r+0x3fc>
 1086044:	d5200315 	stw	r20,-32756(gp)
 1086048:	003f2106 	br	1085cd0 <_malloc_r+0x3b8>
 108604c:	01405504 	movi	r5,340
 1086050:	28c00436 	bltu	r5,r3,1086064 <_malloc_r+0x74c>
 1086054:	100ad3fa 	srli	r5,r2,15
 1086058:	29401dc4 	addi	r5,r5,119
 108605c:	294d883a 	add	r6,r5,r5
 1086060:	003f6b06 	br	1085e10 <_malloc_r+0x4f8>
 1086064:	01415504 	movi	r5,1364
 1086068:	28c00936 	bltu	r5,r3,1086090 <_malloc_r+0x778>
 108606c:	100ad4ba 	srli	r5,r2,18
 1086070:	29401f04 	addi	r5,r5,124
 1086074:	294d883a 	add	r6,r5,r5
 1086078:	003f6506 	br	1085e10 <_malloc_r+0x4f8>
 108607c:	98800117 	ldw	r2,4(r19)
 1086080:	0146303a 	nor	r3,zero,r5
 1086084:	1884703a 	and	r2,r3,r2
 1086088:	98800115 	stw	r2,4(r19)
 108608c:	003f9006 	br	1085ed0 <_malloc_r+0x5b8>
 1086090:	01803f04 	movi	r6,252
 1086094:	01401f84 	movi	r5,126
 1086098:	003f5d06 	br	1085e10 <_malloc_r+0x4f8>

0108609c <memchr>:
 108609c:	008000c4 	movi	r2,3
 10860a0:	29403fcc 	andi	r5,r5,255
 10860a4:	1180282e 	bgeu	r2,r6,1086148 <memchr+0xac>
 10860a8:	2086703a 	and	r3,r4,r2
 10860ac:	1800351e 	bne	r3,zero,1086184 <memchr+0xe8>
 10860b0:	2816923a 	slli	r11,r5,8
 10860b4:	2093883a 	add	r9,r4,r2
 10860b8:	22000084 	addi	r8,r4,2
 10860bc:	5957883a 	add	r11,r11,r5
 10860c0:	5816923a 	slli	r11,r11,8
 10860c4:	20c00044 	addi	r3,r4,1
 10860c8:	037fbff4 	movhi	r13,65279
 10860cc:	6b7fbfc4 	addi	r13,r13,-257
 10860d0:	5957883a 	add	r11,r11,r5
 10860d4:	5816923a 	slli	r11,r11,8
 10860d8:	03202074 	movhi	r12,32897
 10860dc:	63202004 	addi	r12,r12,-32640
 10860e0:	101d883a 	mov	r14,r2
 10860e4:	5957883a 	add	r11,r11,r5
 10860e8:	21c00017 	ldw	r7,0(r4)
 10860ec:	31bfff04 	addi	r6,r6,-4
 10860f0:	1805883a 	mov	r2,r3
 10860f4:	3acef03a 	xor	r7,r7,r11
 10860f8:	3b55883a 	add	r10,r7,r13
 10860fc:	01ce303a 	nor	r7,zero,r7
 1086100:	51ce703a 	and	r7,r10,r7
 1086104:	3b0e703a 	and	r7,r7,r12
 1086108:	38000a26 	beq	r7,zero,1086134 <memchr+0x98>
 108610c:	21c00003 	ldbu	r7,0(r4)
 1086110:	39401e26 	beq	r7,r5,108618c <memchr+0xf0>
 1086114:	19c00003 	ldbu	r7,0(r3)
 1086118:	39401926 	beq	r7,r5,1086180 <memchr+0xe4>
 108611c:	41c00003 	ldbu	r7,0(r8)
 1086120:	4005883a 	mov	r2,r8
 1086124:	39401626 	beq	r7,r5,1086180 <memchr+0xe4>
 1086128:	49c00003 	ldbu	r7,0(r9)
 108612c:	4805883a 	mov	r2,r9
 1086130:	39401326 	beq	r7,r5,1086180 <memchr+0xe4>
 1086134:	21000104 	addi	r4,r4,4
 1086138:	4a400104 	addi	r9,r9,4
 108613c:	42000104 	addi	r8,r8,4
 1086140:	18c00104 	addi	r3,r3,4
 1086144:	71bfe836 	bltu	r14,r6,10860e8 <memchr+0x4c>
 1086148:	2005883a 	mov	r2,r4
 108614c:	30000a26 	beq	r6,zero,1086178 <memchr+0xdc>
 1086150:	10c00003 	ldbu	r3,0(r2)
 1086154:	19400a26 	beq	r3,r5,1086180 <memchr+0xe4>
 1086158:	10c00044 	addi	r3,r2,1
 108615c:	118d883a 	add	r6,r2,r6
 1086160:	00000306 	br	1086170 <memchr+0xd4>
 1086164:	11000003 	ldbu	r4,0(r2)
 1086168:	18c00044 	addi	r3,r3,1
 108616c:	21400426 	beq	r4,r5,1086180 <memchr+0xe4>
 1086170:	1805883a 	mov	r2,r3
 1086174:	19bffb1e 	bne	r3,r6,1086164 <memchr+0xc8>
 1086178:	0005883a 	mov	r2,zero
 108617c:	f800283a 	ret
 1086180:	f800283a 	ret
 1086184:	2005883a 	mov	r2,r4
 1086188:	003ff106 	br	1086150 <memchr+0xb4>
 108618c:	2005883a 	mov	r2,r4
 1086190:	f800283a 	ret

01086194 <memcpy>:
 1086194:	00c003c4 	movi	r3,15
 1086198:	2005883a 	mov	r2,r4
 108619c:	3009883a 	mov	r4,r6
 10861a0:	1980032e 	bgeu	r3,r6,10861b0 <memcpy+0x1c>
 10861a4:	2886b03a 	or	r3,r5,r2
 10861a8:	18c000cc 	andi	r3,r3,3
 10861ac:	18000926 	beq	r3,zero,10861d4 <memcpy+0x40>
 10861b0:	1007883a 	mov	r3,r2
 10861b4:	290f883a 	add	r7,r5,r4
 10861b8:	20000526 	beq	r4,zero,10861d0 <memcpy+0x3c>
 10861bc:	29800003 	ldbu	r6,0(r5)
 10861c0:	18c00044 	addi	r3,r3,1
 10861c4:	29400044 	addi	r5,r5,1
 10861c8:	19bfffc5 	stb	r6,-1(r3)
 10861cc:	29fffb1e 	bne	r5,r7,10861bc <memcpy+0x28>
 10861d0:	f800283a 	ret
 10861d4:	327ffc04 	addi	r9,r6,-16
 10861d8:	4812d13a 	srli	r9,r9,4
 10861dc:	11000404 	addi	r4,r2,16
 10861e0:	1007883a 	mov	r3,r2
 10861e4:	4810913a 	slli	r8,r9,4
 10861e8:	280f883a 	mov	r7,r5
 10861ec:	2209883a 	add	r4,r4,r8
 10861f0:	3a000017 	ldw	r8,0(r7)
 10861f4:	18c00404 	addi	r3,r3,16
 10861f8:	39c00404 	addi	r7,r7,16
 10861fc:	1a3ffc15 	stw	r8,-16(r3)
 1086200:	3a3ffd17 	ldw	r8,-12(r7)
 1086204:	1a3ffd15 	stw	r8,-12(r3)
 1086208:	3a3ffe17 	ldw	r8,-8(r7)
 108620c:	1a3ffe15 	stw	r8,-8(r3)
 1086210:	3a3fff17 	ldw	r8,-4(r7)
 1086214:	1a3fff15 	stw	r8,-4(r3)
 1086218:	193ff51e 	bne	r3,r4,10861f0 <memcpy+0x5c>
 108621c:	49c00044 	addi	r7,r9,1
 1086220:	380e913a 	slli	r7,r7,4
 1086224:	310003cc 	andi	r4,r6,15
 1086228:	018000c4 	movi	r6,3
 108622c:	11c7883a 	add	r3,r2,r7
 1086230:	29cb883a 	add	r5,r5,r7
 1086234:	313fdf2e 	bgeu	r6,r4,10861b4 <memcpy+0x20>
 1086238:	213fff04 	addi	r4,r4,-4
 108623c:	2014d0ba 	srli	r10,r4,2
 1086240:	1a400104 	addi	r9,r3,4
 1086244:	180d883a 	mov	r6,r3
 1086248:	528f883a 	add	r7,r10,r10
 108624c:	39cf883a 	add	r7,r7,r7
 1086250:	49d3883a 	add	r9,r9,r7
 1086254:	280f883a 	mov	r7,r5
 1086258:	3a000017 	ldw	r8,0(r7)
 108625c:	31800104 	addi	r6,r6,4
 1086260:	39c00104 	addi	r7,r7,4
 1086264:	323fff15 	stw	r8,-4(r6)
 1086268:	327ffb1e 	bne	r6,r9,1086258 <memcpy+0xc4>
 108626c:	51800044 	addi	r6,r10,1
 1086270:	52bfff24 	muli	r10,r10,-4
 1086274:	318d883a 	add	r6,r6,r6
 1086278:	318d883a 	add	r6,r6,r6
 108627c:	5109883a 	add	r4,r10,r4
 1086280:	298b883a 	add	r5,r5,r6
 1086284:	1987883a 	add	r3,r3,r6
 1086288:	003fca06 	br	10861b4 <memcpy+0x20>

0108628c <memmove>:
 108628c:	2005883a 	mov	r2,r4
 1086290:	300f883a 	mov	r7,r6
 1086294:	29000b2e 	bgeu	r5,r4,10862c4 <memmove+0x38>
 1086298:	2987883a 	add	r3,r5,r6
 108629c:	20c0092e 	bgeu	r4,r3,10862c4 <memmove+0x38>
 10862a0:	218b883a 	add	r5,r4,r6
 10862a4:	198fc83a 	sub	r7,r3,r6
 10862a8:	30003f26 	beq	r6,zero,10863a8 <memmove+0x11c>
 10862ac:	18ffffc4 	addi	r3,r3,-1
 10862b0:	19000003 	ldbu	r4,0(r3)
 10862b4:	297fffc4 	addi	r5,r5,-1
 10862b8:	29000005 	stb	r4,0(r5)
 10862bc:	19fffb1e 	bne	r3,r7,10862ac <memmove+0x20>
 10862c0:	f800283a 	ret
 10862c4:	00c003c4 	movi	r3,15
 10862c8:	1980382e 	bgeu	r3,r6,10863ac <memmove+0x120>
 10862cc:	2886b03a 	or	r3,r5,r2
 10862d0:	18c000cc 	andi	r3,r3,3
 10862d4:	1800351e 	bne	r3,zero,10863ac <memmove+0x120>
 10862d8:	327ffc04 	addi	r9,r6,-16
 10862dc:	4812d13a 	srli	r9,r9,4
 10862e0:	12000404 	addi	r8,r2,16
 10862e4:	1007883a 	mov	r3,r2
 10862e8:	4808913a 	slli	r4,r9,4
 10862ec:	280f883a 	mov	r7,r5
 10862f0:	4111883a 	add	r8,r8,r4
 10862f4:	39000017 	ldw	r4,0(r7)
 10862f8:	18c00404 	addi	r3,r3,16
 10862fc:	39c00404 	addi	r7,r7,16
 1086300:	193ffc15 	stw	r4,-16(r3)
 1086304:	393ffd17 	ldw	r4,-12(r7)
 1086308:	193ffd15 	stw	r4,-12(r3)
 108630c:	393ffe17 	ldw	r4,-8(r7)
 1086310:	193ffe15 	stw	r4,-8(r3)
 1086314:	393fff17 	ldw	r4,-4(r7)
 1086318:	193fff15 	stw	r4,-4(r3)
 108631c:	1a3ff51e 	bne	r3,r8,10862f4 <memmove+0x68>
 1086320:	49000044 	addi	r4,r9,1
 1086324:	2008913a 	slli	r4,r4,4
 1086328:	31c003cc 	andi	r7,r6,15
 108632c:	1107883a 	add	r3,r2,r4
 1086330:	290b883a 	add	r5,r5,r4
 1086334:	010000c4 	movi	r4,3
 1086338:	21c0142e 	bgeu	r4,r7,108638c <memmove+0x100>
 108633c:	39ffff04 	addi	r7,r7,-4
 1086340:	3814d0ba 	srli	r10,r7,2
 1086344:	1a400104 	addi	r9,r3,4
 1086348:	180d883a 	mov	r6,r3
 108634c:	5289883a 	add	r4,r10,r10
 1086350:	2109883a 	add	r4,r4,r4
 1086354:	4913883a 	add	r9,r9,r4
 1086358:	2809883a 	mov	r4,r5
 108635c:	22000017 	ldw	r8,0(r4)
 1086360:	31800104 	addi	r6,r6,4
 1086364:	21000104 	addi	r4,r4,4
 1086368:	323fff15 	stw	r8,-4(r6)
 108636c:	327ffb1e 	bne	r6,r9,108635c <memmove+0xd0>
 1086370:	51000044 	addi	r4,r10,1
 1086374:	52bfff24 	muli	r10,r10,-4
 1086378:	2109883a 	add	r4,r4,r4
 108637c:	2109883a 	add	r4,r4,r4
 1086380:	51cf883a 	add	r7,r10,r7
 1086384:	290b883a 	add	r5,r5,r4
 1086388:	1907883a 	add	r3,r3,r4
 108638c:	38000626 	beq	r7,zero,10863a8 <memmove+0x11c>
 1086390:	19cf883a 	add	r7,r3,r7
 1086394:	29800003 	ldbu	r6,0(r5)
 1086398:	18c00044 	addi	r3,r3,1
 108639c:	29400044 	addi	r5,r5,1
 10863a0:	19bfffc5 	stb	r6,-1(r3)
 10863a4:	19fffb1e 	bne	r3,r7,1086394 <memmove+0x108>
 10863a8:	f800283a 	ret
 10863ac:	1007883a 	mov	r3,r2
 10863b0:	003ff606 	br	108638c <memmove+0x100>

010863b4 <memset>:
 10863b4:	00c000c4 	movi	r3,3
 10863b8:	2005883a 	mov	r2,r4
 10863bc:	29403fcc 	andi	r5,r5,255
 10863c0:	19802d2e 	bgeu	r3,r6,1086478 <memset+0xc4>
 10863c4:	20c6703a 	and	r3,r4,r3
 10863c8:	18002e1e 	bne	r3,zero,1086484 <memset+0xd0>
 10863cc:	2806923a 	slli	r3,r5,8
 10863d0:	010003c4 	movi	r4,15
 10863d4:	3011883a 	mov	r8,r6
 10863d8:	1946b03a 	or	r3,r3,r5
 10863dc:	180e943a 	slli	r7,r3,16
 10863e0:	38ceb03a 	or	r7,r7,r3
 10863e4:	1007883a 	mov	r3,r2
 10863e8:	21800f2e 	bgeu	r4,r6,1086428 <memset+0x74>
 10863ec:	19c00015 	stw	r7,0(r3)
 10863f0:	19c00115 	stw	r7,4(r3)
 10863f4:	19c00215 	stw	r7,8(r3)
 10863f8:	19c00315 	stw	r7,12(r3)
 10863fc:	423ffc04 	addi	r8,r8,-16
 1086400:	18c00404 	addi	r3,r3,16
 1086404:	223ff936 	bltu	r4,r8,10863ec <memset+0x38>
 1086408:	30fffc04 	addi	r3,r6,-16
 108640c:	1806d13a 	srli	r3,r3,4
 1086410:	318003cc 	andi	r6,r6,15
 1086414:	010000c4 	movi	r4,3
 1086418:	18c00044 	addi	r3,r3,1
 108641c:	1806913a 	slli	r3,r3,4
 1086420:	10c7883a 	add	r3,r2,r3
 1086424:	21800e2e 	bgeu	r4,r6,1086460 <memset+0xac>
 1086428:	1813883a 	mov	r9,r3
 108642c:	3011883a 	mov	r8,r6
 1086430:	010000c4 	movi	r4,3
 1086434:	49c00015 	stw	r7,0(r9)
 1086438:	423fff04 	addi	r8,r8,-4
 108643c:	4a400104 	addi	r9,r9,4
 1086440:	223ffc36 	bltu	r4,r8,1086434 <memset+0x80>
 1086444:	313fff04 	addi	r4,r6,-4
 1086448:	2008d0ba 	srli	r4,r4,2
 108644c:	318000cc 	andi	r6,r6,3
 1086450:	21000044 	addi	r4,r4,1
 1086454:	2109883a 	add	r4,r4,r4
 1086458:	2109883a 	add	r4,r4,r4
 108645c:	1907883a 	add	r3,r3,r4
 1086460:	30000a26 	beq	r6,zero,108648c <memset+0xd8>
 1086464:	198d883a 	add	r6,r3,r6
 1086468:	19400005 	stb	r5,0(r3)
 108646c:	18c00044 	addi	r3,r3,1
 1086470:	19bffd1e 	bne	r3,r6,1086468 <memset+0xb4>
 1086474:	f800283a 	ret
 1086478:	2007883a 	mov	r3,r4
 108647c:	303ff91e 	bne	r6,zero,1086464 <memset+0xb0>
 1086480:	00000206 	br	108648c <memset+0xd8>
 1086484:	2007883a 	mov	r3,r4
 1086488:	003ff606 	br	1086464 <memset+0xb0>
 108648c:	f800283a 	ret

01086490 <_Balloc>:
 1086490:	20801317 	ldw	r2,76(r4)
 1086494:	defffc04 	addi	sp,sp,-16
 1086498:	dc400115 	stw	r17,4(sp)
 108649c:	dc000015 	stw	r16,0(sp)
 10864a0:	dfc00315 	stw	ra,12(sp)
 10864a4:	dc800215 	stw	r18,8(sp)
 10864a8:	2023883a 	mov	r17,r4
 10864ac:	2821883a 	mov	r16,r5
 10864b0:	10000f26 	beq	r2,zero,10864f0 <_Balloc+0x60>
 10864b4:	8407883a 	add	r3,r16,r16
 10864b8:	18c7883a 	add	r3,r3,r3
 10864bc:	10c7883a 	add	r3,r2,r3
 10864c0:	18800017 	ldw	r2,0(r3)
 10864c4:	10001126 	beq	r2,zero,108650c <_Balloc+0x7c>
 10864c8:	11000017 	ldw	r4,0(r2)
 10864cc:	19000015 	stw	r4,0(r3)
 10864d0:	10000415 	stw	zero,16(r2)
 10864d4:	10000315 	stw	zero,12(r2)
 10864d8:	dfc00317 	ldw	ra,12(sp)
 10864dc:	dc800217 	ldw	r18,8(sp)
 10864e0:	dc400117 	ldw	r17,4(sp)
 10864e4:	dc000017 	ldw	r16,0(sp)
 10864e8:	dec00404 	addi	sp,sp,16
 10864ec:	f800283a 	ret
 10864f0:	01400104 	movi	r5,4
 10864f4:	01800404 	movi	r6,16
 10864f8:	1087d4c0 	call	1087d4c <_calloc_r>
 10864fc:	88801315 	stw	r2,76(r17)
 1086500:	103fec1e 	bne	r2,zero,10864b4 <_Balloc+0x24>
 1086504:	0005883a 	mov	r2,zero
 1086508:	003ff306 	br	10864d8 <_Balloc+0x48>
 108650c:	01400044 	movi	r5,1
 1086510:	2c24983a 	sll	r18,r5,r16
 1086514:	8809883a 	mov	r4,r17
 1086518:	91800144 	addi	r6,r18,5
 108651c:	318d883a 	add	r6,r6,r6
 1086520:	318d883a 	add	r6,r6,r6
 1086524:	1087d4c0 	call	1087d4c <_calloc_r>
 1086528:	103ff626 	beq	r2,zero,1086504 <_Balloc+0x74>
 108652c:	14000115 	stw	r16,4(r2)
 1086530:	14800215 	stw	r18,8(r2)
 1086534:	003fe606 	br	10864d0 <_Balloc+0x40>

01086538 <_Bfree>:
 1086538:	28000826 	beq	r5,zero,108655c <_Bfree+0x24>
 108653c:	28c00117 	ldw	r3,4(r5)
 1086540:	20801317 	ldw	r2,76(r4)
 1086544:	18c7883a 	add	r3,r3,r3
 1086548:	18c7883a 	add	r3,r3,r3
 108654c:	10c5883a 	add	r2,r2,r3
 1086550:	10c00017 	ldw	r3,0(r2)
 1086554:	28c00015 	stw	r3,0(r5)
 1086558:	11400015 	stw	r5,0(r2)
 108655c:	f800283a 	ret

01086560 <__multadd>:
 1086560:	defffa04 	addi	sp,sp,-24
 1086564:	dc000115 	stw	r16,4(sp)
 1086568:	2c000417 	ldw	r16,16(r5)
 108656c:	dc800315 	stw	r18,12(sp)
 1086570:	dc400215 	stw	r17,8(sp)
 1086574:	dfc00515 	stw	ra,20(sp)
 1086578:	dcc00415 	stw	r19,16(sp)
 108657c:	2823883a 	mov	r17,r5
 1086580:	2025883a 	mov	r18,r4
 1086584:	28c00504 	addi	r3,r5,20
 1086588:	0011883a 	mov	r8,zero
 108658c:	1a800017 	ldw	r10,0(r3)
 1086590:	18c00104 	addi	r3,r3,4
 1086594:	42000044 	addi	r8,r8,1
 1086598:	527fffcc 	andi	r9,r10,65535
 108659c:	4993383a 	mul	r9,r9,r6
 10865a0:	5014d43a 	srli	r10,r10,16
 10865a4:	49d3883a 	add	r9,r9,r7
 10865a8:	480ed43a 	srli	r7,r9,16
 10865ac:	5195383a 	mul	r10,r10,r6
 10865b0:	4a7fffcc 	andi	r9,r9,65535
 10865b4:	3a8f883a 	add	r7,r7,r10
 10865b8:	3814943a 	slli	r10,r7,16
 10865bc:	380ed43a 	srli	r7,r7,16
 10865c0:	5253883a 	add	r9,r10,r9
 10865c4:	1a7fff15 	stw	r9,-4(r3)
 10865c8:	443ff016 	blt	r8,r16,108658c <__multadd+0x2c>
 10865cc:	38000926 	beq	r7,zero,10865f4 <__multadd+0x94>
 10865d0:	88800217 	ldw	r2,8(r17)
 10865d4:	80800f0e 	bge	r16,r2,1086614 <__multadd+0xb4>
 10865d8:	80800144 	addi	r2,r16,5
 10865dc:	1085883a 	add	r2,r2,r2
 10865e0:	1085883a 	add	r2,r2,r2
 10865e4:	8885883a 	add	r2,r17,r2
 10865e8:	84000044 	addi	r16,r16,1
 10865ec:	11c00015 	stw	r7,0(r2)
 10865f0:	8c000415 	stw	r16,16(r17)
 10865f4:	8805883a 	mov	r2,r17
 10865f8:	dfc00517 	ldw	ra,20(sp)
 10865fc:	dcc00417 	ldw	r19,16(sp)
 1086600:	dc800317 	ldw	r18,12(sp)
 1086604:	dc400217 	ldw	r17,8(sp)
 1086608:	dc000117 	ldw	r16,4(sp)
 108660c:	dec00604 	addi	sp,sp,24
 1086610:	f800283a 	ret
 1086614:	89400117 	ldw	r5,4(r17)
 1086618:	9009883a 	mov	r4,r18
 108661c:	d9c00015 	stw	r7,0(sp)
 1086620:	29400044 	addi	r5,r5,1
 1086624:	10864900 	call	1086490 <_Balloc>
 1086628:	89800417 	ldw	r6,16(r17)
 108662c:	89400304 	addi	r5,r17,12
 1086630:	11000304 	addi	r4,r2,12
 1086634:	31800084 	addi	r6,r6,2
 1086638:	318d883a 	add	r6,r6,r6
 108663c:	318d883a 	add	r6,r6,r6
 1086640:	1027883a 	mov	r19,r2
 1086644:	10861940 	call	1086194 <memcpy>
 1086648:	88c00117 	ldw	r3,4(r17)
 108664c:	90801317 	ldw	r2,76(r18)
 1086650:	d9c00017 	ldw	r7,0(sp)
 1086654:	18c7883a 	add	r3,r3,r3
 1086658:	18c7883a 	add	r3,r3,r3
 108665c:	10c5883a 	add	r2,r2,r3
 1086660:	10c00017 	ldw	r3,0(r2)
 1086664:	88c00015 	stw	r3,0(r17)
 1086668:	14400015 	stw	r17,0(r2)
 108666c:	9823883a 	mov	r17,r19
 1086670:	003fd906 	br	10865d8 <__multadd+0x78>

01086674 <__s2b>:
 1086674:	defff904 	addi	sp,sp,-28
 1086678:	dd000415 	stw	r20,16(sp)
 108667c:	dc400115 	stw	r17,4(sp)
 1086680:	2829883a 	mov	r20,r5
 1086684:	2023883a 	mov	r17,r4
 1086688:	01400244 	movi	r5,9
 108668c:	39000204 	addi	r4,r7,8
 1086690:	dcc00315 	stw	r19,12(sp)
 1086694:	dc800215 	stw	r18,8(sp)
 1086698:	dfc00615 	stw	ra,24(sp)
 108669c:	dd400515 	stw	r21,20(sp)
 10866a0:	dc000015 	stw	r16,0(sp)
 10866a4:	3825883a 	mov	r18,r7
 10866a8:	3027883a 	mov	r19,r6
 10866ac:	10894fc0 	call	10894fc <__divsi3>
 10866b0:	00c00044 	movi	r3,1
 10866b4:	000b883a 	mov	r5,zero
 10866b8:	1880030e 	bge	r3,r2,10866c8 <__s2b+0x54>
 10866bc:	18c7883a 	add	r3,r3,r3
 10866c0:	29400044 	addi	r5,r5,1
 10866c4:	18bffd16 	blt	r3,r2,10866bc <__s2b+0x48>
 10866c8:	8809883a 	mov	r4,r17
 10866cc:	10864900 	call	1086490 <_Balloc>
 10866d0:	d8c00717 	ldw	r3,28(sp)
 10866d4:	10c00515 	stw	r3,20(r2)
 10866d8:	00c00044 	movi	r3,1
 10866dc:	10c00415 	stw	r3,16(r2)
 10866e0:	00c00244 	movi	r3,9
 10866e4:	1cc0210e 	bge	r3,r19,108676c <__s2b+0xf8>
 10866e8:	a0eb883a 	add	r21,r20,r3
 10866ec:	a821883a 	mov	r16,r21
 10866f0:	a4e9883a 	add	r20,r20,r19
 10866f4:	81c00007 	ldb	r7,0(r16)
 10866f8:	8809883a 	mov	r4,r17
 10866fc:	84000044 	addi	r16,r16,1
 1086700:	100b883a 	mov	r5,r2
 1086704:	01800284 	movi	r6,10
 1086708:	39fff404 	addi	r7,r7,-48
 108670c:	10865600 	call	1086560 <__multadd>
 1086710:	853ff81e 	bne	r16,r20,10866f4 <__s2b+0x80>
 1086714:	ace1883a 	add	r16,r21,r19
 1086718:	843ffe04 	addi	r16,r16,-8
 108671c:	9c800a0e 	bge	r19,r18,1086748 <__s2b+0xd4>
 1086720:	94e5c83a 	sub	r18,r18,r19
 1086724:	84a5883a 	add	r18,r16,r18
 1086728:	81c00007 	ldb	r7,0(r16)
 108672c:	8809883a 	mov	r4,r17
 1086730:	84000044 	addi	r16,r16,1
 1086734:	100b883a 	mov	r5,r2
 1086738:	01800284 	movi	r6,10
 108673c:	39fff404 	addi	r7,r7,-48
 1086740:	10865600 	call	1086560 <__multadd>
 1086744:	84bff81e 	bne	r16,r18,1086728 <__s2b+0xb4>
 1086748:	dfc00617 	ldw	ra,24(sp)
 108674c:	dd400517 	ldw	r21,20(sp)
 1086750:	dd000417 	ldw	r20,16(sp)
 1086754:	dcc00317 	ldw	r19,12(sp)
 1086758:	dc800217 	ldw	r18,8(sp)
 108675c:	dc400117 	ldw	r17,4(sp)
 1086760:	dc000017 	ldw	r16,0(sp)
 1086764:	dec00704 	addi	sp,sp,28
 1086768:	f800283a 	ret
 108676c:	a4000284 	addi	r16,r20,10
 1086770:	1827883a 	mov	r19,r3
 1086774:	003fe906 	br	108671c <__s2b+0xa8>

01086778 <__hi0bits>:
 1086778:	20bfffec 	andhi	r2,r4,65535
 108677c:	1000141e 	bne	r2,zero,10867d0 <__hi0bits+0x58>
 1086780:	2008943a 	slli	r4,r4,16
 1086784:	00800404 	movi	r2,16
 1086788:	20ffc02c 	andhi	r3,r4,65280
 108678c:	1800021e 	bne	r3,zero,1086798 <__hi0bits+0x20>
 1086790:	2008923a 	slli	r4,r4,8
 1086794:	10800204 	addi	r2,r2,8
 1086798:	20fc002c 	andhi	r3,r4,61440
 108679c:	1800021e 	bne	r3,zero,10867a8 <__hi0bits+0x30>
 10867a0:	2008913a 	slli	r4,r4,4
 10867a4:	10800104 	addi	r2,r2,4
 10867a8:	20f0002c 	andhi	r3,r4,49152
 10867ac:	1800031e 	bne	r3,zero,10867bc <__hi0bits+0x44>
 10867b0:	2109883a 	add	r4,r4,r4
 10867b4:	10800084 	addi	r2,r2,2
 10867b8:	2109883a 	add	r4,r4,r4
 10867bc:	20000316 	blt	r4,zero,10867cc <__hi0bits+0x54>
 10867c0:	2110002c 	andhi	r4,r4,16384
 10867c4:	2000041e 	bne	r4,zero,10867d8 <__hi0bits+0x60>
 10867c8:	00800804 	movi	r2,32
 10867cc:	f800283a 	ret
 10867d0:	0005883a 	mov	r2,zero
 10867d4:	003fec06 	br	1086788 <__hi0bits+0x10>
 10867d8:	10800044 	addi	r2,r2,1
 10867dc:	f800283a 	ret

010867e0 <__lo0bits>:
 10867e0:	20c00017 	ldw	r3,0(r4)
 10867e4:	188001cc 	andi	r2,r3,7
 10867e8:	10000826 	beq	r2,zero,108680c <__lo0bits+0x2c>
 10867ec:	1880004c 	andi	r2,r3,1
 10867f0:	1000211e 	bne	r2,zero,1086878 <__lo0bits+0x98>
 10867f4:	1880008c 	andi	r2,r3,2
 10867f8:	1000211e 	bne	r2,zero,1086880 <__lo0bits+0xa0>
 10867fc:	1806d0ba 	srli	r3,r3,2
 1086800:	00800084 	movi	r2,2
 1086804:	20c00015 	stw	r3,0(r4)
 1086808:	f800283a 	ret
 108680c:	18bfffcc 	andi	r2,r3,65535
 1086810:	10001326 	beq	r2,zero,1086860 <__lo0bits+0x80>
 1086814:	0005883a 	mov	r2,zero
 1086818:	19403fcc 	andi	r5,r3,255
 108681c:	2800021e 	bne	r5,zero,1086828 <__lo0bits+0x48>
 1086820:	1806d23a 	srli	r3,r3,8
 1086824:	10800204 	addi	r2,r2,8
 1086828:	194003cc 	andi	r5,r3,15
 108682c:	2800021e 	bne	r5,zero,1086838 <__lo0bits+0x58>
 1086830:	1806d13a 	srli	r3,r3,4
 1086834:	10800104 	addi	r2,r2,4
 1086838:	194000cc 	andi	r5,r3,3
 108683c:	2800021e 	bne	r5,zero,1086848 <__lo0bits+0x68>
 1086840:	1806d0ba 	srli	r3,r3,2
 1086844:	10800084 	addi	r2,r2,2
 1086848:	1940004c 	andi	r5,r3,1
 108684c:	2800081e 	bne	r5,zero,1086870 <__lo0bits+0x90>
 1086850:	1806d07a 	srli	r3,r3,1
 1086854:	1800051e 	bne	r3,zero,108686c <__lo0bits+0x8c>
 1086858:	00800804 	movi	r2,32
 108685c:	f800283a 	ret
 1086860:	1806d43a 	srli	r3,r3,16
 1086864:	00800404 	movi	r2,16
 1086868:	003feb06 	br	1086818 <__lo0bits+0x38>
 108686c:	10800044 	addi	r2,r2,1
 1086870:	20c00015 	stw	r3,0(r4)
 1086874:	f800283a 	ret
 1086878:	0005883a 	mov	r2,zero
 108687c:	f800283a 	ret
 1086880:	1806d07a 	srli	r3,r3,1
 1086884:	00800044 	movi	r2,1
 1086888:	20c00015 	stw	r3,0(r4)
 108688c:	f800283a 	ret

01086890 <__i2b>:
 1086890:	defffd04 	addi	sp,sp,-12
 1086894:	dc000015 	stw	r16,0(sp)
 1086898:	04000044 	movi	r16,1
 108689c:	dc400115 	stw	r17,4(sp)
 10868a0:	2823883a 	mov	r17,r5
 10868a4:	800b883a 	mov	r5,r16
 10868a8:	dfc00215 	stw	ra,8(sp)
 10868ac:	10864900 	call	1086490 <_Balloc>
 10868b0:	14400515 	stw	r17,20(r2)
 10868b4:	14000415 	stw	r16,16(r2)
 10868b8:	dfc00217 	ldw	ra,8(sp)
 10868bc:	dc400117 	ldw	r17,4(sp)
 10868c0:	dc000017 	ldw	r16,0(sp)
 10868c4:	dec00304 	addi	sp,sp,12
 10868c8:	f800283a 	ret

010868cc <__multiply>:
 10868cc:	defffa04 	addi	sp,sp,-24
 10868d0:	dcc00315 	stw	r19,12(sp)
 10868d4:	dc400115 	stw	r17,4(sp)
 10868d8:	34c00417 	ldw	r19,16(r6)
 10868dc:	2c400417 	ldw	r17,16(r5)
 10868e0:	dd000415 	stw	r20,16(sp)
 10868e4:	dc800215 	stw	r18,8(sp)
 10868e8:	dfc00515 	stw	ra,20(sp)
 10868ec:	dc000015 	stw	r16,0(sp)
 10868f0:	2825883a 	mov	r18,r5
 10868f4:	3029883a 	mov	r20,r6
 10868f8:	8cc0050e 	bge	r17,r19,1086910 <__multiply+0x44>
 10868fc:	8807883a 	mov	r3,r17
 1086900:	3025883a 	mov	r18,r6
 1086904:	9823883a 	mov	r17,r19
 1086908:	2829883a 	mov	r20,r5
 108690c:	1827883a 	mov	r19,r3
 1086910:	90800217 	ldw	r2,8(r18)
 1086914:	8ce1883a 	add	r16,r17,r19
 1086918:	91400117 	ldw	r5,4(r18)
 108691c:	1400010e 	bge	r2,r16,1086924 <__multiply+0x58>
 1086920:	29400044 	addi	r5,r5,1
 1086924:	10864900 	call	1086490 <_Balloc>
 1086928:	83c00144 	addi	r15,r16,5
 108692c:	7bdf883a 	add	r15,r15,r15
 1086930:	7bdf883a 	add	r15,r15,r15
 1086934:	13800504 	addi	r14,r2,20
 1086938:	13df883a 	add	r15,r2,r15
 108693c:	7007883a 	mov	r3,r14
 1086940:	73c0032e 	bgeu	r14,r15,1086950 <__multiply+0x84>
 1086944:	18000015 	stw	zero,0(r3)
 1086948:	18c00104 	addi	r3,r3,4
 108694c:	1bfffd36 	bltu	r3,r15,1086944 <__multiply+0x78>
 1086950:	99800144 	addi	r6,r19,5
 1086954:	8b000144 	addi	r12,r17,5
 1086958:	318d883a 	add	r6,r6,r6
 108695c:	6319883a 	add	r12,r12,r12
 1086960:	318d883a 	add	r6,r6,r6
 1086964:	6319883a 	add	r12,r12,r12
 1086968:	a3400504 	addi	r13,r20,20
 108696c:	a18d883a 	add	r6,r20,r6
 1086970:	94400504 	addi	r17,r18,20
 1086974:	9319883a 	add	r12,r18,r12
 1086978:	6980392e 	bgeu	r13,r6,1086a60 <__multiply+0x194>
 108697c:	6a800017 	ldw	r10,0(r13)
 1086980:	52ffffcc 	andi	r11,r10,65535
 1086984:	58001826 	beq	r11,zero,10869e8 <__multiply+0x11c>
 1086988:	7007883a 	mov	r3,r14
 108698c:	8809883a 	mov	r4,r17
 1086990:	000b883a 	mov	r5,zero
 1086994:	22400017 	ldw	r9,0(r4)
 1086998:	1a000017 	ldw	r8,0(r3)
 108699c:	21000104 	addi	r4,r4,4
 10869a0:	49ffffcc 	andi	r7,r9,65535
 10869a4:	3acf383a 	mul	r7,r7,r11
 10869a8:	4812d43a 	srli	r9,r9,16
 10869ac:	42bfffcc 	andi	r10,r8,65535
 10869b0:	3a8f883a 	add	r7,r7,r10
 10869b4:	394f883a 	add	r7,r7,r5
 10869b8:	4010d43a 	srli	r8,r8,16
 10869bc:	4acb383a 	mul	r5,r9,r11
 10869c0:	3814d43a 	srli	r10,r7,16
 10869c4:	19c0000d 	sth	r7,0(r3)
 10869c8:	2a0b883a 	add	r5,r5,r8
 10869cc:	2a8b883a 	add	r5,r5,r10
 10869d0:	1940008d 	sth	r5,2(r3)
 10869d4:	280ad43a 	srli	r5,r5,16
 10869d8:	18c00104 	addi	r3,r3,4
 10869dc:	233fed36 	bltu	r4,r12,1086994 <__multiply+0xc8>
 10869e0:	19400015 	stw	r5,0(r3)
 10869e4:	6a800017 	ldw	r10,0(r13)
 10869e8:	5014d43a 	srli	r10,r10,16
 10869ec:	50001926 	beq	r10,zero,1086a54 <__multiply+0x188>
 10869f0:	71400017 	ldw	r5,0(r14)
 10869f4:	7007883a 	mov	r3,r14
 10869f8:	8809883a 	mov	r4,r17
 10869fc:	280f883a 	mov	r7,r5
 1086a00:	0017883a 	mov	r11,zero
 1086a04:	22400017 	ldw	r9,0(r4)
 1086a08:	380ed43a 	srli	r7,r7,16
 1086a0c:	1940000d 	sth	r5,0(r3)
 1086a10:	4a3fffcc 	andi	r8,r9,65535
 1086a14:	4291383a 	mul	r8,r8,r10
 1086a18:	4812d43a 	srli	r9,r9,16
 1086a1c:	18c00104 	addi	r3,r3,4
 1086a20:	41d1883a 	add	r8,r8,r7
 1086a24:	19c00017 	ldw	r7,0(r3)
 1086a28:	42d1883a 	add	r8,r8,r11
 1086a2c:	4a93383a 	mul	r9,r9,r10
 1086a30:	1a3fff8d 	sth	r8,-2(r3)
 1086a34:	4010d43a 	srli	r8,r8,16
 1086a38:	397fffcc 	andi	r5,r7,65535
 1086a3c:	2a4b883a 	add	r5,r5,r9
 1086a40:	2a0b883a 	add	r5,r5,r8
 1086a44:	21000104 	addi	r4,r4,4
 1086a48:	2816d43a 	srli	r11,r5,16
 1086a4c:	233fed36 	bltu	r4,r12,1086a04 <__multiply+0x138>
 1086a50:	19400015 	stw	r5,0(r3)
 1086a54:	6b400104 	addi	r13,r13,4
 1086a58:	73800104 	addi	r14,r14,4
 1086a5c:	69bfc736 	bltu	r13,r6,108697c <__multiply+0xb0>
 1086a60:	0400090e 	bge	zero,r16,1086a88 <__multiply+0x1bc>
 1086a64:	78ffff17 	ldw	r3,-4(r15)
 1086a68:	7bffff04 	addi	r15,r15,-4
 1086a6c:	18000326 	beq	r3,zero,1086a7c <__multiply+0x1b0>
 1086a70:	00000506 	br	1086a88 <__multiply+0x1bc>
 1086a74:	78c00017 	ldw	r3,0(r15)
 1086a78:	1800031e 	bne	r3,zero,1086a88 <__multiply+0x1bc>
 1086a7c:	843fffc4 	addi	r16,r16,-1
 1086a80:	7bffff04 	addi	r15,r15,-4
 1086a84:	803ffb1e 	bne	r16,zero,1086a74 <__multiply+0x1a8>
 1086a88:	14000415 	stw	r16,16(r2)
 1086a8c:	dfc00517 	ldw	ra,20(sp)
 1086a90:	dd000417 	ldw	r20,16(sp)
 1086a94:	dcc00317 	ldw	r19,12(sp)
 1086a98:	dc800217 	ldw	r18,8(sp)
 1086a9c:	dc400117 	ldw	r17,4(sp)
 1086aa0:	dc000017 	ldw	r16,0(sp)
 1086aa4:	dec00604 	addi	sp,sp,24
 1086aa8:	f800283a 	ret

01086aac <__pow5mult>:
 1086aac:	defffb04 	addi	sp,sp,-20
 1086ab0:	dcc00315 	stw	r19,12(sp)
 1086ab4:	dc800215 	stw	r18,8(sp)
 1086ab8:	dc000015 	stw	r16,0(sp)
 1086abc:	dfc00415 	stw	ra,16(sp)
 1086ac0:	dc400115 	stw	r17,4(sp)
 1086ac4:	308000cc 	andi	r2,r6,3
 1086ac8:	3021883a 	mov	r16,r6
 1086acc:	2027883a 	mov	r19,r4
 1086ad0:	2825883a 	mov	r18,r5
 1086ad4:	10002e1e 	bne	r2,zero,1086b90 <__pow5mult+0xe4>
 1086ad8:	8021d0ba 	srai	r16,r16,2
 1086adc:	80001a26 	beq	r16,zero,1086b48 <__pow5mult+0x9c>
 1086ae0:	9c401217 	ldw	r17,72(r19)
 1086ae4:	8800061e 	bne	r17,zero,1086b00 <__pow5mult+0x54>
 1086ae8:	00003406 	br	1086bbc <__pow5mult+0x110>
 1086aec:	8021d07a 	srai	r16,r16,1
 1086af0:	80001526 	beq	r16,zero,1086b48 <__pow5mult+0x9c>
 1086af4:	88c00017 	ldw	r3,0(r17)
 1086af8:	18001b26 	beq	r3,zero,1086b68 <__pow5mult+0xbc>
 1086afc:	1823883a 	mov	r17,r3
 1086b00:	80c0004c 	andi	r3,r16,1
 1086b04:	183ff926 	beq	r3,zero,1086aec <__pow5mult+0x40>
 1086b08:	900b883a 	mov	r5,r18
 1086b0c:	880d883a 	mov	r6,r17
 1086b10:	9809883a 	mov	r4,r19
 1086b14:	10868cc0 	call	10868cc <__multiply>
 1086b18:	90001b26 	beq	r18,zero,1086b88 <__pow5mult+0xdc>
 1086b1c:	91000117 	ldw	r4,4(r18)
 1086b20:	98c01317 	ldw	r3,76(r19)
 1086b24:	8021d07a 	srai	r16,r16,1
 1086b28:	2109883a 	add	r4,r4,r4
 1086b2c:	2109883a 	add	r4,r4,r4
 1086b30:	1907883a 	add	r3,r3,r4
 1086b34:	19000017 	ldw	r4,0(r3)
 1086b38:	91000015 	stw	r4,0(r18)
 1086b3c:	1c800015 	stw	r18,0(r3)
 1086b40:	1025883a 	mov	r18,r2
 1086b44:	803feb1e 	bne	r16,zero,1086af4 <__pow5mult+0x48>
 1086b48:	9005883a 	mov	r2,r18
 1086b4c:	dfc00417 	ldw	ra,16(sp)
 1086b50:	dcc00317 	ldw	r19,12(sp)
 1086b54:	dc800217 	ldw	r18,8(sp)
 1086b58:	dc400117 	ldw	r17,4(sp)
 1086b5c:	dc000017 	ldw	r16,0(sp)
 1086b60:	dec00504 	addi	sp,sp,20
 1086b64:	f800283a 	ret
 1086b68:	880b883a 	mov	r5,r17
 1086b6c:	880d883a 	mov	r6,r17
 1086b70:	9809883a 	mov	r4,r19
 1086b74:	10868cc0 	call	10868cc <__multiply>
 1086b78:	88800015 	stw	r2,0(r17)
 1086b7c:	10000015 	stw	zero,0(r2)
 1086b80:	1023883a 	mov	r17,r2
 1086b84:	003fde06 	br	1086b00 <__pow5mult+0x54>
 1086b88:	1025883a 	mov	r18,r2
 1086b8c:	003fd706 	br	1086aec <__pow5mult+0x40>
 1086b90:	10bfffc4 	addi	r2,r2,-1
 1086b94:	1085883a 	add	r2,r2,r2
 1086b98:	00c04274 	movhi	r3,265
 1086b9c:	18f06104 	addi	r3,r3,-15996
 1086ba0:	1085883a 	add	r2,r2,r2
 1086ba4:	1885883a 	add	r2,r3,r2
 1086ba8:	11800017 	ldw	r6,0(r2)
 1086bac:	000f883a 	mov	r7,zero
 1086bb0:	10865600 	call	1086560 <__multadd>
 1086bb4:	1025883a 	mov	r18,r2
 1086bb8:	003fc706 	br	1086ad8 <__pow5mult+0x2c>
 1086bbc:	9809883a 	mov	r4,r19
 1086bc0:	01409c44 	movi	r5,625
 1086bc4:	10868900 	call	1086890 <__i2b>
 1086bc8:	98801215 	stw	r2,72(r19)
 1086bcc:	1023883a 	mov	r17,r2
 1086bd0:	10000015 	stw	zero,0(r2)
 1086bd4:	003fca06 	br	1086b00 <__pow5mult+0x54>

01086bd8 <__lshift>:
 1086bd8:	defff904 	addi	sp,sp,-28
 1086bdc:	dd400515 	stw	r21,20(sp)
 1086be0:	dc400115 	stw	r17,4(sp)
 1086be4:	2d400417 	ldw	r21,16(r5)
 1086be8:	3023d17a 	srai	r17,r6,5
 1086bec:	28800217 	ldw	r2,8(r5)
 1086bf0:	dd000415 	stw	r20,16(sp)
 1086bf4:	8d6b883a 	add	r21,r17,r21
 1086bf8:	dcc00315 	stw	r19,12(sp)
 1086bfc:	dc800215 	stw	r18,8(sp)
 1086c00:	dc000015 	stw	r16,0(sp)
 1086c04:	dfc00615 	stw	ra,24(sp)
 1086c08:	ac000044 	addi	r16,r21,1
 1086c0c:	2825883a 	mov	r18,r5
 1086c10:	3029883a 	mov	r20,r6
 1086c14:	2027883a 	mov	r19,r4
 1086c18:	29400117 	ldw	r5,4(r5)
 1086c1c:	1400030e 	bge	r2,r16,1086c2c <__lshift+0x54>
 1086c20:	1085883a 	add	r2,r2,r2
 1086c24:	29400044 	addi	r5,r5,1
 1086c28:	143ffd16 	blt	r2,r16,1086c20 <__lshift+0x48>
 1086c2c:	9809883a 	mov	r4,r19
 1086c30:	10864900 	call	1086490 <_Balloc>
 1086c34:	10c00504 	addi	r3,r2,20
 1086c38:	0440090e 	bge	zero,r17,1086c60 <__lshift+0x88>
 1086c3c:	000f883a 	mov	r7,zero
 1086c40:	18000015 	stw	zero,0(r3)
 1086c44:	39c00044 	addi	r7,r7,1
 1086c48:	18c00104 	addi	r3,r3,4
 1086c4c:	3c7ffc1e 	bne	r7,r17,1086c40 <__lshift+0x68>
 1086c50:	38c00144 	addi	r3,r7,5
 1086c54:	18c7883a 	add	r3,r3,r3
 1086c58:	18c7883a 	add	r3,r3,r3
 1086c5c:	10c7883a 	add	r3,r2,r3
 1086c60:	92000417 	ldw	r8,16(r18)
 1086c64:	a18007cc 	andi	r6,r20,31
 1086c68:	91c00504 	addi	r7,r18,20
 1086c6c:	42000144 	addi	r8,r8,5
 1086c70:	4211883a 	add	r8,r8,r8
 1086c74:	4211883a 	add	r8,r8,r8
 1086c78:	9211883a 	add	r8,r18,r8
 1086c7c:	30002226 	beq	r6,zero,1086d08 <__lshift+0x130>
 1086c80:	02800804 	movi	r10,32
 1086c84:	5195c83a 	sub	r10,r10,r6
 1086c88:	000b883a 	mov	r5,zero
 1086c8c:	3a400017 	ldw	r9,0(r7)
 1086c90:	18c00104 	addi	r3,r3,4
 1086c94:	39c00104 	addi	r7,r7,4
 1086c98:	4992983a 	sll	r9,r9,r6
 1086c9c:	2a4ab03a 	or	r5,r5,r9
 1086ca0:	197fff15 	stw	r5,-4(r3)
 1086ca4:	397fff17 	ldw	r5,-4(r7)
 1086ca8:	2a8ad83a 	srl	r5,r5,r10
 1086cac:	3a3ff736 	bltu	r7,r8,1086c8c <__lshift+0xb4>
 1086cb0:	19400015 	stw	r5,0(r3)
 1086cb4:	28000126 	beq	r5,zero,1086cbc <__lshift+0xe4>
 1086cb8:	ac000084 	addi	r16,r21,2
 1086cbc:	91000117 	ldw	r4,4(r18)
 1086cc0:	98c01317 	ldw	r3,76(r19)
 1086cc4:	843fffc4 	addi	r16,r16,-1
 1086cc8:	2109883a 	add	r4,r4,r4
 1086ccc:	2109883a 	add	r4,r4,r4
 1086cd0:	1907883a 	add	r3,r3,r4
 1086cd4:	19000017 	ldw	r4,0(r3)
 1086cd8:	14000415 	stw	r16,16(r2)
 1086cdc:	91000015 	stw	r4,0(r18)
 1086ce0:	1c800015 	stw	r18,0(r3)
 1086ce4:	dfc00617 	ldw	ra,24(sp)
 1086ce8:	dd400517 	ldw	r21,20(sp)
 1086cec:	dd000417 	ldw	r20,16(sp)
 1086cf0:	dcc00317 	ldw	r19,12(sp)
 1086cf4:	dc800217 	ldw	r18,8(sp)
 1086cf8:	dc400117 	ldw	r17,4(sp)
 1086cfc:	dc000017 	ldw	r16,0(sp)
 1086d00:	dec00704 	addi	sp,sp,28
 1086d04:	f800283a 	ret
 1086d08:	39400017 	ldw	r5,0(r7)
 1086d0c:	18c00104 	addi	r3,r3,4
 1086d10:	39c00104 	addi	r7,r7,4
 1086d14:	197fff15 	stw	r5,-4(r3)
 1086d18:	3a3fe82e 	bgeu	r7,r8,1086cbc <__lshift+0xe4>
 1086d1c:	39400017 	ldw	r5,0(r7)
 1086d20:	18c00104 	addi	r3,r3,4
 1086d24:	39c00104 	addi	r7,r7,4
 1086d28:	197fff15 	stw	r5,-4(r3)
 1086d2c:	3a3ff636 	bltu	r7,r8,1086d08 <__lshift+0x130>
 1086d30:	003fe206 	br	1086cbc <__lshift+0xe4>

01086d34 <__mcmp>:
 1086d34:	20800417 	ldw	r2,16(r4)
 1086d38:	28c00417 	ldw	r3,16(r5)
 1086d3c:	10c5c83a 	sub	r2,r2,r3
 1086d40:	10000f1e 	bne	r2,zero,1086d80 <__mcmp+0x4c>
 1086d44:	18c00144 	addi	r3,r3,5
 1086d48:	18c7883a 	add	r3,r3,r3
 1086d4c:	18c7883a 	add	r3,r3,r3
 1086d50:	21c00504 	addi	r7,r4,20
 1086d54:	28cb883a 	add	r5,r5,r3
 1086d58:	20c9883a 	add	r4,r4,r3
 1086d5c:	213fff04 	addi	r4,r4,-4
 1086d60:	297fff04 	addi	r5,r5,-4
 1086d64:	21800017 	ldw	r6,0(r4)
 1086d68:	28c00017 	ldw	r3,0(r5)
 1086d6c:	30c0021e 	bne	r6,r3,1086d78 <__mcmp+0x44>
 1086d70:	393ffa36 	bltu	r7,r4,1086d5c <__mcmp+0x28>
 1086d74:	f800283a 	ret
 1086d78:	30c00236 	bltu	r6,r3,1086d84 <__mcmp+0x50>
 1086d7c:	00800044 	movi	r2,1
 1086d80:	f800283a 	ret
 1086d84:	00bfffc4 	movi	r2,-1
 1086d88:	f800283a 	ret

01086d8c <__mdiff>:
 1086d8c:	defffb04 	addi	sp,sp,-20
 1086d90:	dc000015 	stw	r16,0(sp)
 1086d94:	2821883a 	mov	r16,r5
 1086d98:	dc800215 	stw	r18,8(sp)
 1086d9c:	300b883a 	mov	r5,r6
 1086da0:	2025883a 	mov	r18,r4
 1086da4:	8009883a 	mov	r4,r16
 1086da8:	dc400115 	stw	r17,4(sp)
 1086dac:	dfc00415 	stw	ra,16(sp)
 1086db0:	dcc00315 	stw	r19,12(sp)
 1086db4:	3023883a 	mov	r17,r6
 1086db8:	1086d340 	call	1086d34 <__mcmp>
 1086dbc:	10005026 	beq	r2,zero,1086f00 <__mdiff+0x174>
 1086dc0:	10004a16 	blt	r2,zero,1086eec <__mdiff+0x160>
 1086dc4:	0027883a 	mov	r19,zero
 1086dc8:	81400117 	ldw	r5,4(r16)
 1086dcc:	9009883a 	mov	r4,r18
 1086dd0:	10864900 	call	1086490 <_Balloc>
 1086dd4:	82400417 	ldw	r9,16(r16)
 1086dd8:	89800417 	ldw	r6,16(r17)
 1086ddc:	14c00315 	stw	r19,12(r2)
 1086de0:	4b800144 	addi	r14,r9,5
 1086de4:	31800144 	addi	r6,r6,5
 1086de8:	739d883a 	add	r14,r14,r14
 1086dec:	318d883a 	add	r6,r6,r6
 1086df0:	739d883a 	add	r14,r14,r14
 1086df4:	318d883a 	add	r6,r6,r6
 1086df8:	81c00504 	addi	r7,r16,20
 1086dfc:	839d883a 	add	r14,r16,r14
 1086e00:	8a000504 	addi	r8,r17,20
 1086e04:	898d883a 	add	r6,r17,r6
 1086e08:	10c00504 	addi	r3,r2,20
 1086e0c:	0009883a 	mov	r4,zero
 1086e10:	3b000017 	ldw	r12,0(r7)
 1086e14:	42c00017 	ldw	r11,0(r8)
 1086e18:	42000104 	addi	r8,r8,4
 1086e1c:	62bfffcc 	andi	r10,r12,65535
 1086e20:	5b7fffcc 	andi	r13,r11,65535
 1086e24:	5109883a 	add	r4,r10,r4
 1086e28:	2355c83a 	sub	r10,r4,r13
 1086e2c:	5816d43a 	srli	r11,r11,16
 1086e30:	6008d43a 	srli	r4,r12,16
 1086e34:	501bd43a 	srai	r13,r10,16
 1086e38:	1a80000d 	sth	r10,0(r3)
 1086e3c:	22c9c83a 	sub	r4,r4,r11
 1086e40:	2349883a 	add	r4,r4,r13
 1086e44:	1900008d 	sth	r4,2(r3)
 1086e48:	39c00104 	addi	r7,r7,4
 1086e4c:	2009d43a 	srai	r4,r4,16
 1086e50:	18c00104 	addi	r3,r3,4
 1086e54:	41bfee36 	bltu	r8,r6,1086e10 <__mdiff+0x84>
 1086e58:	180b883a 	mov	r5,r3
 1086e5c:	3815883a 	mov	r10,r7
 1086e60:	3b80132e 	bgeu	r7,r14,1086eb0 <__mdiff+0x124>
 1086e64:	3a000017 	ldw	r8,0(r7)
 1086e68:	18c00104 	addi	r3,r3,4
 1086e6c:	39c00104 	addi	r7,r7,4
 1086e70:	41bfffcc 	andi	r6,r8,65535
 1086e74:	310d883a 	add	r6,r6,r4
 1086e78:	3009d43a 	srai	r4,r6,16
 1086e7c:	4010d43a 	srli	r8,r8,16
 1086e80:	19bfff0d 	sth	r6,-4(r3)
 1086e84:	2209883a 	add	r4,r4,r8
 1086e88:	193fff8d 	sth	r4,-2(r3)
 1086e8c:	2009d43a 	srai	r4,r4,16
 1086e90:	3bbff436 	bltu	r7,r14,1086e64 <__mdiff+0xd8>
 1086e94:	0286303a 	nor	r3,zero,r10
 1086e98:	1b87883a 	add	r3,r3,r14
 1086e9c:	1806d0ba 	srli	r3,r3,2
 1086ea0:	18c00044 	addi	r3,r3,1
 1086ea4:	18c7883a 	add	r3,r3,r3
 1086ea8:	18c7883a 	add	r3,r3,r3
 1086eac:	28c7883a 	add	r3,r5,r3
 1086eb0:	193fff17 	ldw	r4,-4(r3)
 1086eb4:	18ffff04 	addi	r3,r3,-4
 1086eb8:	2000041e 	bne	r4,zero,1086ecc <__mdiff+0x140>
 1086ebc:	18ffff04 	addi	r3,r3,-4
 1086ec0:	19000017 	ldw	r4,0(r3)
 1086ec4:	4a7fffc4 	addi	r9,r9,-1
 1086ec8:	203ffc26 	beq	r4,zero,1086ebc <__mdiff+0x130>
 1086ecc:	12400415 	stw	r9,16(r2)
 1086ed0:	dfc00417 	ldw	ra,16(sp)
 1086ed4:	dcc00317 	ldw	r19,12(sp)
 1086ed8:	dc800217 	ldw	r18,8(sp)
 1086edc:	dc400117 	ldw	r17,4(sp)
 1086ee0:	dc000017 	ldw	r16,0(sp)
 1086ee4:	dec00504 	addi	sp,sp,20
 1086ee8:	f800283a 	ret
 1086eec:	8005883a 	mov	r2,r16
 1086ef0:	04c00044 	movi	r19,1
 1086ef4:	8821883a 	mov	r16,r17
 1086ef8:	1023883a 	mov	r17,r2
 1086efc:	003fb206 	br	1086dc8 <__mdiff+0x3c>
 1086f00:	9009883a 	mov	r4,r18
 1086f04:	000b883a 	mov	r5,zero
 1086f08:	10864900 	call	1086490 <_Balloc>
 1086f0c:	00c00044 	movi	r3,1
 1086f10:	10c00415 	stw	r3,16(r2)
 1086f14:	10000515 	stw	zero,20(r2)
 1086f18:	dfc00417 	ldw	ra,16(sp)
 1086f1c:	dcc00317 	ldw	r19,12(sp)
 1086f20:	dc800217 	ldw	r18,8(sp)
 1086f24:	dc400117 	ldw	r17,4(sp)
 1086f28:	dc000017 	ldw	r16,0(sp)
 1086f2c:	dec00504 	addi	sp,sp,20
 1086f30:	f800283a 	ret

01086f34 <__ulp>:
 1086f34:	295ffc2c 	andhi	r5,r5,32752
 1086f38:	00bf3034 	movhi	r2,64704
 1086f3c:	2887883a 	add	r3,r5,r2
 1086f40:	00c0020e 	bge	zero,r3,1086f4c <__ulp+0x18>
 1086f44:	0005883a 	mov	r2,zero
 1086f48:	f800283a 	ret
 1086f4c:	00c7c83a 	sub	r3,zero,r3
 1086f50:	1805d53a 	srai	r2,r3,20
 1086f54:	00c004c4 	movi	r3,19
 1086f58:	18800a0e 	bge	r3,r2,1086f84 <__ulp+0x50>
 1086f5c:	01000c84 	movi	r4,50
 1086f60:	0007883a 	mov	r3,zero
 1086f64:	20800516 	blt	r4,r2,1086f7c <__ulp+0x48>
 1086f68:	01000cc4 	movi	r4,51
 1086f6c:	2085c83a 	sub	r2,r4,r2
 1086f70:	01000044 	movi	r4,1
 1086f74:	2084983a 	sll	r2,r4,r2
 1086f78:	f800283a 	ret
 1086f7c:	00800044 	movi	r2,1
 1086f80:	f800283a 	ret
 1086f84:	00c00234 	movhi	r3,8
 1086f88:	1887d83a 	sra	r3,r3,r2
 1086f8c:	0005883a 	mov	r2,zero
 1086f90:	f800283a 	ret

01086f94 <__b2d>:
 1086f94:	defffa04 	addi	sp,sp,-24
 1086f98:	dc000015 	stw	r16,0(sp)
 1086f9c:	24000417 	ldw	r16,16(r4)
 1086fa0:	dc400115 	stw	r17,4(sp)
 1086fa4:	dcc00315 	stw	r19,12(sp)
 1086fa8:	84000144 	addi	r16,r16,5
 1086fac:	8421883a 	add	r16,r16,r16
 1086fb0:	8421883a 	add	r16,r16,r16
 1086fb4:	2421883a 	add	r16,r4,r16
 1086fb8:	847fff17 	ldw	r17,-4(r16)
 1086fbc:	24c00504 	addi	r19,r4,20
 1086fc0:	dd000415 	stw	r20,16(sp)
 1086fc4:	8809883a 	mov	r4,r17
 1086fc8:	dc800215 	stw	r18,8(sp)
 1086fcc:	2829883a 	mov	r20,r5
 1086fd0:	dfc00515 	stw	ra,20(sp)
 1086fd4:	10867780 	call	1086778 <__hi0bits>
 1086fd8:	00c00804 	movi	r3,32
 1086fdc:	1887c83a 	sub	r3,r3,r2
 1086fe0:	a0c00015 	stw	r3,0(r20)
 1086fe4:	00c00284 	movi	r3,10
 1086fe8:	84bfff04 	addi	r18,r16,-4
 1086fec:	18801216 	blt	r3,r2,1087038 <__b2d+0xa4>
 1086ff0:	010002c4 	movi	r4,11
 1086ff4:	2089c83a 	sub	r4,r4,r2
 1086ff8:	8906d83a 	srl	r3,r17,r4
 1086ffc:	18cffc34 	orhi	r3,r3,16368
 1087000:	9c80322e 	bgeu	r19,r18,10870cc <__b2d+0x138>
 1087004:	817ffe17 	ldw	r5,-8(r16)
 1087008:	2908d83a 	srl	r4,r5,r4
 108700c:	10800544 	addi	r2,r2,21
 1087010:	88a2983a 	sll	r17,r17,r2
 1087014:	2444b03a 	or	r2,r4,r17
 1087018:	dfc00517 	ldw	ra,20(sp)
 108701c:	dd000417 	ldw	r20,16(sp)
 1087020:	dcc00317 	ldw	r19,12(sp)
 1087024:	dc800217 	ldw	r18,8(sp)
 1087028:	dc400117 	ldw	r17,4(sp)
 108702c:	dc000017 	ldw	r16,0(sp)
 1087030:	dec00604 	addi	sp,sp,24
 1087034:	f800283a 	ret
 1087038:	9c801636 	bltu	r19,r18,1087094 <__b2d+0x100>
 108703c:	113ffd44 	addi	r4,r2,-11
 1087040:	000b883a 	mov	r5,zero
 1087044:	20001726 	beq	r4,zero,10870a4 <__b2d+0x110>
 1087048:	00c00ac4 	movi	r3,43
 108704c:	1885c83a 	sub	r2,r3,r2
 1087050:	8906983a 	sll	r3,r17,r4
 1087054:	288cd83a 	srl	r6,r5,r2
 1087058:	18cffc34 	orhi	r3,r3,16368
 108705c:	1986b03a 	or	r3,r3,r6
 1087060:	9c801c2e 	bgeu	r19,r18,10870d4 <__b2d+0x140>
 1087064:	91bfff17 	ldw	r6,-4(r18)
 1087068:	3084d83a 	srl	r2,r6,r2
 108706c:	2908983a 	sll	r4,r5,r4
 1087070:	1104b03a 	or	r2,r2,r4
 1087074:	dfc00517 	ldw	ra,20(sp)
 1087078:	dd000417 	ldw	r20,16(sp)
 108707c:	dcc00317 	ldw	r19,12(sp)
 1087080:	dc800217 	ldw	r18,8(sp)
 1087084:	dc400117 	ldw	r17,4(sp)
 1087088:	dc000017 	ldw	r16,0(sp)
 108708c:	dec00604 	addi	sp,sp,24
 1087090:	f800283a 	ret
 1087094:	113ffd44 	addi	r4,r2,-11
 1087098:	84bffe04 	addi	r18,r16,-8
 108709c:	817ffe17 	ldw	r5,-8(r16)
 10870a0:	203fe91e 	bne	r4,zero,1087048 <__b2d+0xb4>
 10870a4:	88cffc34 	orhi	r3,r17,16368
 10870a8:	2805883a 	mov	r2,r5
 10870ac:	dfc00517 	ldw	ra,20(sp)
 10870b0:	dd000417 	ldw	r20,16(sp)
 10870b4:	dcc00317 	ldw	r19,12(sp)
 10870b8:	dc800217 	ldw	r18,8(sp)
 10870bc:	dc400117 	ldw	r17,4(sp)
 10870c0:	dc000017 	ldw	r16,0(sp)
 10870c4:	dec00604 	addi	sp,sp,24
 10870c8:	f800283a 	ret
 10870cc:	0009883a 	mov	r4,zero
 10870d0:	003fce06 	br	108700c <__b2d+0x78>
 10870d4:	0005883a 	mov	r2,zero
 10870d8:	003fe406 	br	108706c <__b2d+0xd8>

010870dc <__d2b>:
 10870dc:	defff804 	addi	sp,sp,-32
 10870e0:	dc400315 	stw	r17,12(sp)
 10870e4:	3023883a 	mov	r17,r6
 10870e8:	dc800415 	stw	r18,16(sp)
 10870ec:	8824907a 	slli	r18,r17,1
 10870f0:	dcc00515 	stw	r19,20(sp)
 10870f4:	2827883a 	mov	r19,r5
 10870f8:	9024d57a 	srli	r18,r18,21
 10870fc:	01400044 	movi	r5,1
 1087100:	dd000615 	stw	r20,24(sp)
 1087104:	dc000215 	stw	r16,8(sp)
 1087108:	dfc00715 	stw	ra,28(sp)
 108710c:	3829883a 	mov	r20,r7
 1087110:	10864900 	call	1086490 <_Balloc>
 1087114:	1021883a 	mov	r16,r2
 1087118:	00800434 	movhi	r2,16
 108711c:	10bfffc4 	addi	r2,r2,-1
 1087120:	88a2703a 	and	r17,r17,r2
 1087124:	90000126 	beq	r18,zero,108712c <__d2b+0x50>
 1087128:	8c400434 	orhi	r17,r17,16
 108712c:	dc400015 	stw	r17,0(sp)
 1087130:	98002226 	beq	r19,zero,10871bc <__d2b+0xe0>
 1087134:	d9000104 	addi	r4,sp,4
 1087138:	dcc00115 	stw	r19,4(sp)
 108713c:	10867e00 	call	10867e0 <__lo0bits>
 1087140:	d8c00017 	ldw	r3,0(sp)
 1087144:	10002d1e 	bne	r2,zero,10871fc <__d2b+0x120>
 1087148:	d9000117 	ldw	r4,4(sp)
 108714c:	81000515 	stw	r4,20(r16)
 1087150:	1823003a 	cmpeq	r17,r3,zero
 1087154:	01000084 	movi	r4,2
 1087158:	2463c83a 	sub	r17,r4,r17
 108715c:	80c00615 	stw	r3,24(r16)
 1087160:	84400415 	stw	r17,16(r16)
 1087164:	90001d1e 	bne	r18,zero,10871dc <__d2b+0x100>
 1087168:	88c00104 	addi	r3,r17,4
 108716c:	18c7883a 	add	r3,r3,r3
 1087170:	18c7883a 	add	r3,r3,r3
 1087174:	80c7883a 	add	r3,r16,r3
 1087178:	19000017 	ldw	r4,0(r3)
 108717c:	10bef384 	addi	r2,r2,-1074
 1087180:	a0800015 	stw	r2,0(r20)
 1087184:	10867780 	call	1086778 <__hi0bits>
 1087188:	8822917a 	slli	r17,r17,5
 108718c:	d8c00817 	ldw	r3,32(sp)
 1087190:	8885c83a 	sub	r2,r17,r2
 1087194:	18800015 	stw	r2,0(r3)
 1087198:	8005883a 	mov	r2,r16
 108719c:	dfc00717 	ldw	ra,28(sp)
 10871a0:	dd000617 	ldw	r20,24(sp)
 10871a4:	dcc00517 	ldw	r19,20(sp)
 10871a8:	dc800417 	ldw	r18,16(sp)
 10871ac:	dc400317 	ldw	r17,12(sp)
 10871b0:	dc000217 	ldw	r16,8(sp)
 10871b4:	dec00804 	addi	sp,sp,32
 10871b8:	f800283a 	ret
 10871bc:	d809883a 	mov	r4,sp
 10871c0:	10867e00 	call	10867e0 <__lo0bits>
 10871c4:	d8c00017 	ldw	r3,0(sp)
 10871c8:	04400044 	movi	r17,1
 10871cc:	84400415 	stw	r17,16(r16)
 10871d0:	80c00515 	stw	r3,20(r16)
 10871d4:	10800804 	addi	r2,r2,32
 10871d8:	903fe326 	beq	r18,zero,1087168 <__d2b+0x8c>
 10871dc:	00c00d44 	movi	r3,53
 10871e0:	94bef344 	addi	r18,r18,-1075
 10871e4:	90a5883a 	add	r18,r18,r2
 10871e8:	1885c83a 	sub	r2,r3,r2
 10871ec:	d8c00817 	ldw	r3,32(sp)
 10871f0:	a4800015 	stw	r18,0(r20)
 10871f4:	18800015 	stw	r2,0(r3)
 10871f8:	003fe706 	br	1087198 <__d2b+0xbc>
 10871fc:	01000804 	movi	r4,32
 1087200:	2089c83a 	sub	r4,r4,r2
 1087204:	1908983a 	sll	r4,r3,r4
 1087208:	d9400117 	ldw	r5,4(sp)
 108720c:	1886d83a 	srl	r3,r3,r2
 1087210:	2148b03a 	or	r4,r4,r5
 1087214:	81000515 	stw	r4,20(r16)
 1087218:	d8c00015 	stw	r3,0(sp)
 108721c:	003fcc06 	br	1087150 <__d2b+0x74>

01087220 <__ratio>:
 1087220:	defff904 	addi	sp,sp,-28
 1087224:	dc400315 	stw	r17,12(sp)
 1087228:	2823883a 	mov	r17,r5
 108722c:	d9400104 	addi	r5,sp,4
 1087230:	dfc00615 	stw	ra,24(sp)
 1087234:	dcc00515 	stw	r19,20(sp)
 1087238:	dc800415 	stw	r18,16(sp)
 108723c:	2027883a 	mov	r19,r4
 1087240:	dc000215 	stw	r16,8(sp)
 1087244:	1086f940 	call	1086f94 <__b2d>
 1087248:	8809883a 	mov	r4,r17
 108724c:	d80b883a 	mov	r5,sp
 1087250:	1025883a 	mov	r18,r2
 1087254:	1821883a 	mov	r16,r3
 1087258:	1086f940 	call	1086f94 <__b2d>
 108725c:	99400417 	ldw	r5,16(r19)
 1087260:	89000417 	ldw	r4,16(r17)
 1087264:	d9800117 	ldw	r6,4(sp)
 1087268:	2909c83a 	sub	r4,r5,r4
 108726c:	d9400017 	ldw	r5,0(sp)
 1087270:	2008917a 	slli	r4,r4,5
 1087274:	314bc83a 	sub	r5,r6,r5
 1087278:	290b883a 	add	r5,r5,r4
 108727c:	01400e0e 	bge	zero,r5,10872b8 <__ratio+0x98>
 1087280:	280a953a 	slli	r5,r5,20
 1087284:	2c21883a 	add	r16,r5,r16
 1087288:	9009883a 	mov	r4,r18
 108728c:	800b883a 	mov	r5,r16
 1087290:	100d883a 	mov	r6,r2
 1087294:	180f883a 	mov	r7,r3
 1087298:	108069c0 	call	108069c <__divdf3>
 108729c:	dfc00617 	ldw	ra,24(sp)
 10872a0:	dcc00517 	ldw	r19,20(sp)
 10872a4:	dc800417 	ldw	r18,16(sp)
 10872a8:	dc400317 	ldw	r17,12(sp)
 10872ac:	dc000217 	ldw	r16,8(sp)
 10872b0:	dec00704 	addi	sp,sp,28
 10872b4:	f800283a 	ret
 10872b8:	280a953a 	slli	r5,r5,20
 10872bc:	1947c83a 	sub	r3,r3,r5
 10872c0:	003ff106 	br	1087288 <__ratio+0x68>

010872c4 <_mprec_log10>:
 10872c4:	defffe04 	addi	sp,sp,-8
 10872c8:	dc000015 	stw	r16,0(sp)
 10872cc:	dfc00115 	stw	ra,4(sp)
 10872d0:	008005c4 	movi	r2,23
 10872d4:	2021883a 	mov	r16,r4
 10872d8:	11000d0e 	bge	r2,r4,1087310 <_mprec_log10+0x4c>
 10872dc:	0005883a 	mov	r2,zero
 10872e0:	00cffc34 	movhi	r3,16368
 10872e4:	843fffc4 	addi	r16,r16,-1
 10872e8:	1009883a 	mov	r4,r2
 10872ec:	180b883a 	mov	r5,r3
 10872f0:	000d883a 	mov	r6,zero
 10872f4:	01d00934 	movhi	r7,16420
 10872f8:	10803b80 	call	10803b8 <__muldf3>
 10872fc:	803ff91e 	bne	r16,zero,10872e4 <_mprec_log10+0x20>
 1087300:	dfc00117 	ldw	ra,4(sp)
 1087304:	dc000017 	ldw	r16,0(sp)
 1087308:	dec00204 	addi	sp,sp,8
 108730c:	f800283a 	ret
 1087310:	202090fa 	slli	r16,r4,3
 1087314:	00804274 	movhi	r2,265
 1087318:	10b02f04 	addi	r2,r2,-16196
 108731c:	1421883a 	add	r16,r2,r16
 1087320:	80800017 	ldw	r2,0(r16)
 1087324:	80c00117 	ldw	r3,4(r16)
 1087328:	dfc00117 	ldw	ra,4(sp)
 108732c:	dc000017 	ldw	r16,0(sp)
 1087330:	dec00204 	addi	sp,sp,8
 1087334:	f800283a 	ret

01087338 <__copybits>:
 1087338:	297fffc4 	addi	r5,r5,-1
 108733c:	31c00417 	ldw	r7,16(r6)
 1087340:	2811d17a 	srai	r8,r5,5
 1087344:	30800504 	addi	r2,r6,20
 1087348:	39c00144 	addi	r7,r7,5
 108734c:	42000044 	addi	r8,r8,1
 1087350:	39cf883a 	add	r7,r7,r7
 1087354:	4211883a 	add	r8,r8,r8
 1087358:	39cf883a 	add	r7,r7,r7
 108735c:	4211883a 	add	r8,r8,r8
 1087360:	31cf883a 	add	r7,r6,r7
 1087364:	2211883a 	add	r8,r4,r8
 1087368:	11c00d2e 	bgeu	r2,r7,10873a0 <__copybits+0x68>
 108736c:	2007883a 	mov	r3,r4
 1087370:	11400017 	ldw	r5,0(r2)
 1087374:	18c00104 	addi	r3,r3,4
 1087378:	10800104 	addi	r2,r2,4
 108737c:	197fff15 	stw	r5,-4(r3)
 1087380:	11fffb36 	bltu	r2,r7,1087370 <__copybits+0x38>
 1087384:	3985c83a 	sub	r2,r7,r6
 1087388:	10bffac4 	addi	r2,r2,-21
 108738c:	1004d0ba 	srli	r2,r2,2
 1087390:	10800044 	addi	r2,r2,1
 1087394:	1085883a 	add	r2,r2,r2
 1087398:	1085883a 	add	r2,r2,r2
 108739c:	2089883a 	add	r4,r4,r2
 10873a0:	2200032e 	bgeu	r4,r8,10873b0 <__copybits+0x78>
 10873a4:	20000015 	stw	zero,0(r4)
 10873a8:	21000104 	addi	r4,r4,4
 10873ac:	223ffd36 	bltu	r4,r8,10873a4 <__copybits+0x6c>
 10873b0:	f800283a 	ret

010873b4 <__any_on>:
 10873b4:	21800417 	ldw	r6,16(r4)
 10873b8:	2805d17a 	srai	r2,r5,5
 10873bc:	20c00504 	addi	r3,r4,20
 10873c0:	30800f0e 	bge	r6,r2,1087400 <__any_on+0x4c>
 10873c4:	3005883a 	mov	r2,r6
 10873c8:	10800144 	addi	r2,r2,5
 10873cc:	1085883a 	add	r2,r2,r2
 10873d0:	1085883a 	add	r2,r2,r2
 10873d4:	2089883a 	add	r4,r4,r2
 10873d8:	1900152e 	bgeu	r3,r4,1087430 <__any_on+0x7c>
 10873dc:	20bfff17 	ldw	r2,-4(r4)
 10873e0:	213fff04 	addi	r4,r4,-4
 10873e4:	1000041e 	bne	r2,zero,10873f8 <__any_on+0x44>
 10873e8:	1900112e 	bgeu	r3,r4,1087430 <__any_on+0x7c>
 10873ec:	213fff04 	addi	r4,r4,-4
 10873f0:	20800017 	ldw	r2,0(r4)
 10873f4:	103ffc26 	beq	r2,zero,10873e8 <__any_on+0x34>
 10873f8:	00800044 	movi	r2,1
 10873fc:	f800283a 	ret
 1087400:	11bff10e 	bge	r2,r6,10873c8 <__any_on+0x14>
 1087404:	294007cc 	andi	r5,r5,31
 1087408:	283fef26 	beq	r5,zero,10873c8 <__any_on+0x14>
 108740c:	11800144 	addi	r6,r2,5
 1087410:	318d883a 	add	r6,r6,r6
 1087414:	318d883a 	add	r6,r6,r6
 1087418:	218d883a 	add	r6,r4,r6
 108741c:	31800017 	ldw	r6,0(r6)
 1087420:	314ed83a 	srl	r7,r6,r5
 1087424:	394a983a 	sll	r5,r7,r5
 1087428:	29bff31e 	bne	r5,r6,10873f8 <__any_on+0x44>
 108742c:	003fe606 	br	10873c8 <__any_on+0x14>
 1087430:	0005883a 	mov	r2,zero
 1087434:	f800283a 	ret

01087438 <_realloc_r>:
 1087438:	defff504 	addi	sp,sp,-44
 108743c:	dd400615 	stw	r21,24(sp)
 1087440:	dc800315 	stw	r18,12(sp)
 1087444:	dc000115 	stw	r16,4(sp)
 1087448:	dfc00a15 	stw	ra,40(sp)
 108744c:	df000915 	stw	fp,36(sp)
 1087450:	ddc00815 	stw	r23,32(sp)
 1087454:	dd800715 	stw	r22,28(sp)
 1087458:	dd000515 	stw	r20,20(sp)
 108745c:	dcc00415 	stw	r19,16(sp)
 1087460:	dc400215 	stw	r17,8(sp)
 1087464:	2821883a 	mov	r16,r5
 1087468:	202b883a 	mov	r21,r4
 108746c:	3025883a 	mov	r18,r6
 1087470:	28009626 	beq	r5,zero,10876cc <_realloc_r+0x294>
 1087474:	1089c3c0 	call	1089c3c <__malloc_lock>
 1087478:	80bfff17 	ldw	r2,-4(r16)
 108747c:	04ffff04 	movi	r19,-4
 1087480:	90c002c4 	addi	r3,r18,11
 1087484:	01000584 	movi	r4,22
 1087488:	85bffe04 	addi	r22,r16,-8
 108748c:	14e6703a 	and	r19,r2,r19
 1087490:	20c0372e 	bgeu	r4,r3,1087570 <_realloc_r+0x138>
 1087494:	047ffe04 	movi	r17,-8
 1087498:	1c62703a 	and	r17,r3,r17
 108749c:	8807883a 	mov	r3,r17
 10874a0:	88005a16 	blt	r17,zero,108760c <_realloc_r+0x1d4>
 10874a4:	8c805936 	bltu	r17,r18,108760c <_realloc_r+0x1d4>
 10874a8:	98c0340e 	bge	r19,r3,108757c <_realloc_r+0x144>
 10874ac:	07004274 	movhi	fp,265
 10874b0:	e7317204 	addi	fp,fp,-14904
 10874b4:	e1400217 	ldw	r5,8(fp)
 10874b8:	b4c9883a 	add	r4,r22,r19
 10874bc:	29009026 	beq	r5,r4,1087700 <_realloc_r+0x2c8>
 10874c0:	21800117 	ldw	r6,4(r4)
 10874c4:	01ffff84 	movi	r7,-2
 10874c8:	31ce703a 	and	r7,r6,r7
 10874cc:	21cf883a 	add	r7,r4,r7
 10874d0:	39c00117 	ldw	r7,4(r7)
 10874d4:	39c0004c 	andi	r7,r7,1
 10874d8:	38004326 	beq	r7,zero,10875e8 <_realloc_r+0x1b0>
 10874dc:	000d883a 	mov	r6,zero
 10874e0:	0009883a 	mov	r4,zero
 10874e4:	1080004c 	andi	r2,r2,1
 10874e8:	10005a1e 	bne	r2,zero,1087654 <_realloc_r+0x21c>
 10874ec:	85fffe17 	ldw	r23,-8(r16)
 10874f0:	00bfff04 	movi	r2,-4
 10874f4:	b5efc83a 	sub	r23,r22,r23
 10874f8:	b9c00117 	ldw	r7,4(r23)
 10874fc:	388e703a 	and	r7,r7,r2
 1087500:	3ccf883a 	add	r7,r7,r19
 1087504:	20005226 	beq	r4,zero,1087650 <_realloc_r+0x218>
 1087508:	31e9883a 	add	r20,r6,r7
 108750c:	2140c726 	beq	r4,r5,108782c <_realloc_r+0x3f4>
 1087510:	a0c04f16 	blt	r20,r3,1087650 <_realloc_r+0x218>
 1087514:	20800317 	ldw	r2,12(r4)
 1087518:	20c00217 	ldw	r3,8(r4)
 108751c:	99bfff04 	addi	r6,r19,-4
 1087520:	01000904 	movi	r4,36
 1087524:	18800315 	stw	r2,12(r3)
 1087528:	10c00215 	stw	r3,8(r2)
 108752c:	b8c00217 	ldw	r3,8(r23)
 1087530:	b8800317 	ldw	r2,12(r23)
 1087534:	bc800204 	addi	r18,r23,8
 1087538:	18800315 	stw	r2,12(r3)
 108753c:	10c00215 	stw	r3,8(r2)
 1087540:	2180ed36 	bltu	r4,r6,10878f8 <_realloc_r+0x4c0>
 1087544:	008004c4 	movi	r2,19
 1087548:	11809b2e 	bgeu	r2,r6,10877b8 <_realloc_r+0x380>
 108754c:	80800017 	ldw	r2,0(r16)
 1087550:	b8800215 	stw	r2,8(r23)
 1087554:	80800117 	ldw	r2,4(r16)
 1087558:	b8800315 	stw	r2,12(r23)
 108755c:	008006c4 	movi	r2,27
 1087560:	1180f936 	bltu	r2,r6,1087948 <_realloc_r+0x510>
 1087564:	b8800404 	addi	r2,r23,16
 1087568:	80c00204 	addi	r3,r16,8
 108756c:	00009406 	br	10877c0 <_realloc_r+0x388>
 1087570:	00c00404 	movi	r3,16
 1087574:	1823883a 	mov	r17,r3
 1087578:	003fca06 	br	10874a4 <_realloc_r+0x6c>
 108757c:	9829883a 	mov	r20,r19
 1087580:	a447c83a 	sub	r3,r20,r17
 1087584:	010003c4 	movi	r4,15
 1087588:	1080004c 	andi	r2,r2,1
 108758c:	20c02336 	bltu	r4,r3,108761c <_realloc_r+0x1e4>
 1087590:	1504b03a 	or	r2,r2,r20
 1087594:	b0800115 	stw	r2,4(r22)
 1087598:	b52d883a 	add	r22,r22,r20
 108759c:	b0800117 	ldw	r2,4(r22)
 10875a0:	10800054 	ori	r2,r2,1
 10875a4:	b0800115 	stw	r2,4(r22)
 10875a8:	a809883a 	mov	r4,r21
 10875ac:	1089c5c0 	call	1089c5c <__malloc_unlock>
 10875b0:	8025883a 	mov	r18,r16
 10875b4:	9005883a 	mov	r2,r18
 10875b8:	dfc00a17 	ldw	ra,40(sp)
 10875bc:	df000917 	ldw	fp,36(sp)
 10875c0:	ddc00817 	ldw	r23,32(sp)
 10875c4:	dd800717 	ldw	r22,28(sp)
 10875c8:	dd400617 	ldw	r21,24(sp)
 10875cc:	dd000517 	ldw	r20,20(sp)
 10875d0:	dcc00417 	ldw	r19,16(sp)
 10875d4:	dc800317 	ldw	r18,12(sp)
 10875d8:	dc400217 	ldw	r17,8(sp)
 10875dc:	dc000117 	ldw	r16,4(sp)
 10875e0:	dec00b04 	addi	sp,sp,44
 10875e4:	f800283a 	ret
 10875e8:	01ffff04 	movi	r7,-4
 10875ec:	31cc703a 	and	r6,r6,r7
 10875f0:	34e9883a 	add	r20,r6,r19
 10875f4:	a0ffbb16 	blt	r20,r3,10874e4 <_realloc_r+0xac>
 10875f8:	20c00317 	ldw	r3,12(r4)
 10875fc:	21000217 	ldw	r4,8(r4)
 1087600:	20c00315 	stw	r3,12(r4)
 1087604:	19000215 	stw	r4,8(r3)
 1087608:	003fdd06 	br	1087580 <_realloc_r+0x148>
 108760c:	00800304 	movi	r2,12
 1087610:	a8800015 	stw	r2,0(r21)
 1087614:	0025883a 	mov	r18,zero
 1087618:	003fe606 	br	10875b4 <_realloc_r+0x17c>
 108761c:	1444b03a 	or	r2,r2,r17
 1087620:	b0800115 	stw	r2,4(r22)
 1087624:	b44b883a 	add	r5,r22,r17
 1087628:	18800054 	ori	r2,r3,1
 108762c:	28800115 	stw	r2,4(r5)
 1087630:	28c7883a 	add	r3,r5,r3
 1087634:	18800117 	ldw	r2,4(r3)
 1087638:	a809883a 	mov	r4,r21
 108763c:	29400204 	addi	r5,r5,8
 1087640:	10800054 	ori	r2,r2,1
 1087644:	18800115 	stw	r2,4(r3)
 1087648:	1084d800 	call	1084d80 <_free_r>
 108764c:	003fd606 	br	10875a8 <_realloc_r+0x170>
 1087650:	38c0330e 	bge	r7,r3,1087720 <_realloc_r+0x2e8>
 1087654:	900b883a 	mov	r5,r18
 1087658:	a809883a 	mov	r4,r21
 108765c:	10859180 	call	1085918 <_malloc_r>
 1087660:	1025883a 	mov	r18,r2
 1087664:	10001626 	beq	r2,zero,10876c0 <_realloc_r+0x288>
 1087668:	80bfff17 	ldw	r2,-4(r16)
 108766c:	00ffff84 	movi	r3,-2
 1087670:	913ffe04 	addi	r4,r18,-8
 1087674:	10c6703a 	and	r3,r2,r3
 1087678:	b0c7883a 	add	r3,r22,r3
 108767c:	20c09926 	beq	r4,r3,10878e4 <_realloc_r+0x4ac>
 1087680:	99bfff04 	addi	r6,r19,-4
 1087684:	00800904 	movi	r2,36
 1087688:	11806436 	bltu	r2,r6,108781c <_realloc_r+0x3e4>
 108768c:	00c004c4 	movi	r3,19
 1087690:	19804036 	bltu	r3,r6,1087794 <_realloc_r+0x35c>
 1087694:	9005883a 	mov	r2,r18
 1087698:	8007883a 	mov	r3,r16
 108769c:	19000017 	ldw	r4,0(r3)
 10876a0:	11000015 	stw	r4,0(r2)
 10876a4:	19000117 	ldw	r4,4(r3)
 10876a8:	11000115 	stw	r4,4(r2)
 10876ac:	18c00217 	ldw	r3,8(r3)
 10876b0:	10c00215 	stw	r3,8(r2)
 10876b4:	a809883a 	mov	r4,r21
 10876b8:	800b883a 	mov	r5,r16
 10876bc:	1084d800 	call	1084d80 <_free_r>
 10876c0:	a809883a 	mov	r4,r21
 10876c4:	1089c5c0 	call	1089c5c <__malloc_unlock>
 10876c8:	003fba06 	br	10875b4 <_realloc_r+0x17c>
 10876cc:	300b883a 	mov	r5,r6
 10876d0:	dfc00a17 	ldw	ra,40(sp)
 10876d4:	df000917 	ldw	fp,36(sp)
 10876d8:	ddc00817 	ldw	r23,32(sp)
 10876dc:	dd800717 	ldw	r22,28(sp)
 10876e0:	dd400617 	ldw	r21,24(sp)
 10876e4:	dd000517 	ldw	r20,20(sp)
 10876e8:	dcc00417 	ldw	r19,16(sp)
 10876ec:	dc800317 	ldw	r18,12(sp)
 10876f0:	dc400217 	ldw	r17,8(sp)
 10876f4:	dc000117 	ldw	r16,4(sp)
 10876f8:	dec00b04 	addi	sp,sp,44
 10876fc:	10859181 	jmpi	1085918 <_malloc_r>
 1087700:	29800117 	ldw	r6,4(r5)
 1087704:	013fff04 	movi	r4,-4
 1087708:	89c00404 	addi	r7,r17,16
 108770c:	310c703a 	and	r6,r6,r4
 1087710:	34c9883a 	add	r4,r6,r19
 1087714:	21c0340e 	bge	r4,r7,10877e8 <_realloc_r+0x3b0>
 1087718:	2809883a 	mov	r4,r5
 108771c:	003f7106 	br	10874e4 <_realloc_r+0xac>
 1087720:	b8800317 	ldw	r2,12(r23)
 1087724:	b8c00217 	ldw	r3,8(r23)
 1087728:	99bfff04 	addi	r6,r19,-4
 108772c:	01000904 	movi	r4,36
 1087730:	18800315 	stw	r2,12(r3)
 1087734:	10c00215 	stw	r3,8(r2)
 1087738:	bc800204 	addi	r18,r23,8
 108773c:	21807836 	bltu	r4,r6,1087920 <_realloc_r+0x4e8>
 1087740:	008004c4 	movi	r2,19
 1087744:	1180732e 	bgeu	r2,r6,1087914 <_realloc_r+0x4dc>
 1087748:	80800017 	ldw	r2,0(r16)
 108774c:	b8800215 	stw	r2,8(r23)
 1087750:	80800117 	ldw	r2,4(r16)
 1087754:	b8800315 	stw	r2,12(r23)
 1087758:	008006c4 	movi	r2,27
 108775c:	11808936 	bltu	r2,r6,1087984 <_realloc_r+0x54c>
 1087760:	b8800404 	addi	r2,r23,16
 1087764:	80c00204 	addi	r3,r16,8
 1087768:	19000017 	ldw	r4,0(r3)
 108776c:	9021883a 	mov	r16,r18
 1087770:	3829883a 	mov	r20,r7
 1087774:	11000015 	stw	r4,0(r2)
 1087778:	19000117 	ldw	r4,4(r3)
 108777c:	b82d883a 	mov	r22,r23
 1087780:	11000115 	stw	r4,4(r2)
 1087784:	18c00217 	ldw	r3,8(r3)
 1087788:	10c00215 	stw	r3,8(r2)
 108778c:	b8800117 	ldw	r2,4(r23)
 1087790:	003f7b06 	br	1087580 <_realloc_r+0x148>
 1087794:	80c00017 	ldw	r3,0(r16)
 1087798:	90c00015 	stw	r3,0(r18)
 108779c:	80c00117 	ldw	r3,4(r16)
 10877a0:	90c00115 	stw	r3,4(r18)
 10877a4:	00c006c4 	movi	r3,27
 10877a8:	19804636 	bltu	r3,r6,10878c4 <_realloc_r+0x48c>
 10877ac:	90800204 	addi	r2,r18,8
 10877b0:	80c00204 	addi	r3,r16,8
 10877b4:	003fb906 	br	108769c <_realloc_r+0x264>
 10877b8:	9005883a 	mov	r2,r18
 10877bc:	8007883a 	mov	r3,r16
 10877c0:	19000017 	ldw	r4,0(r3)
 10877c4:	9021883a 	mov	r16,r18
 10877c8:	b82d883a 	mov	r22,r23
 10877cc:	11000015 	stw	r4,0(r2)
 10877d0:	19000117 	ldw	r4,4(r3)
 10877d4:	11000115 	stw	r4,4(r2)
 10877d8:	18c00217 	ldw	r3,8(r3)
 10877dc:	10c00215 	stw	r3,8(r2)
 10877e0:	b8800117 	ldw	r2,4(r23)
 10877e4:	003f6606 	br	1087580 <_realloc_r+0x148>
 10877e8:	2445c83a 	sub	r2,r4,r17
 10877ec:	b46d883a 	add	r22,r22,r17
 10877f0:	10800054 	ori	r2,r2,1
 10877f4:	b0800115 	stw	r2,4(r22)
 10877f8:	80bfff17 	ldw	r2,-4(r16)
 10877fc:	a809883a 	mov	r4,r21
 1087800:	e5800215 	stw	r22,8(fp)
 1087804:	1080004c 	andi	r2,r2,1
 1087808:	88a2b03a 	or	r17,r17,r2
 108780c:	847fff15 	stw	r17,-4(r16)
 1087810:	1089c5c0 	call	1089c5c <__malloc_unlock>
 1087814:	8025883a 	mov	r18,r16
 1087818:	003f6606 	br	10875b4 <_realloc_r+0x17c>
 108781c:	9009883a 	mov	r4,r18
 1087820:	800b883a 	mov	r5,r16
 1087824:	108628c0 	call	108628c <memmove>
 1087828:	003fa206 	br	10876b4 <_realloc_r+0x27c>
 108782c:	88800404 	addi	r2,r17,16
 1087830:	a0bf8716 	blt	r20,r2,1087650 <_realloc_r+0x218>
 1087834:	b8800317 	ldw	r2,12(r23)
 1087838:	b8c00217 	ldw	r3,8(r23)
 108783c:	99bfff04 	addi	r6,r19,-4
 1087840:	01000904 	movi	r4,36
 1087844:	18800315 	stw	r2,12(r3)
 1087848:	10c00215 	stw	r3,8(r2)
 108784c:	bc800204 	addi	r18,r23,8
 1087850:	21806536 	bltu	r4,r6,10879e8 <_realloc_r+0x5b0>
 1087854:	008004c4 	movi	r2,19
 1087858:	1180592e 	bgeu	r2,r6,10879c0 <_realloc_r+0x588>
 108785c:	80800017 	ldw	r2,0(r16)
 1087860:	b8800215 	stw	r2,8(r23)
 1087864:	80800117 	ldw	r2,4(r16)
 1087868:	b8800315 	stw	r2,12(r23)
 108786c:	008006c4 	movi	r2,27
 1087870:	11806136 	bltu	r2,r6,10879f8 <_realloc_r+0x5c0>
 1087874:	b8800404 	addi	r2,r23,16
 1087878:	80c00204 	addi	r3,r16,8
 108787c:	19000017 	ldw	r4,0(r3)
 1087880:	11000015 	stw	r4,0(r2)
 1087884:	19000117 	ldw	r4,4(r3)
 1087888:	11000115 	stw	r4,4(r2)
 108788c:	18c00217 	ldw	r3,8(r3)
 1087890:	10c00215 	stw	r3,8(r2)
 1087894:	a447c83a 	sub	r3,r20,r17
 1087898:	bc45883a 	add	r2,r23,r17
 108789c:	18c00054 	ori	r3,r3,1
 10878a0:	10c00115 	stw	r3,4(r2)
 10878a4:	b8c00117 	ldw	r3,4(r23)
 10878a8:	e0800215 	stw	r2,8(fp)
 10878ac:	a809883a 	mov	r4,r21
 10878b0:	1880004c 	andi	r2,r3,1
 10878b4:	88a2b03a 	or	r17,r17,r2
 10878b8:	bc400115 	stw	r17,4(r23)
 10878bc:	1089c5c0 	call	1089c5c <__malloc_unlock>
 10878c0:	003f3c06 	br	10875b4 <_realloc_r+0x17c>
 10878c4:	80c00217 	ldw	r3,8(r16)
 10878c8:	90c00215 	stw	r3,8(r18)
 10878cc:	80c00317 	ldw	r3,12(r16)
 10878d0:	90c00315 	stw	r3,12(r18)
 10878d4:	30802426 	beq	r6,r2,1087968 <_realloc_r+0x530>
 10878d8:	90800404 	addi	r2,r18,16
 10878dc:	80c00404 	addi	r3,r16,16
 10878e0:	003f6e06 	br	108769c <_realloc_r+0x264>
 10878e4:	953fff17 	ldw	r20,-4(r18)
 10878e8:	00ffff04 	movi	r3,-4
 10878ec:	a0e8703a 	and	r20,r20,r3
 10878f0:	a4e9883a 	add	r20,r20,r19
 10878f4:	003f2206 	br	1087580 <_realloc_r+0x148>
 10878f8:	800b883a 	mov	r5,r16
 10878fc:	9009883a 	mov	r4,r18
 1087900:	108628c0 	call	108628c <memmove>
 1087904:	9021883a 	mov	r16,r18
 1087908:	b8800117 	ldw	r2,4(r23)
 108790c:	b82d883a 	mov	r22,r23
 1087910:	003f1b06 	br	1087580 <_realloc_r+0x148>
 1087914:	9005883a 	mov	r2,r18
 1087918:	8007883a 	mov	r3,r16
 108791c:	003f9206 	br	1087768 <_realloc_r+0x330>
 1087920:	800b883a 	mov	r5,r16
 1087924:	9009883a 	mov	r4,r18
 1087928:	d9c00015 	stw	r7,0(sp)
 108792c:	108628c0 	call	108628c <memmove>
 1087930:	d9c00017 	ldw	r7,0(sp)
 1087934:	9021883a 	mov	r16,r18
 1087938:	b8800117 	ldw	r2,4(r23)
 108793c:	3829883a 	mov	r20,r7
 1087940:	b82d883a 	mov	r22,r23
 1087944:	003f0e06 	br	1087580 <_realloc_r+0x148>
 1087948:	80800217 	ldw	r2,8(r16)
 108794c:	b8800415 	stw	r2,16(r23)
 1087950:	80800317 	ldw	r2,12(r16)
 1087954:	b8800515 	stw	r2,20(r23)
 1087958:	31001226 	beq	r6,r4,10879a4 <_realloc_r+0x56c>
 108795c:	b8800604 	addi	r2,r23,24
 1087960:	80c00404 	addi	r3,r16,16
 1087964:	003f9606 	br	10877c0 <_realloc_r+0x388>
 1087968:	81000417 	ldw	r4,16(r16)
 108796c:	90800604 	addi	r2,r18,24
 1087970:	80c00604 	addi	r3,r16,24
 1087974:	91000415 	stw	r4,16(r18)
 1087978:	81000517 	ldw	r4,20(r16)
 108797c:	91000515 	stw	r4,20(r18)
 1087980:	003f4606 	br	108769c <_realloc_r+0x264>
 1087984:	80800217 	ldw	r2,8(r16)
 1087988:	b8800415 	stw	r2,16(r23)
 108798c:	80800317 	ldw	r2,12(r16)
 1087990:	b8800515 	stw	r2,20(r23)
 1087994:	31000d26 	beq	r6,r4,10879cc <_realloc_r+0x594>
 1087998:	b8800604 	addi	r2,r23,24
 108799c:	80c00404 	addi	r3,r16,16
 10879a0:	003f7106 	br	1087768 <_realloc_r+0x330>
 10879a4:	81000417 	ldw	r4,16(r16)
 10879a8:	b8800804 	addi	r2,r23,32
 10879ac:	80c00604 	addi	r3,r16,24
 10879b0:	b9000615 	stw	r4,24(r23)
 10879b4:	81000517 	ldw	r4,20(r16)
 10879b8:	b9000715 	stw	r4,28(r23)
 10879bc:	003f8006 	br	10877c0 <_realloc_r+0x388>
 10879c0:	9005883a 	mov	r2,r18
 10879c4:	8007883a 	mov	r3,r16
 10879c8:	003fac06 	br	108787c <_realloc_r+0x444>
 10879cc:	81000417 	ldw	r4,16(r16)
 10879d0:	b8800804 	addi	r2,r23,32
 10879d4:	80c00604 	addi	r3,r16,24
 10879d8:	b9000615 	stw	r4,24(r23)
 10879dc:	81000517 	ldw	r4,20(r16)
 10879e0:	b9000715 	stw	r4,28(r23)
 10879e4:	003f6006 	br	1087768 <_realloc_r+0x330>
 10879e8:	9009883a 	mov	r4,r18
 10879ec:	800b883a 	mov	r5,r16
 10879f0:	108628c0 	call	108628c <memmove>
 10879f4:	003fa706 	br	1087894 <_realloc_r+0x45c>
 10879f8:	80800217 	ldw	r2,8(r16)
 10879fc:	b8800415 	stw	r2,16(r23)
 1087a00:	80800317 	ldw	r2,12(r16)
 1087a04:	b8800515 	stw	r2,20(r23)
 1087a08:	31000326 	beq	r6,r4,1087a18 <_realloc_r+0x5e0>
 1087a0c:	b8800604 	addi	r2,r23,24
 1087a10:	80c00404 	addi	r3,r16,16
 1087a14:	003f9906 	br	108787c <_realloc_r+0x444>
 1087a18:	81000417 	ldw	r4,16(r16)
 1087a1c:	b8800804 	addi	r2,r23,32
 1087a20:	80c00604 	addi	r3,r16,24
 1087a24:	b9000615 	stw	r4,24(r23)
 1087a28:	81000517 	ldw	r4,20(r16)
 1087a2c:	b9000715 	stw	r4,28(r23)
 1087a30:	003f9206 	br	108787c <_realloc_r+0x444>

01087a34 <__isinfd>:
 1087a34:	0105c83a 	sub	r2,zero,r4
 1087a38:	1108b03a 	or	r4,r2,r4
 1087a3c:	2004d7fa 	srli	r2,r4,31
 1087a40:	00e00034 	movhi	r3,32768
 1087a44:	18ffffc4 	addi	r3,r3,-1
 1087a48:	28ca703a 	and	r5,r5,r3
 1087a4c:	1144b03a 	or	r2,r2,r5
 1087a50:	00dffc34 	movhi	r3,32752
 1087a54:	1885c83a 	sub	r2,r3,r2
 1087a58:	0087c83a 	sub	r3,zero,r2
 1087a5c:	1884b03a 	or	r2,r3,r2
 1087a60:	1005d7fa 	srai	r2,r2,31
 1087a64:	10800044 	addi	r2,r2,1
 1087a68:	f800283a 	ret

01087a6c <__isnand>:
 1087a6c:	0105c83a 	sub	r2,zero,r4
 1087a70:	1108b03a 	or	r4,r2,r4
 1087a74:	2004d7fa 	srli	r2,r4,31
 1087a78:	00e00034 	movhi	r3,32768
 1087a7c:	18ffffc4 	addi	r3,r3,-1
 1087a80:	28ca703a 	and	r5,r5,r3
 1087a84:	1144b03a 	or	r2,r2,r5
 1087a88:	00dffc34 	movhi	r3,32752
 1087a8c:	1885c83a 	sub	r2,r3,r2
 1087a90:	1004d7fa 	srli	r2,r2,31
 1087a94:	f800283a 	ret

01087a98 <_sbrk_r>:
 1087a98:	defffd04 	addi	sp,sp,-12
 1087a9c:	dc400115 	stw	r17,4(sp)
 1087aa0:	dc000015 	stw	r16,0(sp)
 1087aa4:	2023883a 	mov	r17,r4
 1087aa8:	04004274 	movhi	r16,265
 1087aac:	843da104 	addi	r16,r16,-2428
 1087ab0:	2809883a 	mov	r4,r5
 1087ab4:	dfc00215 	stw	ra,8(sp)
 1087ab8:	80000015 	stw	zero,0(r16)
 1087abc:	1089e1c0 	call	1089e1c <sbrk>
 1087ac0:	00ffffc4 	movi	r3,-1
 1087ac4:	10c00526 	beq	r2,r3,1087adc <_sbrk_r+0x44>
 1087ac8:	dfc00217 	ldw	ra,8(sp)
 1087acc:	dc400117 	ldw	r17,4(sp)
 1087ad0:	dc000017 	ldw	r16,0(sp)
 1087ad4:	dec00304 	addi	sp,sp,12
 1087ad8:	f800283a 	ret
 1087adc:	80c00017 	ldw	r3,0(r16)
 1087ae0:	183ff926 	beq	r3,zero,1087ac8 <_sbrk_r+0x30>
 1087ae4:	88c00015 	stw	r3,0(r17)
 1087ae8:	dfc00217 	ldw	ra,8(sp)
 1087aec:	dc400117 	ldw	r17,4(sp)
 1087af0:	dc000017 	ldw	r16,0(sp)
 1087af4:	dec00304 	addi	sp,sp,12
 1087af8:	f800283a 	ret

01087afc <__sread>:
 1087afc:	defffe04 	addi	sp,sp,-8
 1087b00:	dc000015 	stw	r16,0(sp)
 1087b04:	2821883a 	mov	r16,r5
 1087b08:	2940038f 	ldh	r5,14(r5)
 1087b0c:	dfc00115 	stw	ra,4(sp)
 1087b10:	10880f40 	call	10880f4 <_read_r>
 1087b14:	10000716 	blt	r2,zero,1087b34 <__sread+0x38>
 1087b18:	80c01417 	ldw	r3,80(r16)
 1087b1c:	1887883a 	add	r3,r3,r2
 1087b20:	80c01415 	stw	r3,80(r16)
 1087b24:	dfc00117 	ldw	ra,4(sp)
 1087b28:	dc000017 	ldw	r16,0(sp)
 1087b2c:	dec00204 	addi	sp,sp,8
 1087b30:	f800283a 	ret
 1087b34:	80c0030b 	ldhu	r3,12(r16)
 1087b38:	18fbffcc 	andi	r3,r3,61439
 1087b3c:	80c0030d 	sth	r3,12(r16)
 1087b40:	dfc00117 	ldw	ra,4(sp)
 1087b44:	dc000017 	ldw	r16,0(sp)
 1087b48:	dec00204 	addi	sp,sp,8
 1087b4c:	f800283a 	ret

01087b50 <__swrite>:
 1087b50:	2880030b 	ldhu	r2,12(r5)
 1087b54:	defffb04 	addi	sp,sp,-20
 1087b58:	dcc00315 	stw	r19,12(sp)
 1087b5c:	10c0400c 	andi	r3,r2,256
 1087b60:	18ffffcc 	andi	r3,r3,65535
 1087b64:	18e0001c 	xori	r3,r3,32768
 1087b68:	dc800215 	stw	r18,8(sp)
 1087b6c:	dc400115 	stw	r17,4(sp)
 1087b70:	dc000015 	stw	r16,0(sp)
 1087b74:	dfc00415 	stw	ra,16(sp)
 1087b78:	18e00004 	addi	r3,r3,-32768
 1087b7c:	2821883a 	mov	r16,r5
 1087b80:	2027883a 	mov	r19,r4
 1087b84:	3025883a 	mov	r18,r6
 1087b88:	3823883a 	mov	r17,r7
 1087b8c:	18000526 	beq	r3,zero,1087ba4 <__swrite+0x54>
 1087b90:	2940038f 	ldh	r5,14(r5)
 1087b94:	000d883a 	mov	r6,zero
 1087b98:	01c00084 	movi	r7,2
 1087b9c:	10880880 	call	1088088 <_lseek_r>
 1087ba0:	8080030b 	ldhu	r2,12(r16)
 1087ba4:	8140038f 	ldh	r5,14(r16)
 1087ba8:	10bbffcc 	andi	r2,r2,61439
 1087bac:	9809883a 	mov	r4,r19
 1087bb0:	900d883a 	mov	r6,r18
 1087bb4:	880f883a 	mov	r7,r17
 1087bb8:	8080030d 	sth	r2,12(r16)
 1087bbc:	dfc00417 	ldw	ra,16(sp)
 1087bc0:	dcc00317 	ldw	r19,12(sp)
 1087bc4:	dc800217 	ldw	r18,8(sp)
 1087bc8:	dc400117 	ldw	r17,4(sp)
 1087bcc:	dc000017 	ldw	r16,0(sp)
 1087bd0:	dec00504 	addi	sp,sp,20
 1087bd4:	1087ce01 	jmpi	1087ce0 <_write_r>

01087bd8 <__sseek>:
 1087bd8:	defffe04 	addi	sp,sp,-8
 1087bdc:	dc000015 	stw	r16,0(sp)
 1087be0:	2821883a 	mov	r16,r5
 1087be4:	2940038f 	ldh	r5,14(r5)
 1087be8:	dfc00115 	stw	ra,4(sp)
 1087bec:	10880880 	call	1088088 <_lseek_r>
 1087bf0:	00ffffc4 	movi	r3,-1
 1087bf4:	10c00826 	beq	r2,r3,1087c18 <__sseek+0x40>
 1087bf8:	80c0030b 	ldhu	r3,12(r16)
 1087bfc:	80801415 	stw	r2,80(r16)
 1087c00:	18c40014 	ori	r3,r3,4096
 1087c04:	80c0030d 	sth	r3,12(r16)
 1087c08:	dfc00117 	ldw	ra,4(sp)
 1087c0c:	dc000017 	ldw	r16,0(sp)
 1087c10:	dec00204 	addi	sp,sp,8
 1087c14:	f800283a 	ret
 1087c18:	80c0030b 	ldhu	r3,12(r16)
 1087c1c:	18fbffcc 	andi	r3,r3,61439
 1087c20:	80c0030d 	sth	r3,12(r16)
 1087c24:	dfc00117 	ldw	ra,4(sp)
 1087c28:	dc000017 	ldw	r16,0(sp)
 1087c2c:	dec00204 	addi	sp,sp,8
 1087c30:	f800283a 	ret

01087c34 <__sclose>:
 1087c34:	2940038f 	ldh	r5,14(r5)
 1087c38:	1087e081 	jmpi	1087e08 <_close_r>

01087c3c <strcmp>:
 1087c3c:	2904b03a 	or	r2,r5,r4
 1087c40:	108000cc 	andi	r2,r2,3
 1087c44:	1000171e 	bne	r2,zero,1087ca4 <strcmp+0x68>
 1087c48:	20800017 	ldw	r2,0(r4)
 1087c4c:	28c00017 	ldw	r3,0(r5)
 1087c50:	10c0141e 	bne	r2,r3,1087ca4 <strcmp+0x68>
 1087c54:	027fbff4 	movhi	r9,65279
 1087c58:	4a7fbfc4 	addi	r9,r9,-257
 1087c5c:	1247883a 	add	r3,r2,r9
 1087c60:	0084303a 	nor	r2,zero,r2
 1087c64:	1884703a 	and	r2,r3,r2
 1087c68:	02202074 	movhi	r8,32897
 1087c6c:	42202004 	addi	r8,r8,-32640
 1087c70:	1204703a 	and	r2,r2,r8
 1087c74:	10000226 	beq	r2,zero,1087c80 <strcmp+0x44>
 1087c78:	00001706 	br	1087cd8 <strcmp+0x9c>
 1087c7c:	3000161e 	bne	r6,zero,1087cd8 <strcmp+0x9c>
 1087c80:	21000104 	addi	r4,r4,4
 1087c84:	20800017 	ldw	r2,0(r4)
 1087c88:	29400104 	addi	r5,r5,4
 1087c8c:	28c00017 	ldw	r3,0(r5)
 1087c90:	124f883a 	add	r7,r2,r9
 1087c94:	008c303a 	nor	r6,zero,r2
 1087c98:	398c703a 	and	r6,r7,r6
 1087c9c:	320c703a 	and	r6,r6,r8
 1087ca0:	10fff626 	beq	r2,r3,1087c7c <strcmp+0x40>
 1087ca4:	20800007 	ldb	r2,0(r4)
 1087ca8:	1000051e 	bne	r2,zero,1087cc0 <strcmp+0x84>
 1087cac:	00000606 	br	1087cc8 <strcmp+0x8c>
 1087cb0:	21000044 	addi	r4,r4,1
 1087cb4:	20800007 	ldb	r2,0(r4)
 1087cb8:	29400044 	addi	r5,r5,1
 1087cbc:	10000226 	beq	r2,zero,1087cc8 <strcmp+0x8c>
 1087cc0:	28c00007 	ldb	r3,0(r5)
 1087cc4:	10fffa26 	beq	r2,r3,1087cb0 <strcmp+0x74>
 1087cc8:	20c00003 	ldbu	r3,0(r4)
 1087ccc:	28800003 	ldbu	r2,0(r5)
 1087cd0:	1885c83a 	sub	r2,r3,r2
 1087cd4:	f800283a 	ret
 1087cd8:	0005883a 	mov	r2,zero
 1087cdc:	f800283a 	ret

01087ce0 <_write_r>:
 1087ce0:	defffd04 	addi	sp,sp,-12
 1087ce4:	dc400115 	stw	r17,4(sp)
 1087ce8:	dc000015 	stw	r16,0(sp)
 1087cec:	2023883a 	mov	r17,r4
 1087cf0:	04004274 	movhi	r16,265
 1087cf4:	843da104 	addi	r16,r16,-2428
 1087cf8:	2809883a 	mov	r4,r5
 1087cfc:	300b883a 	mov	r5,r6
 1087d00:	380d883a 	mov	r6,r7
 1087d04:	dfc00215 	stw	ra,8(sp)
 1087d08:	80000015 	stw	zero,0(r16)
 1087d0c:	1089f1c0 	call	1089f1c <write>
 1087d10:	00ffffc4 	movi	r3,-1
 1087d14:	10c00526 	beq	r2,r3,1087d2c <_write_r+0x4c>
 1087d18:	dfc00217 	ldw	ra,8(sp)
 1087d1c:	dc400117 	ldw	r17,4(sp)
 1087d20:	dc000017 	ldw	r16,0(sp)
 1087d24:	dec00304 	addi	sp,sp,12
 1087d28:	f800283a 	ret
 1087d2c:	80c00017 	ldw	r3,0(r16)
 1087d30:	183ff926 	beq	r3,zero,1087d18 <_write_r+0x38>
 1087d34:	88c00015 	stw	r3,0(r17)
 1087d38:	dfc00217 	ldw	ra,8(sp)
 1087d3c:	dc400117 	ldw	r17,4(sp)
 1087d40:	dc000017 	ldw	r16,0(sp)
 1087d44:	dec00304 	addi	sp,sp,12
 1087d48:	f800283a 	ret

01087d4c <_calloc_r>:
 1087d4c:	314b383a 	mul	r5,r6,r5
 1087d50:	defffe04 	addi	sp,sp,-8
 1087d54:	dc000015 	stw	r16,0(sp)
 1087d58:	dfc00115 	stw	ra,4(sp)
 1087d5c:	10859180 	call	1085918 <_malloc_r>
 1087d60:	1021883a 	mov	r16,r2
 1087d64:	10000c26 	beq	r2,zero,1087d98 <_calloc_r+0x4c>
 1087d68:	11bfff17 	ldw	r6,-4(r2)
 1087d6c:	00ffff04 	movi	r3,-4
 1087d70:	00800904 	movi	r2,36
 1087d74:	30cc703a 	and	r6,r6,r3
 1087d78:	30cd883a 	add	r6,r6,r3
 1087d7c:	11801436 	bltu	r2,r6,1087dd0 <_calloc_r+0x84>
 1087d80:	00c004c4 	movi	r3,19
 1087d84:	19800936 	bltu	r3,r6,1087dac <_calloc_r+0x60>
 1087d88:	8005883a 	mov	r2,r16
 1087d8c:	10000015 	stw	zero,0(r2)
 1087d90:	10000115 	stw	zero,4(r2)
 1087d94:	10000215 	stw	zero,8(r2)
 1087d98:	8005883a 	mov	r2,r16
 1087d9c:	dfc00117 	ldw	ra,4(sp)
 1087da0:	dc000017 	ldw	r16,0(sp)
 1087da4:	dec00204 	addi	sp,sp,8
 1087da8:	f800283a 	ret
 1087dac:	80000015 	stw	zero,0(r16)
 1087db0:	80000115 	stw	zero,4(r16)
 1087db4:	00c006c4 	movi	r3,27
 1087db8:	19800d2e 	bgeu	r3,r6,1087df0 <_calloc_r+0xa4>
 1087dbc:	80000215 	stw	zero,8(r16)
 1087dc0:	80000315 	stw	zero,12(r16)
 1087dc4:	30800c26 	beq	r6,r2,1087df8 <_calloc_r+0xac>
 1087dc8:	80800404 	addi	r2,r16,16
 1087dcc:	003fef06 	br	1087d8c <_calloc_r+0x40>
 1087dd0:	8009883a 	mov	r4,r16
 1087dd4:	000b883a 	mov	r5,zero
 1087dd8:	10863b40 	call	10863b4 <memset>
 1087ddc:	8005883a 	mov	r2,r16
 1087de0:	dfc00117 	ldw	ra,4(sp)
 1087de4:	dc000017 	ldw	r16,0(sp)
 1087de8:	dec00204 	addi	sp,sp,8
 1087dec:	f800283a 	ret
 1087df0:	80800204 	addi	r2,r16,8
 1087df4:	003fe506 	br	1087d8c <_calloc_r+0x40>
 1087df8:	80000415 	stw	zero,16(r16)
 1087dfc:	80000515 	stw	zero,20(r16)
 1087e00:	80800604 	addi	r2,r16,24
 1087e04:	003fe106 	br	1087d8c <_calloc_r+0x40>

01087e08 <_close_r>:
 1087e08:	defffd04 	addi	sp,sp,-12
 1087e0c:	dc400115 	stw	r17,4(sp)
 1087e10:	dc000015 	stw	r16,0(sp)
 1087e14:	2023883a 	mov	r17,r4
 1087e18:	04004274 	movhi	r16,265
 1087e1c:	843da104 	addi	r16,r16,-2428
 1087e20:	2809883a 	mov	r4,r5
 1087e24:	dfc00215 	stw	ra,8(sp)
 1087e28:	80000015 	stw	zero,0(r16)
 1087e2c:	10896d80 	call	10896d8 <close>
 1087e30:	00ffffc4 	movi	r3,-1
 1087e34:	10c00526 	beq	r2,r3,1087e4c <_close_r+0x44>
 1087e38:	dfc00217 	ldw	ra,8(sp)
 1087e3c:	dc400117 	ldw	r17,4(sp)
 1087e40:	dc000017 	ldw	r16,0(sp)
 1087e44:	dec00304 	addi	sp,sp,12
 1087e48:	f800283a 	ret
 1087e4c:	80c00017 	ldw	r3,0(r16)
 1087e50:	183ff926 	beq	r3,zero,1087e38 <_close_r+0x30>
 1087e54:	88c00015 	stw	r3,0(r17)
 1087e58:	dfc00217 	ldw	ra,8(sp)
 1087e5c:	dc400117 	ldw	r17,4(sp)
 1087e60:	dc000017 	ldw	r16,0(sp)
 1087e64:	dec00304 	addi	sp,sp,12
 1087e68:	f800283a 	ret

01087e6c <_fclose_r>:
 1087e6c:	defffc04 	addi	sp,sp,-16
 1087e70:	dc400115 	stw	r17,4(sp)
 1087e74:	dc000015 	stw	r16,0(sp)
 1087e78:	dfc00315 	stw	ra,12(sp)
 1087e7c:	dc800215 	stw	r18,8(sp)
 1087e80:	2821883a 	mov	r16,r5
 1087e84:	2023883a 	mov	r17,r4
 1087e88:	28003426 	beq	r5,zero,1087f5c <_fclose_r+0xf0>
 1087e8c:	1084c040 	call	1084c04 <__sfp_lock_acquire>
 1087e90:	88000226 	beq	r17,zero,1087e9c <_fclose_r+0x30>
 1087e94:	88800e17 	ldw	r2,56(r17)
 1087e98:	10003826 	beq	r2,zero,1087f7c <_fclose_r+0x110>
 1087e9c:	8080030f 	ldh	r2,12(r16)
 1087ea0:	10002526 	beq	r2,zero,1087f38 <_fclose_r+0xcc>
 1087ea4:	8809883a 	mov	r4,r17
 1087ea8:	800b883a 	mov	r5,r16
 1087eac:	10847540 	call	1084754 <_fflush_r>
 1087eb0:	1025883a 	mov	r18,r2
 1087eb4:	80800b17 	ldw	r2,44(r16)
 1087eb8:	10000426 	beq	r2,zero,1087ecc <_fclose_r+0x60>
 1087ebc:	81400717 	ldw	r5,28(r16)
 1087ec0:	8809883a 	mov	r4,r17
 1087ec4:	103ee83a 	callr	r2
 1087ec8:	10003516 	blt	r2,zero,1087fa0 <_fclose_r+0x134>
 1087ecc:	8080030b 	ldhu	r2,12(r16)
 1087ed0:	1080200c 	andi	r2,r2,128
 1087ed4:	10bfffcc 	andi	r2,r2,65535
 1087ed8:	10a0001c 	xori	r2,r2,32768
 1087edc:	10a00004 	addi	r2,r2,-32768
 1087ee0:	10002b1e 	bne	r2,zero,1087f90 <_fclose_r+0x124>
 1087ee4:	81400c17 	ldw	r5,48(r16)
 1087ee8:	28000526 	beq	r5,zero,1087f00 <_fclose_r+0x94>
 1087eec:	80801004 	addi	r2,r16,64
 1087ef0:	28800226 	beq	r5,r2,1087efc <_fclose_r+0x90>
 1087ef4:	8809883a 	mov	r4,r17
 1087ef8:	1084d800 	call	1084d80 <_free_r>
 1087efc:	80000c15 	stw	zero,48(r16)
 1087f00:	81401117 	ldw	r5,68(r16)
 1087f04:	28000326 	beq	r5,zero,1087f14 <_fclose_r+0xa8>
 1087f08:	8809883a 	mov	r4,r17
 1087f0c:	1084d800 	call	1084d80 <_free_r>
 1087f10:	80001115 	stw	zero,68(r16)
 1087f14:	8000030d 	sth	zero,12(r16)
 1087f18:	1084c080 	call	1084c08 <__sfp_lock_release>
 1087f1c:	9005883a 	mov	r2,r18
 1087f20:	dfc00317 	ldw	ra,12(sp)
 1087f24:	dc800217 	ldw	r18,8(sp)
 1087f28:	dc400117 	ldw	r17,4(sp)
 1087f2c:	dc000017 	ldw	r16,0(sp)
 1087f30:	dec00404 	addi	sp,sp,16
 1087f34:	f800283a 	ret
 1087f38:	1084c080 	call	1084c08 <__sfp_lock_release>
 1087f3c:	0025883a 	mov	r18,zero
 1087f40:	9005883a 	mov	r2,r18
 1087f44:	dfc00317 	ldw	ra,12(sp)
 1087f48:	dc800217 	ldw	r18,8(sp)
 1087f4c:	dc400117 	ldw	r17,4(sp)
 1087f50:	dc000017 	ldw	r16,0(sp)
 1087f54:	dec00404 	addi	sp,sp,16
 1087f58:	f800283a 	ret
 1087f5c:	0025883a 	mov	r18,zero
 1087f60:	9005883a 	mov	r2,r18
 1087f64:	dfc00317 	ldw	ra,12(sp)
 1087f68:	dc800217 	ldw	r18,8(sp)
 1087f6c:	dc400117 	ldw	r17,4(sp)
 1087f70:	dc000017 	ldw	r16,0(sp)
 1087f74:	dec00404 	addi	sp,sp,16
 1087f78:	f800283a 	ret
 1087f7c:	8809883a 	mov	r4,r17
 1087f80:	10849fc0 	call	10849fc <__sinit>
 1087f84:	8080030f 	ldh	r2,12(r16)
 1087f88:	103fc61e 	bne	r2,zero,1087ea4 <_fclose_r+0x38>
 1087f8c:	003fea06 	br	1087f38 <_fclose_r+0xcc>
 1087f90:	81400417 	ldw	r5,16(r16)
 1087f94:	8809883a 	mov	r4,r17
 1087f98:	1084d800 	call	1084d80 <_free_r>
 1087f9c:	003fd106 	br	1087ee4 <_fclose_r+0x78>
 1087fa0:	04bfffc4 	movi	r18,-1
 1087fa4:	003fc906 	br	1087ecc <_fclose_r+0x60>

01087fa8 <fclose>:
 1087fa8:	00804274 	movhi	r2,265
 1087fac:	10b6f704 	addi	r2,r2,-9252
 1087fb0:	200b883a 	mov	r5,r4
 1087fb4:	11000017 	ldw	r4,0(r2)
 1087fb8:	1087e6c1 	jmpi	1087e6c <_fclose_r>

01087fbc <_fstat_r>:
 1087fbc:	defffd04 	addi	sp,sp,-12
 1087fc0:	dc400115 	stw	r17,4(sp)
 1087fc4:	dc000015 	stw	r16,0(sp)
 1087fc8:	2023883a 	mov	r17,r4
 1087fcc:	04004274 	movhi	r16,265
 1087fd0:	843da104 	addi	r16,r16,-2428
 1087fd4:	2809883a 	mov	r4,r5
 1087fd8:	300b883a 	mov	r5,r6
 1087fdc:	dfc00215 	stw	ra,8(sp)
 1087fe0:	80000015 	stw	zero,0(r16)
 1087fe4:	108981c0 	call	108981c <fstat>
 1087fe8:	00ffffc4 	movi	r3,-1
 1087fec:	10c00526 	beq	r2,r3,1088004 <_fstat_r+0x48>
 1087ff0:	dfc00217 	ldw	ra,8(sp)
 1087ff4:	dc400117 	ldw	r17,4(sp)
 1087ff8:	dc000017 	ldw	r16,0(sp)
 1087ffc:	dec00304 	addi	sp,sp,12
 1088000:	f800283a 	ret
 1088004:	80c00017 	ldw	r3,0(r16)
 1088008:	183ff926 	beq	r3,zero,1087ff0 <_fstat_r+0x34>
 108800c:	88c00015 	stw	r3,0(r17)
 1088010:	dfc00217 	ldw	ra,8(sp)
 1088014:	dc400117 	ldw	r17,4(sp)
 1088018:	dc000017 	ldw	r16,0(sp)
 108801c:	dec00304 	addi	sp,sp,12
 1088020:	f800283a 	ret

01088024 <_isatty_r>:
 1088024:	defffd04 	addi	sp,sp,-12
 1088028:	dc400115 	stw	r17,4(sp)
 108802c:	dc000015 	stw	r16,0(sp)
 1088030:	2023883a 	mov	r17,r4
 1088034:	04004274 	movhi	r16,265
 1088038:	843da104 	addi	r16,r16,-2428
 108803c:	2809883a 	mov	r4,r5
 1088040:	dfc00215 	stw	ra,8(sp)
 1088044:	80000015 	stw	zero,0(r16)
 1088048:	10899180 	call	1089918 <isatty>
 108804c:	00ffffc4 	movi	r3,-1
 1088050:	10c00526 	beq	r2,r3,1088068 <_isatty_r+0x44>
 1088054:	dfc00217 	ldw	ra,8(sp)
 1088058:	dc400117 	ldw	r17,4(sp)
 108805c:	dc000017 	ldw	r16,0(sp)
 1088060:	dec00304 	addi	sp,sp,12
 1088064:	f800283a 	ret
 1088068:	80c00017 	ldw	r3,0(r16)
 108806c:	183ff926 	beq	r3,zero,1088054 <_isatty_r+0x30>
 1088070:	88c00015 	stw	r3,0(r17)
 1088074:	dfc00217 	ldw	ra,8(sp)
 1088078:	dc400117 	ldw	r17,4(sp)
 108807c:	dc000017 	ldw	r16,0(sp)
 1088080:	dec00304 	addi	sp,sp,12
 1088084:	f800283a 	ret

01088088 <_lseek_r>:
 1088088:	defffd04 	addi	sp,sp,-12
 108808c:	dc400115 	stw	r17,4(sp)
 1088090:	dc000015 	stw	r16,0(sp)
 1088094:	2023883a 	mov	r17,r4
 1088098:	04004274 	movhi	r16,265
 108809c:	843da104 	addi	r16,r16,-2428
 10880a0:	2809883a 	mov	r4,r5
 10880a4:	300b883a 	mov	r5,r6
 10880a8:	380d883a 	mov	r6,r7
 10880ac:	dfc00215 	stw	ra,8(sp)
 10880b0:	80000015 	stw	zero,0(r16)
 10880b4:	1089af40 	call	1089af4 <lseek>
 10880b8:	00ffffc4 	movi	r3,-1
 10880bc:	10c00526 	beq	r2,r3,10880d4 <_lseek_r+0x4c>
 10880c0:	dfc00217 	ldw	ra,8(sp)
 10880c4:	dc400117 	ldw	r17,4(sp)
 10880c8:	dc000017 	ldw	r16,0(sp)
 10880cc:	dec00304 	addi	sp,sp,12
 10880d0:	f800283a 	ret
 10880d4:	80c00017 	ldw	r3,0(r16)
 10880d8:	183ff926 	beq	r3,zero,10880c0 <_lseek_r+0x38>
 10880dc:	88c00015 	stw	r3,0(r17)
 10880e0:	dfc00217 	ldw	ra,8(sp)
 10880e4:	dc400117 	ldw	r17,4(sp)
 10880e8:	dc000017 	ldw	r16,0(sp)
 10880ec:	dec00304 	addi	sp,sp,12
 10880f0:	f800283a 	ret

010880f4 <_read_r>:
 10880f4:	defffd04 	addi	sp,sp,-12
 10880f8:	dc400115 	stw	r17,4(sp)
 10880fc:	dc000015 	stw	r16,0(sp)
 1088100:	2023883a 	mov	r17,r4
 1088104:	04004274 	movhi	r16,265
 1088108:	843da104 	addi	r16,r16,-2428
 108810c:	2809883a 	mov	r4,r5
 1088110:	300b883a 	mov	r5,r6
 1088114:	380d883a 	mov	r6,r7
 1088118:	dfc00215 	stw	ra,8(sp)
 108811c:	80000015 	stw	zero,0(r16)
 1088120:	1089ccc0 	call	1089ccc <read>
 1088124:	00ffffc4 	movi	r3,-1
 1088128:	10c00526 	beq	r2,r3,1088140 <_read_r+0x4c>
 108812c:	dfc00217 	ldw	ra,8(sp)
 1088130:	dc400117 	ldw	r17,4(sp)
 1088134:	dc000017 	ldw	r16,0(sp)
 1088138:	dec00304 	addi	sp,sp,12
 108813c:	f800283a 	ret
 1088140:	80c00017 	ldw	r3,0(r16)
 1088144:	183ff926 	beq	r3,zero,108812c <_read_r+0x38>
 1088148:	88c00015 	stw	r3,0(r17)
 108814c:	dfc00217 	ldw	ra,8(sp)
 1088150:	dc400117 	ldw	r17,4(sp)
 1088154:	dc000017 	ldw	r16,0(sp)
 1088158:	dec00304 	addi	sp,sp,12
 108815c:	f800283a 	ret

01088160 <__udivdi3>:
 1088160:	defff504 	addi	sp,sp,-44
 1088164:	dd000515 	stw	r20,20(sp)
 1088168:	dcc00415 	stw	r19,16(sp)
 108816c:	dc800315 	stw	r18,12(sp)
 1088170:	dc400215 	stw	r17,8(sp)
 1088174:	dc000115 	stw	r16,4(sp)
 1088178:	dfc00a15 	stw	ra,40(sp)
 108817c:	df000915 	stw	fp,36(sp)
 1088180:	ddc00815 	stw	r23,32(sp)
 1088184:	dd800715 	stw	r22,28(sp)
 1088188:	dd400615 	stw	r21,24(sp)
 108818c:	2025883a 	mov	r18,r4
 1088190:	2823883a 	mov	r17,r5
 1088194:	3021883a 	mov	r16,r6
 1088198:	2027883a 	mov	r19,r4
 108819c:	2829883a 	mov	r20,r5
 10881a0:	3800401e 	bne	r7,zero,10882a4 <__udivdi3+0x144>
 10881a4:	2980602e 	bgeu	r5,r6,1088328 <__udivdi3+0x1c8>
 10881a8:	00bfffd4 	movui	r2,65535
 10881ac:	1180aa36 	bltu	r2,r6,1088458 <__udivdi3+0x2f8>
 10881b0:	00803fc4 	movi	r2,255
 10881b4:	11814436 	bltu	r2,r6,10886c8 <__udivdi3+0x568>
 10881b8:	0005883a 	mov	r2,zero
 10881bc:	0007883a 	mov	r3,zero
 10881c0:	3084d83a 	srl	r2,r6,r2
 10881c4:	01004274 	movhi	r4,265
 10881c8:	212fac04 	addi	r4,r4,-16720
 10881cc:	2085883a 	add	r2,r4,r2
 10881d0:	10800003 	ldbu	r2,0(r2)
 10881d4:	10c7883a 	add	r3,r2,r3
 10881d8:	00800804 	movi	r2,32
 10881dc:	10c5c83a 	sub	r2,r2,r3
 10881e0:	10000526 	beq	r2,zero,10881f8 <__udivdi3+0x98>
 10881e4:	88a2983a 	sll	r17,r17,r2
 10881e8:	90c6d83a 	srl	r3,r18,r3
 10881ec:	30a0983a 	sll	r16,r6,r2
 10881f0:	90a6983a 	sll	r19,r18,r2
 10881f4:	88e8b03a 	or	r20,r17,r3
 10881f8:	8022d43a 	srli	r17,r16,16
 10881fc:	a009883a 	mov	r4,r20
 1088200:	857fffcc 	andi	r21,r16,65535
 1088204:	880b883a 	mov	r5,r17
 1088208:	10895b00 	call	10895b0 <__umodsi3>
 108820c:	a009883a 	mov	r4,r20
 1088210:	880b883a 	mov	r5,r17
 1088214:	102d883a 	mov	r22,r2
 1088218:	10895a80 	call	10895a8 <__udivsi3>
 108821c:	b02c943a 	slli	r22,r22,16
 1088220:	9806d43a 	srli	r3,r19,16
 1088224:	1549383a 	mul	r4,r2,r21
 1088228:	1025883a 	mov	r18,r2
 108822c:	b0c6b03a 	or	r3,r22,r3
 1088230:	1900052e 	bgeu	r3,r4,1088248 <__udivdi3+0xe8>
 1088234:	1c07883a 	add	r3,r3,r16
 1088238:	10bfffc4 	addi	r2,r2,-1
 108823c:	1c000136 	bltu	r3,r16,1088244 <__udivdi3+0xe4>
 1088240:	19013636 	bltu	r3,r4,108871c <__udivdi3+0x5bc>
 1088244:	1025883a 	mov	r18,r2
 1088248:	1929c83a 	sub	r20,r3,r4
 108824c:	a009883a 	mov	r4,r20
 1088250:	880b883a 	mov	r5,r17
 1088254:	10895b00 	call	10895b0 <__umodsi3>
 1088258:	102d883a 	mov	r22,r2
 108825c:	a009883a 	mov	r4,r20
 1088260:	880b883a 	mov	r5,r17
 1088264:	10895a80 	call	10895a8 <__udivsi3>
 1088268:	b02c943a 	slli	r22,r22,16
 108826c:	156b383a 	mul	r21,r2,r21
 1088270:	9cffffcc 	andi	r19,r19,65535
 1088274:	b4e6b03a 	or	r19,r22,r19
 1088278:	1009883a 	mov	r4,r2
 108827c:	9d40052e 	bgeu	r19,r21,1088294 <__udivdi3+0x134>
 1088280:	9c27883a 	add	r19,r19,r16
 1088284:	10bfffc4 	addi	r2,r2,-1
 1088288:	9c00f736 	bltu	r19,r16,1088668 <__udivdi3+0x508>
 108828c:	9d40f62e 	bgeu	r19,r21,1088668 <__udivdi3+0x508>
 1088290:	213fff84 	addi	r4,r4,-2
 1088294:	9004943a 	slli	r2,r18,16
 1088298:	0007883a 	mov	r3,zero
 108829c:	2084b03a 	or	r2,r4,r2
 10882a0:	00001506 	br	10882f8 <__udivdi3+0x198>
 10882a4:	29c06536 	bltu	r5,r7,108843c <__udivdi3+0x2dc>
 10882a8:	00bfffd4 	movui	r2,65535
 10882ac:	11c0652e 	bgeu	r2,r7,1088444 <__udivdi3+0x2e4>
 10882b0:	00804034 	movhi	r2,256
 10882b4:	10bfffc4 	addi	r2,r2,-1
 10882b8:	11c0f736 	bltu	r2,r7,1088698 <__udivdi3+0x538>
 10882bc:	00c00404 	movi	r3,16
 10882c0:	180b883a 	mov	r5,r3
 10882c4:	38c6d83a 	srl	r3,r7,r3
 10882c8:	01004274 	movhi	r4,265
 10882cc:	212fac04 	addi	r4,r4,-16720
 10882d0:	04000804 	movi	r16,32
 10882d4:	20c7883a 	add	r3,r4,r3
 10882d8:	18800003 	ldbu	r2,0(r3)
 10882dc:	1145883a 	add	r2,r2,r5
 10882e0:	80a1c83a 	sub	r16,r16,r2
 10882e4:	8000691e 	bne	r16,zero,108848c <__udivdi3+0x32c>
 10882e8:	0007883a 	mov	r3,zero
 10882ec:	3c406536 	bltu	r7,r17,1088484 <__udivdi3+0x324>
 10882f0:	9180642e 	bgeu	r18,r6,1088484 <__udivdi3+0x324>
 10882f4:	0005883a 	mov	r2,zero
 10882f8:	dfc00a17 	ldw	ra,40(sp)
 10882fc:	df000917 	ldw	fp,36(sp)
 1088300:	ddc00817 	ldw	r23,32(sp)
 1088304:	dd800717 	ldw	r22,28(sp)
 1088308:	dd400617 	ldw	r21,24(sp)
 108830c:	dd000517 	ldw	r20,20(sp)
 1088310:	dcc00417 	ldw	r19,16(sp)
 1088314:	dc800317 	ldw	r18,12(sp)
 1088318:	dc400217 	ldw	r17,8(sp)
 108831c:	dc000117 	ldw	r16,4(sp)
 1088320:	dec00b04 	addi	sp,sp,44
 1088324:	f800283a 	ret
 1088328:	3000041e 	bne	r6,zero,108833c <__udivdi3+0x1dc>
 108832c:	01000044 	movi	r4,1
 1088330:	000b883a 	mov	r5,zero
 1088334:	10895a80 	call	10895a8 <__udivsi3>
 1088338:	1021883a 	mov	r16,r2
 108833c:	00bfffd4 	movui	r2,65535
 1088340:	14004b2e 	bgeu	r2,r16,1088470 <__udivdi3+0x310>
 1088344:	00804034 	movhi	r2,256
 1088348:	10bfffc4 	addi	r2,r2,-1
 108834c:	1400d836 	bltu	r2,r16,10886b0 <__udivdi3+0x550>
 1088350:	00800404 	movi	r2,16
 1088354:	1007883a 	mov	r3,r2
 1088358:	8084d83a 	srl	r2,r16,r2
 108835c:	01004274 	movhi	r4,265
 1088360:	212fac04 	addi	r4,r4,-16720
 1088364:	2085883a 	add	r2,r4,r2
 1088368:	10800003 	ldbu	r2,0(r2)
 108836c:	10c7883a 	add	r3,r2,r3
 1088370:	00800804 	movi	r2,32
 1088374:	10c5c83a 	sub	r2,r2,r3
 1088378:	1000891e 	bne	r2,zero,10885a0 <__udivdi3+0x440>
 108837c:	8028d43a 	srli	r20,r16,16
 1088380:	8c23c83a 	sub	r17,r17,r16
 1088384:	84bfffcc 	andi	r18,r16,65535
 1088388:	00c00044 	movi	r3,1
 108838c:	8809883a 	mov	r4,r17
 1088390:	a00b883a 	mov	r5,r20
 1088394:	d8c00015 	stw	r3,0(sp)
 1088398:	10895b00 	call	10895b0 <__umodsi3>
 108839c:	8809883a 	mov	r4,r17
 10883a0:	a00b883a 	mov	r5,r20
 10883a4:	102b883a 	mov	r21,r2
 10883a8:	10895a80 	call	10895a8 <__udivsi3>
 10883ac:	a82a943a 	slli	r21,r21,16
 10883b0:	9808d43a 	srli	r4,r19,16
 10883b4:	148b383a 	mul	r5,r2,r18
 10883b8:	1023883a 	mov	r17,r2
 10883bc:	a908b03a 	or	r4,r21,r4
 10883c0:	d8c00017 	ldw	r3,0(sp)
 10883c4:	2140052e 	bgeu	r4,r5,10883dc <__udivdi3+0x27c>
 10883c8:	2409883a 	add	r4,r4,r16
 10883cc:	10bfffc4 	addi	r2,r2,-1
 10883d0:	24000136 	bltu	r4,r16,10883d8 <__udivdi3+0x278>
 10883d4:	2140ce36 	bltu	r4,r5,1088710 <__udivdi3+0x5b0>
 10883d8:	1023883a 	mov	r17,r2
 10883dc:	216bc83a 	sub	r21,r4,r5
 10883e0:	a809883a 	mov	r4,r21
 10883e4:	a00b883a 	mov	r5,r20
 10883e8:	d8c00015 	stw	r3,0(sp)
 10883ec:	10895b00 	call	10895b0 <__umodsi3>
 10883f0:	102d883a 	mov	r22,r2
 10883f4:	a809883a 	mov	r4,r21
 10883f8:	a00b883a 	mov	r5,r20
 10883fc:	10895a80 	call	10895a8 <__udivsi3>
 1088400:	b02c943a 	slli	r22,r22,16
 1088404:	14a5383a 	mul	r18,r2,r18
 1088408:	9cffffcc 	andi	r19,r19,65535
 108840c:	b4e6b03a 	or	r19,r22,r19
 1088410:	1009883a 	mov	r4,r2
 1088414:	d8c00017 	ldw	r3,0(sp)
 1088418:	9c80052e 	bgeu	r19,r18,1088430 <__udivdi3+0x2d0>
 108841c:	9c27883a 	add	r19,r19,r16
 1088420:	10bfffc4 	addi	r2,r2,-1
 1088424:	9c009236 	bltu	r19,r16,1088670 <__udivdi3+0x510>
 1088428:	9c80912e 	bgeu	r19,r18,1088670 <__udivdi3+0x510>
 108842c:	213fff84 	addi	r4,r4,-2
 1088430:	8804943a 	slli	r2,r17,16
 1088434:	2084b03a 	or	r2,r4,r2
 1088438:	003faf06 	br	10882f8 <__udivdi3+0x198>
 108843c:	0007883a 	mov	r3,zero
 1088440:	003fac06 	br	10882f4 <__udivdi3+0x194>
 1088444:	00803fc4 	movi	r2,255
 1088448:	11c09636 	bltu	r2,r7,10886a4 <__udivdi3+0x544>
 108844c:	0007883a 	mov	r3,zero
 1088450:	000b883a 	mov	r5,zero
 1088454:	003f9b06 	br	10882c4 <__udivdi3+0x164>
 1088458:	00804034 	movhi	r2,256
 108845c:	10bfffc4 	addi	r2,r2,-1
 1088460:	11809636 	bltu	r2,r6,10886bc <__udivdi3+0x55c>
 1088464:	00800404 	movi	r2,16
 1088468:	1007883a 	mov	r3,r2
 108846c:	003f5406 	br	10881c0 <__udivdi3+0x60>
 1088470:	00803fc4 	movi	r2,255
 1088474:	14009736 	bltu	r2,r16,10886d4 <__udivdi3+0x574>
 1088478:	0005883a 	mov	r2,zero
 108847c:	0007883a 	mov	r3,zero
 1088480:	003fb506 	br	1088358 <__udivdi3+0x1f8>
 1088484:	00800044 	movi	r2,1
 1088488:	003f9b06 	br	10882f8 <__udivdi3+0x198>
 108848c:	3086d83a 	srl	r3,r6,r2
 1088490:	3c0e983a 	sll	r7,r7,r16
 1088494:	88aad83a 	srl	r21,r17,r2
 1088498:	9084d83a 	srl	r2,r18,r2
 108849c:	38e6b03a 	or	r19,r7,r3
 10884a0:	9828d43a 	srli	r20,r19,16
 10884a4:	8c22983a 	sll	r17,r17,r16
 10884a8:	a809883a 	mov	r4,r21
 10884ac:	a00b883a 	mov	r5,r20
 10884b0:	342c983a 	sll	r22,r6,r16
 10884b4:	88a2b03a 	or	r17,r17,r2
 10884b8:	10895b00 	call	10895b0 <__umodsi3>
 10884bc:	a809883a 	mov	r4,r21
 10884c0:	a00b883a 	mov	r5,r20
 10884c4:	1039883a 	mov	fp,r2
 10884c8:	10895a80 	call	10895a8 <__udivsi3>
 10884cc:	102b883a 	mov	r21,r2
 10884d0:	9dffffcc 	andi	r23,r19,65535
 10884d4:	e008943a 	slli	r4,fp,16
 10884d8:	8804d43a 	srli	r2,r17,16
 10884dc:	adcd383a 	mul	r6,r21,r23
 10884e0:	2088b03a 	or	r4,r4,r2
 10884e4:	2180042e 	bgeu	r4,r6,10884f8 <__udivdi3+0x398>
 10884e8:	24c9883a 	add	r4,r4,r19
 10884ec:	a8bfffc4 	addi	r2,r21,-1
 10884f0:	24c07f2e 	bgeu	r4,r19,10886f0 <__udivdi3+0x590>
 10884f4:	102b883a 	mov	r21,r2
 10884f8:	21b9c83a 	sub	fp,r4,r6
 10884fc:	e009883a 	mov	r4,fp
 1088500:	a00b883a 	mov	r5,r20
 1088504:	10895b00 	call	10895b0 <__umodsi3>
 1088508:	e009883a 	mov	r4,fp
 108850c:	a00b883a 	mov	r5,r20
 1088510:	d8800015 	stw	r2,0(sp)
 1088514:	10895a80 	call	10895a8 <__udivsi3>
 1088518:	d8c00017 	ldw	r3,0(sp)
 108851c:	15cb383a 	mul	r5,r2,r23
 1088520:	8c7fffcc 	andi	r17,r17,65535
 1088524:	1806943a 	slli	r3,r3,16
 1088528:	1009883a 	mov	r4,r2
 108852c:	1c46b03a 	or	r3,r3,r17
 1088530:	1940042e 	bgeu	r3,r5,1088544 <__udivdi3+0x3e4>
 1088534:	1cc7883a 	add	r3,r3,r19
 1088538:	10bfffc4 	addi	r2,r2,-1
 108853c:	1cc0682e 	bgeu	r3,r19,10886e0 <__udivdi3+0x580>
 1088540:	1009883a 	mov	r4,r2
 1088544:	a804943a 	slli	r2,r21,16
 1088548:	b1ffffcc 	andi	r7,r22,65535
 108854c:	b02cd43a 	srli	r22,r22,16
 1088550:	2084b03a 	or	r2,r4,r2
 1088554:	113fffcc 	andi	r4,r2,65535
 1088558:	100cd43a 	srli	r6,r2,16
 108855c:	21d1383a 	mul	r8,r4,r7
 1088560:	2589383a 	mul	r4,r4,r22
 1088564:	31cf383a 	mul	r7,r6,r7
 1088568:	4012d43a 	srli	r9,r8,16
 108856c:	1947c83a 	sub	r3,r3,r5
 1088570:	3909883a 	add	r4,r7,r4
 1088574:	2249883a 	add	r4,r4,r9
 1088578:	35ad383a 	mul	r22,r6,r22
 108857c:	21c0022e 	bgeu	r4,r7,1088588 <__udivdi3+0x428>
 1088580:	01400074 	movhi	r5,1
 1088584:	b16d883a 	add	r22,r22,r5
 1088588:	200ad43a 	srli	r5,r4,16
 108858c:	b16d883a 	add	r22,r22,r5
 1088590:	1d803e36 	bltu	r3,r22,108868c <__udivdi3+0x52c>
 1088594:	1d803826 	beq	r3,r22,1088678 <__udivdi3+0x518>
 1088598:	0007883a 	mov	r3,zero
 108859c:	003f5606 	br	10882f8 <__udivdi3+0x198>
 10885a0:	80a0983a 	sll	r16,r16,r2
 10885a4:	88ead83a 	srl	r21,r17,r3
 10885a8:	90c6d83a 	srl	r3,r18,r3
 10885ac:	8028d43a 	srli	r20,r16,16
 10885b0:	88a2983a 	sll	r17,r17,r2
 10885b4:	a809883a 	mov	r4,r21
 10885b8:	a00b883a 	mov	r5,r20
 10885bc:	88ecb03a 	or	r22,r17,r3
 10885c0:	90a6983a 	sll	r19,r18,r2
 10885c4:	10895b00 	call	10895b0 <__umodsi3>
 10885c8:	a809883a 	mov	r4,r21
 10885cc:	a00b883a 	mov	r5,r20
 10885d0:	1023883a 	mov	r17,r2
 10885d4:	10895a80 	call	10895a8 <__udivsi3>
 10885d8:	102b883a 	mov	r21,r2
 10885dc:	84bfffcc 	andi	r18,r16,65535
 10885e0:	8808943a 	slli	r4,r17,16
 10885e4:	b004d43a 	srli	r2,r22,16
 10885e8:	ac87383a 	mul	r3,r21,r18
 10885ec:	2088b03a 	or	r4,r4,r2
 10885f0:	20c0062e 	bgeu	r4,r3,108860c <__udivdi3+0x4ac>
 10885f4:	2409883a 	add	r4,r4,r16
 10885f8:	a8bfffc4 	addi	r2,r21,-1
 10885fc:	24004236 	bltu	r4,r16,1088708 <__udivdi3+0x5a8>
 1088600:	20c0412e 	bgeu	r4,r3,1088708 <__udivdi3+0x5a8>
 1088604:	ad7fff84 	addi	r21,r21,-2
 1088608:	2409883a 	add	r4,r4,r16
 108860c:	20efc83a 	sub	r23,r4,r3
 1088610:	b809883a 	mov	r4,r23
 1088614:	a00b883a 	mov	r5,r20
 1088618:	10895b00 	call	10895b0 <__umodsi3>
 108861c:	1023883a 	mov	r17,r2
 1088620:	a00b883a 	mov	r5,r20
 1088624:	b809883a 	mov	r4,r23
 1088628:	10895a80 	call	10895a8 <__udivsi3>
 108862c:	8822943a 	slli	r17,r17,16
 1088630:	148b383a 	mul	r5,r2,r18
 1088634:	b5bfffcc 	andi	r22,r22,65535
 1088638:	8da2b03a 	or	r17,r17,r22
 108863c:	8940062e 	bgeu	r17,r5,1088658 <__udivdi3+0x4f8>
 1088640:	8c23883a 	add	r17,r17,r16
 1088644:	10ffffc4 	addi	r3,r2,-1
 1088648:	8c002d36 	bltu	r17,r16,1088700 <__udivdi3+0x5a0>
 108864c:	89402c2e 	bgeu	r17,r5,1088700 <__udivdi3+0x5a0>
 1088650:	10bfff84 	addi	r2,r2,-2
 1088654:	8c23883a 	add	r17,r17,r16
 1088658:	a806943a 	slli	r3,r21,16
 108865c:	8963c83a 	sub	r17,r17,r5
 1088660:	10c6b03a 	or	r3,r2,r3
 1088664:	003f4906 	br	108838c <__udivdi3+0x22c>
 1088668:	1009883a 	mov	r4,r2
 108866c:	003f0906 	br	1088294 <__udivdi3+0x134>
 1088670:	1009883a 	mov	r4,r2
 1088674:	003f6e06 	br	1088430 <__udivdi3+0x2d0>
 1088678:	2008943a 	slli	r4,r4,16
 108867c:	9420983a 	sll	r16,r18,r16
 1088680:	423fffcc 	andi	r8,r8,65535
 1088684:	2209883a 	add	r4,r4,r8
 1088688:	813fc32e 	bgeu	r16,r4,1088598 <__udivdi3+0x438>
 108868c:	10bfffc4 	addi	r2,r2,-1
 1088690:	0007883a 	mov	r3,zero
 1088694:	003f1806 	br	10882f8 <__udivdi3+0x198>
 1088698:	00c00604 	movi	r3,24
 108869c:	180b883a 	mov	r5,r3
 10886a0:	003f0806 	br	10882c4 <__udivdi3+0x164>
 10886a4:	00c00204 	movi	r3,8
 10886a8:	180b883a 	mov	r5,r3
 10886ac:	003f0506 	br	10882c4 <__udivdi3+0x164>
 10886b0:	00800604 	movi	r2,24
 10886b4:	1007883a 	mov	r3,r2
 10886b8:	003f2706 	br	1088358 <__udivdi3+0x1f8>
 10886bc:	00800604 	movi	r2,24
 10886c0:	1007883a 	mov	r3,r2
 10886c4:	003ebe06 	br	10881c0 <__udivdi3+0x60>
 10886c8:	00800204 	movi	r2,8
 10886cc:	1007883a 	mov	r3,r2
 10886d0:	003ebb06 	br	10881c0 <__udivdi3+0x60>
 10886d4:	00800204 	movi	r2,8
 10886d8:	1007883a 	mov	r3,r2
 10886dc:	003f1e06 	br	1088358 <__udivdi3+0x1f8>
 10886e0:	197f972e 	bgeu	r3,r5,1088540 <__udivdi3+0x3e0>
 10886e4:	213fff84 	addi	r4,r4,-2
 10886e8:	1cc7883a 	add	r3,r3,r19
 10886ec:	003f9506 	br	1088544 <__udivdi3+0x3e4>
 10886f0:	21bf802e 	bgeu	r4,r6,10884f4 <__udivdi3+0x394>
 10886f4:	ad7fff84 	addi	r21,r21,-2
 10886f8:	24c9883a 	add	r4,r4,r19
 10886fc:	003f7e06 	br	10884f8 <__udivdi3+0x398>
 1088700:	1805883a 	mov	r2,r3
 1088704:	003fd406 	br	1088658 <__udivdi3+0x4f8>
 1088708:	102b883a 	mov	r21,r2
 108870c:	003fbf06 	br	108860c <__udivdi3+0x4ac>
 1088710:	8c7fff84 	addi	r17,r17,-2
 1088714:	2409883a 	add	r4,r4,r16
 1088718:	003f3006 	br	10883dc <__udivdi3+0x27c>
 108871c:	94bfff84 	addi	r18,r18,-2
 1088720:	1c07883a 	add	r3,r3,r16
 1088724:	003ec806 	br	1088248 <__udivdi3+0xe8>

01088728 <__umoddi3>:
 1088728:	defff504 	addi	sp,sp,-44
 108872c:	dd000515 	stw	r20,20(sp)
 1088730:	dcc00415 	stw	r19,16(sp)
 1088734:	dc800315 	stw	r18,12(sp)
 1088738:	dc400215 	stw	r17,8(sp)
 108873c:	dc000115 	stw	r16,4(sp)
 1088740:	dfc00a15 	stw	ra,40(sp)
 1088744:	df000915 	stw	fp,36(sp)
 1088748:	ddc00815 	stw	r23,32(sp)
 108874c:	dd800715 	stw	r22,28(sp)
 1088750:	dd400615 	stw	r21,24(sp)
 1088754:	2025883a 	mov	r18,r4
 1088758:	2823883a 	mov	r17,r5
 108875c:	3021883a 	mov	r16,r6
 1088760:	2027883a 	mov	r19,r4
 1088764:	2829883a 	mov	r20,r5
 1088768:	3800351e 	bne	r7,zero,1088840 <__umoddi3+0x118>
 108876c:	29804d2e 	bgeu	r5,r6,10888a4 <__umoddi3+0x17c>
 1088770:	00bfffd4 	movui	r2,65535
 1088774:	11809a36 	bltu	r2,r6,10889e0 <__umoddi3+0x2b8>
 1088778:	00803fc4 	movi	r2,255
 108877c:	11813936 	bltu	r2,r6,1088c64 <__umoddi3+0x53c>
 1088780:	0005883a 	mov	r2,zero
 1088784:	0009883a 	mov	r4,zero
 1088788:	3084d83a 	srl	r2,r6,r2
 108878c:	00c04274 	movhi	r3,265
 1088790:	18efac04 	addi	r3,r3,-16720
 1088794:	05400804 	movi	r21,32
 1088798:	1885883a 	add	r2,r3,r2
 108879c:	10800003 	ldbu	r2,0(r2)
 10887a0:	1109883a 	add	r4,r2,r4
 10887a4:	a92bc83a 	sub	r21,r21,r4
 10887a8:	a800ec26 	beq	r21,zero,1088b5c <__umoddi3+0x434>
 10887ac:	8d62983a 	sll	r17,r17,r21
 10887b0:	9108d83a 	srl	r4,r18,r4
 10887b4:	3560983a 	sll	r16,r6,r21
 10887b8:	9566983a 	sll	r19,r18,r21
 10887bc:	8928b03a 	or	r20,r17,r4
 10887c0:	8022d43a 	srli	r17,r16,16
 10887c4:	a009883a 	mov	r4,r20
 10887c8:	84bfffcc 	andi	r18,r16,65535
 10887cc:	880b883a 	mov	r5,r17
 10887d0:	10895b00 	call	10895b0 <__umodsi3>
 10887d4:	a009883a 	mov	r4,r20
 10887d8:	880b883a 	mov	r5,r17
 10887dc:	102d883a 	mov	r22,r2
 10887e0:	10895a80 	call	10895a8 <__udivsi3>
 10887e4:	b02c943a 	slli	r22,r22,16
 10887e8:	9806d43a 	srli	r3,r19,16
 10887ec:	1485383a 	mul	r2,r2,r18
 10887f0:	b0c6b03a 	or	r3,r22,r3
 10887f4:	1880042e 	bgeu	r3,r2,1088808 <__umoddi3+0xe0>
 10887f8:	1c07883a 	add	r3,r3,r16
 10887fc:	1c000236 	bltu	r3,r16,1088808 <__umoddi3+0xe0>
 1088800:	1880012e 	bgeu	r3,r2,1088808 <__umoddi3+0xe0>
 1088804:	1c07883a 	add	r3,r3,r16
 1088808:	18a9c83a 	sub	r20,r3,r2
 108880c:	a009883a 	mov	r4,r20
 1088810:	880b883a 	mov	r5,r17
 1088814:	10895b00 	call	10895b0 <__umodsi3>
 1088818:	102d883a 	mov	r22,r2
 108881c:	a009883a 	mov	r4,r20
 1088820:	880b883a 	mov	r5,r17
 1088824:	10895a80 	call	10895a8 <__udivsi3>
 1088828:	b02c943a 	slli	r22,r22,16
 108882c:	1485383a 	mul	r2,r2,r18
 1088830:	9cffffcc 	andi	r19,r19,65535
 1088834:	b4e6b03a 	or	r19,r22,r19
 1088838:	9880522e 	bgeu	r19,r2,1088984 <__umoddi3+0x25c>
 108883c:	00004d06 	br	1088974 <__umoddi3+0x24c>
 1088840:	29c05436 	bltu	r5,r7,1088994 <__umoddi3+0x26c>
 1088844:	00bfffd4 	movui	r2,65535
 1088848:	11c0602e 	bgeu	r2,r7,10889cc <__umoddi3+0x2a4>
 108884c:	00804034 	movhi	r2,256
 1088850:	10bfffc4 	addi	r2,r2,-1
 1088854:	11c0f736 	bltu	r2,r7,1088c34 <__umoddi3+0x50c>
 1088858:	00c00404 	movi	r3,16
 108885c:	1827883a 	mov	r19,r3
 1088860:	38c6d83a 	srl	r3,r7,r3
 1088864:	01004274 	movhi	r4,265
 1088868:	212fac04 	addi	r4,r4,-16720
 108886c:	04000804 	movi	r16,32
 1088870:	20c7883a 	add	r3,r4,r3
 1088874:	18800003 	ldbu	r2,0(r3)
 1088878:	14e7883a 	add	r19,r2,r19
 108887c:	84e1c83a 	sub	r16,r16,r19
 1088880:	8000621e 	bne	r16,zero,1088a0c <__umoddi3+0x2e4>
 1088884:	3c400136 	bltu	r7,r17,108888c <__umoddi3+0x164>
 1088888:	91810336 	bltu	r18,r6,1088c98 <__umoddi3+0x570>
 108888c:	9185c83a 	sub	r2,r18,r6
 1088890:	89e3c83a 	sub	r17,r17,r7
 1088894:	90a5803a 	cmpltu	r18,r18,r2
 1088898:	8ca9c83a 	sub	r20,r17,r18
 108889c:	a007883a 	mov	r3,r20
 10888a0:	00003e06 	br	108899c <__umoddi3+0x274>
 10888a4:	3000041e 	bne	r6,zero,10888b8 <__umoddi3+0x190>
 10888a8:	01000044 	movi	r4,1
 10888ac:	000b883a 	mov	r5,zero
 10888b0:	10895a80 	call	10895a8 <__udivsi3>
 10888b4:	1021883a 	mov	r16,r2
 10888b8:	00bfffd4 	movui	r2,65535
 10888bc:	14004e2e 	bgeu	r2,r16,10889f8 <__umoddi3+0x2d0>
 10888c0:	00804034 	movhi	r2,256
 10888c4:	10bfffc4 	addi	r2,r2,-1
 10888c8:	1400e336 	bltu	r2,r16,1088c58 <__umoddi3+0x530>
 10888cc:	00800404 	movi	r2,16
 10888d0:	1007883a 	mov	r3,r2
 10888d4:	8084d83a 	srl	r2,r16,r2
 10888d8:	01004274 	movhi	r4,265
 10888dc:	212fac04 	addi	r4,r4,-16720
 10888e0:	05400804 	movi	r21,32
 10888e4:	2085883a 	add	r2,r4,r2
 10888e8:	10800003 	ldbu	r2,0(r2)
 10888ec:	10c7883a 	add	r3,r2,r3
 10888f0:	a8ebc83a 	sub	r21,r21,r3
 10888f4:	a8009b1e 	bne	r21,zero,1088b64 <__umoddi3+0x43c>
 10888f8:	8028d43a 	srli	r20,r16,16
 10888fc:	8c23c83a 	sub	r17,r17,r16
 1088900:	85bfffcc 	andi	r22,r16,65535
 1088904:	8809883a 	mov	r4,r17
 1088908:	a00b883a 	mov	r5,r20
 108890c:	10895b00 	call	10895b0 <__umodsi3>
 1088910:	8809883a 	mov	r4,r17
 1088914:	a00b883a 	mov	r5,r20
 1088918:	1025883a 	mov	r18,r2
 108891c:	10895a80 	call	10895a8 <__udivsi3>
 1088920:	9024943a 	slli	r18,r18,16
 1088924:	9806d43a 	srli	r3,r19,16
 1088928:	1585383a 	mul	r2,r2,r22
 108892c:	90c6b03a 	or	r3,r18,r3
 1088930:	1880032e 	bgeu	r3,r2,1088940 <__umoddi3+0x218>
 1088934:	1c07883a 	add	r3,r3,r16
 1088938:	1c000136 	bltu	r3,r16,1088940 <__umoddi3+0x218>
 108893c:	1880d436 	bltu	r3,r2,1088c90 <__umoddi3+0x568>
 1088940:	18a3c83a 	sub	r17,r3,r2
 1088944:	8809883a 	mov	r4,r17
 1088948:	a00b883a 	mov	r5,r20
 108894c:	10895b00 	call	10895b0 <__umodsi3>
 1088950:	1025883a 	mov	r18,r2
 1088954:	8809883a 	mov	r4,r17
 1088958:	a00b883a 	mov	r5,r20
 108895c:	10895a80 	call	10895a8 <__udivsi3>
 1088960:	9024943a 	slli	r18,r18,16
 1088964:	1585383a 	mul	r2,r2,r22
 1088968:	9cffffcc 	andi	r19,r19,65535
 108896c:	94e6b03a 	or	r19,r18,r19
 1088970:	9880042e 	bgeu	r19,r2,1088984 <__umoddi3+0x25c>
 1088974:	9c27883a 	add	r19,r19,r16
 1088978:	9c000236 	bltu	r19,r16,1088984 <__umoddi3+0x25c>
 108897c:	9880012e 	bgeu	r19,r2,1088984 <__umoddi3+0x25c>
 1088980:	9c27883a 	add	r19,r19,r16
 1088984:	98a7c83a 	sub	r19,r19,r2
 1088988:	9d44d83a 	srl	r2,r19,r21
 108898c:	0007883a 	mov	r3,zero
 1088990:	00000206 	br	108899c <__umoddi3+0x274>
 1088994:	2005883a 	mov	r2,r4
 1088998:	2807883a 	mov	r3,r5
 108899c:	dfc00a17 	ldw	ra,40(sp)
 10889a0:	df000917 	ldw	fp,36(sp)
 10889a4:	ddc00817 	ldw	r23,32(sp)
 10889a8:	dd800717 	ldw	r22,28(sp)
 10889ac:	dd400617 	ldw	r21,24(sp)
 10889b0:	dd000517 	ldw	r20,20(sp)
 10889b4:	dcc00417 	ldw	r19,16(sp)
 10889b8:	dc800317 	ldw	r18,12(sp)
 10889bc:	dc400217 	ldw	r17,8(sp)
 10889c0:	dc000117 	ldw	r16,4(sp)
 10889c4:	dec00b04 	addi	sp,sp,44
 10889c8:	f800283a 	ret
 10889cc:	00803fc4 	movi	r2,255
 10889d0:	11c09536 	bltu	r2,r7,1088c28 <__umoddi3+0x500>
 10889d4:	0007883a 	mov	r3,zero
 10889d8:	0027883a 	mov	r19,zero
 10889dc:	003fa006 	br	1088860 <__umoddi3+0x138>
 10889e0:	00804034 	movhi	r2,256
 10889e4:	10bfffc4 	addi	r2,r2,-1
 10889e8:	11809536 	bltu	r2,r6,1088c40 <__umoddi3+0x518>
 10889ec:	00800404 	movi	r2,16
 10889f0:	1009883a 	mov	r4,r2
 10889f4:	003f6406 	br	1088788 <__umoddi3+0x60>
 10889f8:	00803fc4 	movi	r2,255
 10889fc:	14009336 	bltu	r2,r16,1088c4c <__umoddi3+0x524>
 1088a00:	0005883a 	mov	r2,zero
 1088a04:	0007883a 	mov	r3,zero
 1088a08:	003fb206 	br	10888d4 <__umoddi3+0x1ac>
 1088a0c:	34c4d83a 	srl	r2,r6,r19
 1088a10:	3c0e983a 	sll	r7,r7,r16
 1088a14:	8ceed83a 	srl	r23,r17,r19
 1088a18:	8c22983a 	sll	r17,r17,r16
 1088a1c:	38a8b03a 	or	r20,r7,r2
 1088a20:	a02ad43a 	srli	r21,r20,16
 1088a24:	94c4d83a 	srl	r2,r18,r19
 1088a28:	b809883a 	mov	r4,r23
 1088a2c:	a80b883a 	mov	r5,r21
 1088a30:	88a2b03a 	or	r17,r17,r2
 1088a34:	342c983a 	sll	r22,r6,r16
 1088a38:	10895b00 	call	10895b0 <__umodsi3>
 1088a3c:	b809883a 	mov	r4,r23
 1088a40:	a80b883a 	mov	r5,r21
 1088a44:	d8800015 	stw	r2,0(sp)
 1088a48:	10895a80 	call	10895a8 <__udivsi3>
 1088a4c:	d8c00017 	ldw	r3,0(sp)
 1088a50:	102f883a 	mov	r23,r2
 1088a54:	a73fffcc 	andi	fp,r20,65535
 1088a58:	180a943a 	slli	r5,r3,16
 1088a5c:	8804d43a 	srli	r2,r17,16
 1088a60:	bf09383a 	mul	r4,r23,fp
 1088a64:	9424983a 	sll	r18,r18,r16
 1088a68:	288ab03a 	or	r5,r5,r2
 1088a6c:	2900042e 	bgeu	r5,r4,1088a80 <__umoddi3+0x358>
 1088a70:	2d0b883a 	add	r5,r5,r20
 1088a74:	b8bfffc4 	addi	r2,r23,-1
 1088a78:	2d00812e 	bgeu	r5,r20,1088c80 <__umoddi3+0x558>
 1088a7c:	102f883a 	mov	r23,r2
 1088a80:	2907c83a 	sub	r3,r5,r4
 1088a84:	1809883a 	mov	r4,r3
 1088a88:	a80b883a 	mov	r5,r21
 1088a8c:	d8c00015 	stw	r3,0(sp)
 1088a90:	10895b00 	call	10895b0 <__umodsi3>
 1088a94:	d8c00017 	ldw	r3,0(sp)
 1088a98:	a80b883a 	mov	r5,r21
 1088a9c:	d8800015 	stw	r2,0(sp)
 1088aa0:	1809883a 	mov	r4,r3
 1088aa4:	10895a80 	call	10895a8 <__udivsi3>
 1088aa8:	d9800017 	ldw	r6,0(sp)
 1088aac:	8c7fffcc 	andi	r17,r17,65535
 1088ab0:	3008943a 	slli	r4,r6,16
 1088ab4:	170d383a 	mul	r6,r2,fp
 1088ab8:	2448b03a 	or	r4,r4,r17
 1088abc:	2180042e 	bgeu	r4,r6,1088ad0 <__umoddi3+0x3a8>
 1088ac0:	2509883a 	add	r4,r4,r20
 1088ac4:	10ffffc4 	addi	r3,r2,-1
 1088ac8:	2500692e 	bgeu	r4,r20,1088c70 <__umoddi3+0x548>
 1088acc:	1805883a 	mov	r2,r3
 1088ad0:	b82e943a 	slli	r23,r23,16
 1088ad4:	b010d43a 	srli	r8,r22,16
 1088ad8:	b1ffffcc 	andi	r7,r22,65535
 1088adc:	15eeb03a 	or	r23,r2,r23
 1088ae0:	b8bfffcc 	andi	r2,r23,65535
 1088ae4:	b82ed43a 	srli	r23,r23,16
 1088ae8:	11c7383a 	mul	r3,r2,r7
 1088aec:	1205383a 	mul	r2,r2,r8
 1088af0:	b9cf383a 	mul	r7,r23,r7
 1088af4:	400b883a 	mov	r5,r8
 1088af8:	1810d43a 	srli	r8,r3,16
 1088afc:	3885883a 	add	r2,r7,r2
 1088b00:	2189c83a 	sub	r4,r4,r6
 1088b04:	1205883a 	add	r2,r2,r8
 1088b08:	b94b383a 	mul	r5,r23,r5
 1088b0c:	11c0022e 	bgeu	r2,r7,1088b18 <__umoddi3+0x3f0>
 1088b10:	01800074 	movhi	r6,1
 1088b14:	298b883a 	add	r5,r5,r6
 1088b18:	100cd43a 	srli	r6,r2,16
 1088b1c:	1004943a 	slli	r2,r2,16
 1088b20:	18ffffcc 	andi	r3,r3,65535
 1088b24:	298b883a 	add	r5,r5,r6
 1088b28:	10c5883a 	add	r2,r2,r3
 1088b2c:	21403836 	bltu	r4,r5,1088c10 <__umoddi3+0x4e8>
 1088b30:	21405c26 	beq	r4,r5,1088ca4 <__umoddi3+0x57c>
 1088b34:	2147c83a 	sub	r3,r4,r5
 1088b38:	102d883a 	mov	r22,r2
 1088b3c:	95adc83a 	sub	r22,r18,r22
 1088b40:	95a5803a 	cmpltu	r18,r18,r22
 1088b44:	1c87c83a 	sub	r3,r3,r18
 1088b48:	1cc4983a 	sll	r2,r3,r19
 1088b4c:	b42cd83a 	srl	r22,r22,r16
 1088b50:	1c06d83a 	srl	r3,r3,r16
 1088b54:	1584b03a 	or	r2,r2,r22
 1088b58:	003f9006 	br	108899c <__umoddi3+0x274>
 1088b5c:	002b883a 	mov	r21,zero
 1088b60:	003f1706 	br	10887c0 <__umoddi3+0x98>
 1088b64:	8560983a 	sll	r16,r16,r21
 1088b68:	88e6d83a 	srl	r19,r17,r3
 1088b6c:	90c6d83a 	srl	r3,r18,r3
 1088b70:	8028d43a 	srli	r20,r16,16
 1088b74:	8d62983a 	sll	r17,r17,r21
 1088b78:	9809883a 	mov	r4,r19
 1088b7c:	a00b883a 	mov	r5,r20
 1088b80:	88eeb03a 	or	r23,r17,r3
 1088b84:	10895b00 	call	10895b0 <__umodsi3>
 1088b88:	9809883a 	mov	r4,r19
 1088b8c:	a00b883a 	mov	r5,r20
 1088b90:	1023883a 	mov	r17,r2
 1088b94:	10895a80 	call	10895a8 <__udivsi3>
 1088b98:	85bfffcc 	andi	r22,r16,65535
 1088b9c:	880a943a 	slli	r5,r17,16
 1088ba0:	b806d43a 	srli	r3,r23,16
 1088ba4:	1585383a 	mul	r2,r2,r22
 1088ba8:	9566983a 	sll	r19,r18,r21
 1088bac:	28cab03a 	or	r5,r5,r3
 1088bb0:	2880042e 	bgeu	r5,r2,1088bc4 <__umoddi3+0x49c>
 1088bb4:	2c0b883a 	add	r5,r5,r16
 1088bb8:	2c000236 	bltu	r5,r16,1088bc4 <__umoddi3+0x49c>
 1088bbc:	2880012e 	bgeu	r5,r2,1088bc4 <__umoddi3+0x49c>
 1088bc0:	2c0b883a 	add	r5,r5,r16
 1088bc4:	28a5c83a 	sub	r18,r5,r2
 1088bc8:	9009883a 	mov	r4,r18
 1088bcc:	a00b883a 	mov	r5,r20
 1088bd0:	10895b00 	call	10895b0 <__umodsi3>
 1088bd4:	1023883a 	mov	r17,r2
 1088bd8:	9009883a 	mov	r4,r18
 1088bdc:	a00b883a 	mov	r5,r20
 1088be0:	10895a80 	call	10895a8 <__udivsi3>
 1088be4:	8822943a 	slli	r17,r17,16
 1088be8:	1585383a 	mul	r2,r2,r22
 1088bec:	bdffffcc 	andi	r23,r23,65535
 1088bf0:	8de2b03a 	or	r17,r17,r23
 1088bf4:	8880042e 	bgeu	r17,r2,1088c08 <__umoddi3+0x4e0>
 1088bf8:	8c23883a 	add	r17,r17,r16
 1088bfc:	8c000236 	bltu	r17,r16,1088c08 <__umoddi3+0x4e0>
 1088c00:	8880012e 	bgeu	r17,r2,1088c08 <__umoddi3+0x4e0>
 1088c04:	8c23883a 	add	r17,r17,r16
 1088c08:	88a3c83a 	sub	r17,r17,r2
 1088c0c:	003f3d06 	br	1088904 <__umoddi3+0x1dc>
 1088c10:	15adc83a 	sub	r22,r2,r22
 1088c14:	2d07c83a 	sub	r3,r5,r20
 1088c18:	1585803a 	cmpltu	r2,r2,r22
 1088c1c:	1887c83a 	sub	r3,r3,r2
 1088c20:	20c7c83a 	sub	r3,r4,r3
 1088c24:	003fc506 	br	1088b3c <__umoddi3+0x414>
 1088c28:	00c00204 	movi	r3,8
 1088c2c:	1827883a 	mov	r19,r3
 1088c30:	003f0b06 	br	1088860 <__umoddi3+0x138>
 1088c34:	00c00604 	movi	r3,24
 1088c38:	1827883a 	mov	r19,r3
 1088c3c:	003f0806 	br	1088860 <__umoddi3+0x138>
 1088c40:	00800604 	movi	r2,24
 1088c44:	1009883a 	mov	r4,r2
 1088c48:	003ecf06 	br	1088788 <__umoddi3+0x60>
 1088c4c:	00800204 	movi	r2,8
 1088c50:	1007883a 	mov	r3,r2
 1088c54:	003f1f06 	br	10888d4 <__umoddi3+0x1ac>
 1088c58:	00800604 	movi	r2,24
 1088c5c:	1007883a 	mov	r3,r2
 1088c60:	003f1c06 	br	10888d4 <__umoddi3+0x1ac>
 1088c64:	00800204 	movi	r2,8
 1088c68:	1009883a 	mov	r4,r2
 1088c6c:	003ec606 	br	1088788 <__umoddi3+0x60>
 1088c70:	21bf962e 	bgeu	r4,r6,1088acc <__umoddi3+0x3a4>
 1088c74:	10bfff84 	addi	r2,r2,-2
 1088c78:	2509883a 	add	r4,r4,r20
 1088c7c:	003f9406 	br	1088ad0 <__umoddi3+0x3a8>
 1088c80:	293f7e2e 	bgeu	r5,r4,1088a7c <__umoddi3+0x354>
 1088c84:	bdffff84 	addi	r23,r23,-2
 1088c88:	2d0b883a 	add	r5,r5,r20
 1088c8c:	003f7c06 	br	1088a80 <__umoddi3+0x358>
 1088c90:	1c07883a 	add	r3,r3,r16
 1088c94:	003f2a06 	br	1088940 <__umoddi3+0x218>
 1088c98:	9005883a 	mov	r2,r18
 1088c9c:	a007883a 	mov	r3,r20
 1088ca0:	003f3e06 	br	108899c <__umoddi3+0x274>
 1088ca4:	90bfda36 	bltu	r18,r2,1088c10 <__umoddi3+0x4e8>
 1088ca8:	102d883a 	mov	r22,r2
 1088cac:	0007883a 	mov	r3,zero
 1088cb0:	003fa206 	br	1088b3c <__umoddi3+0x414>

01088cb4 <_fpadd_parts>:
 1088cb4:	2005883a 	mov	r2,r4
 1088cb8:	21000017 	ldw	r4,0(r4)
 1088cbc:	01c00044 	movi	r7,1
 1088cc0:	3900622e 	bgeu	r7,r4,1088e4c <_fpadd_parts+0x198>
 1088cc4:	28c00017 	ldw	r3,0(r5)
 1088cc8:	38c05f2e 	bgeu	r7,r3,1088e48 <_fpadd_parts+0x194>
 1088ccc:	01c00104 	movi	r7,4
 1088cd0:	21c0c626 	beq	r4,r7,1088fec <_fpadd_parts+0x338>
 1088cd4:	19c05c26 	beq	r3,r7,1088e48 <_fpadd_parts+0x194>
 1088cd8:	01c00084 	movi	r7,2
 1088cdc:	19c06b26 	beq	r3,r7,1088e8c <_fpadd_parts+0x1d8>
 1088ce0:	21c05926 	beq	r4,r7,1088e48 <_fpadd_parts+0x194>
 1088ce4:	11c00217 	ldw	r7,8(r2)
 1088ce8:	2ac00217 	ldw	r11,8(r5)
 1088cec:	13000317 	ldw	r12,12(r2)
 1088cf0:	13400417 	ldw	r13,16(r2)
 1088cf4:	3ac9c83a 	sub	r4,r7,r11
 1088cf8:	2a000317 	ldw	r8,12(r5)
 1088cfc:	2a400417 	ldw	r9,16(r5)
 1088d00:	2015883a 	mov	r10,r4
 1088d04:	20007516 	blt	r4,zero,1088edc <_fpadd_parts+0x228>
 1088d08:	00c00fc4 	movi	r3,63
 1088d0c:	1a805016 	blt	r3,r10,1088e50 <_fpadd_parts+0x19c>
 1088d10:	0100870e 	bge	zero,r4,1088f30 <_fpadd_parts+0x27c>
 1088d14:	50fff804 	addi	r3,r10,-32
 1088d18:	18009916 	blt	r3,zero,1088f80 <_fpadd_parts+0x2cc>
 1088d1c:	48d6d83a 	srl	r11,r9,r3
 1088d20:	001d883a 	mov	r14,zero
 1088d24:	18009e16 	blt	r3,zero,1088fa0 <_fpadd_parts+0x2ec>
 1088d28:	01000044 	movi	r4,1
 1088d2c:	20c6983a 	sll	r3,r4,r3
 1088d30:	0015883a 	mov	r10,zero
 1088d34:	513fffc4 	addi	r4,r10,-1
 1088d38:	2295403a 	cmpgeu	r10,r4,r10
 1088d3c:	1a87c83a 	sub	r3,r3,r10
 1088d40:	1a52703a 	and	r9,r3,r9
 1088d44:	2210703a 	and	r8,r4,r8
 1088d48:	4250b03a 	or	r8,r8,r9
 1088d4c:	4010c03a 	cmpne	r8,r8,zero
 1088d50:	42d0b03a 	or	r8,r8,r11
 1088d54:	7013883a 	mov	r9,r14
 1088d58:	11000117 	ldw	r4,4(r2)
 1088d5c:	28800117 	ldw	r2,4(r5)
 1088d60:	20804126 	beq	r4,r2,1088e68 <_fpadd_parts+0x1b4>
 1088d64:	20006326 	beq	r4,zero,1088ef4 <_fpadd_parts+0x240>
 1088d68:	4305c83a 	sub	r2,r8,r12
 1088d6c:	4091803a 	cmpltu	r8,r8,r2
 1088d70:	4b47c83a 	sub	r3,r9,r13
 1088d74:	1a07c83a 	sub	r3,r3,r8
 1088d78:	18006316 	blt	r3,zero,1088f08 <_fpadd_parts+0x254>
 1088d7c:	30000115 	stw	zero,4(r6)
 1088d80:	31c00215 	stw	r7,8(r6)
 1088d84:	30800315 	stw	r2,12(r6)
 1088d88:	30c00415 	stw	r3,16(r6)
 1088d8c:	11ffffc4 	addi	r7,r2,-1
 1088d90:	388b403a 	cmpgeu	r5,r7,r2
 1088d94:	194bc83a 	sub	r5,r3,r5
 1088d98:	01040034 	movhi	r4,4096
 1088d9c:	213fffc4 	addi	r4,r4,-1
 1088da0:	21401736 	bltu	r4,r5,1088e00 <_fpadd_parts+0x14c>
 1088da4:	29008226 	beq	r5,r4,1088fb0 <_fpadd_parts+0x2fc>
 1088da8:	31400217 	ldw	r5,8(r6)
 1088dac:	02840034 	movhi	r10,4096
 1088db0:	52bfffc4 	addi	r10,r10,-1
 1088db4:	033fff84 	movi	r12,-2
 1088db8:	297fffc4 	addi	r5,r5,-1
 1088dbc:	00000106 	br	1088dc4 <_fpadd_parts+0x110>
 1088dc0:	3a804a26 	beq	r7,r10,1088eec <_fpadd_parts+0x238>
 1088dc4:	1089883a 	add	r4,r2,r2
 1088dc8:	2091803a 	cmpltu	r8,r4,r2
 1088dcc:	18c7883a 	add	r3,r3,r3
 1088dd0:	227fffc4 	addi	r9,r4,-1
 1088dd4:	40d1883a 	add	r8,r8,r3
 1088dd8:	490f403a 	cmpgeu	r7,r9,r4
 1088ddc:	41cfc83a 	sub	r7,r8,r7
 1088de0:	2817883a 	mov	r11,r5
 1088de4:	2005883a 	mov	r2,r4
 1088de8:	4007883a 	mov	r3,r8
 1088dec:	297fffc4 	addi	r5,r5,-1
 1088df0:	51fff32e 	bgeu	r10,r7,1088dc0 <_fpadd_parts+0x10c>
 1088df4:	31000315 	stw	r4,12(r6)
 1088df8:	32000415 	stw	r8,16(r6)
 1088dfc:	32c00215 	stw	r11,8(r6)
 1088e00:	010000c4 	movi	r4,3
 1088e04:	31000015 	stw	r4,0(r6)
 1088e08:	01080034 	movhi	r4,8192
 1088e0c:	213fffc4 	addi	r4,r4,-1
 1088e10:	20c00b2e 	bgeu	r4,r3,1088e40 <_fpadd_parts+0x18c>
 1088e14:	180e97fa 	slli	r7,r3,31
 1088e18:	1008d07a 	srli	r4,r2,1
 1088e1c:	31400217 	ldw	r5,8(r6)
 1088e20:	1806d07a 	srli	r3,r3,1
 1088e24:	1080004c 	andi	r2,r2,1
 1088e28:	3908b03a 	or	r4,r7,r4
 1088e2c:	1108b03a 	or	r4,r2,r4
 1088e30:	29400044 	addi	r5,r5,1
 1088e34:	31000315 	stw	r4,12(r6)
 1088e38:	30c00415 	stw	r3,16(r6)
 1088e3c:	31400215 	stw	r5,8(r6)
 1088e40:	3005883a 	mov	r2,r6
 1088e44:	f800283a 	ret
 1088e48:	2805883a 	mov	r2,r5
 1088e4c:	f800283a 	ret
 1088e50:	59c01e0e 	bge	r11,r7,1088ecc <_fpadd_parts+0x218>
 1088e54:	11000117 	ldw	r4,4(r2)
 1088e58:	28800117 	ldw	r2,4(r5)
 1088e5c:	0011883a 	mov	r8,zero
 1088e60:	0013883a 	mov	r9,zero
 1088e64:	20bfbf1e 	bne	r4,r2,1088d64 <_fpadd_parts+0xb0>
 1088e68:	4305883a 	add	r2,r8,r12
 1088e6c:	1207803a 	cmpltu	r3,r2,r8
 1088e70:	4b53883a 	add	r9,r9,r13
 1088e74:	1a47883a 	add	r3,r3,r9
 1088e78:	31000115 	stw	r4,4(r6)
 1088e7c:	31c00215 	stw	r7,8(r6)
 1088e80:	30800315 	stw	r2,12(r6)
 1088e84:	30c00415 	stw	r3,16(r6)
 1088e88:	003fdd06 	br	1088e00 <_fpadd_parts+0x14c>
 1088e8c:	20ffef1e 	bne	r4,r3,1088e4c <_fpadd_parts+0x198>
 1088e90:	31000015 	stw	r4,0(r6)
 1088e94:	10c00117 	ldw	r3,4(r2)
 1088e98:	30c00115 	stw	r3,4(r6)
 1088e9c:	10c00217 	ldw	r3,8(r2)
 1088ea0:	11000117 	ldw	r4,4(r2)
 1088ea4:	29400117 	ldw	r5,4(r5)
 1088ea8:	30c00215 	stw	r3,8(r6)
 1088eac:	10c00317 	ldw	r3,12(r2)
 1088eb0:	2908703a 	and	r4,r5,r4
 1088eb4:	30c00315 	stw	r3,12(r6)
 1088eb8:	10c00417 	ldw	r3,16(r2)
 1088ebc:	31000115 	stw	r4,4(r6)
 1088ec0:	3005883a 	mov	r2,r6
 1088ec4:	30c00415 	stw	r3,16(r6)
 1088ec8:	f800283a 	ret
 1088ecc:	580f883a 	mov	r7,r11
 1088ed0:	0019883a 	mov	r12,zero
 1088ed4:	001b883a 	mov	r13,zero
 1088ed8:	003f9f06 	br	1088d58 <_fpadd_parts+0xa4>
 1088edc:	0115c83a 	sub	r10,zero,r4
 1088ee0:	00c00fc4 	movi	r3,63
 1088ee4:	1abfda16 	blt	r3,r10,1088e50 <_fpadd_parts+0x19c>
 1088ee8:	003f8906 	br	1088d10 <_fpadd_parts+0x5c>
 1088eec:	627fb52e 	bgeu	r12,r9,1088dc4 <_fpadd_parts+0x110>
 1088ef0:	003fc006 	br	1088df4 <_fpadd_parts+0x140>
 1088ef4:	6205c83a 	sub	r2,r12,r8
 1088ef8:	6099803a 	cmpltu	r12,r12,r2
 1088efc:	6a47c83a 	sub	r3,r13,r9
 1088f00:	1b07c83a 	sub	r3,r3,r12
 1088f04:	183f9d0e 	bge	r3,zero,1088d7c <_fpadd_parts+0xc8>
 1088f08:	0085c83a 	sub	r2,zero,r2
 1088f0c:	1008c03a 	cmpne	r4,r2,zero
 1088f10:	00c7c83a 	sub	r3,zero,r3
 1088f14:	1907c83a 	sub	r3,r3,r4
 1088f18:	01000044 	movi	r4,1
 1088f1c:	31000115 	stw	r4,4(r6)
 1088f20:	31c00215 	stw	r7,8(r6)
 1088f24:	30800315 	stw	r2,12(r6)
 1088f28:	30c00415 	stw	r3,16(r6)
 1088f2c:	003f9706 	br	1088d8c <_fpadd_parts+0xd8>
 1088f30:	203f8926 	beq	r4,zero,1088d58 <_fpadd_parts+0xa4>
 1088f34:	50fff804 	addi	r3,r10,-32
 1088f38:	3a8f883a 	add	r7,r7,r10
 1088f3c:	18002316 	blt	r3,zero,1088fcc <_fpadd_parts+0x318>
 1088f40:	68d6d83a 	srl	r11,r13,r3
 1088f44:	001d883a 	mov	r14,zero
 1088f48:	18001c16 	blt	r3,zero,1088fbc <_fpadd_parts+0x308>
 1088f4c:	01000044 	movi	r4,1
 1088f50:	20c6983a 	sll	r3,r4,r3
 1088f54:	0015883a 	mov	r10,zero
 1088f58:	513fffc4 	addi	r4,r10,-1
 1088f5c:	2295403a 	cmpgeu	r10,r4,r10
 1088f60:	1a87c83a 	sub	r3,r3,r10
 1088f64:	1b5a703a 	and	r13,r3,r13
 1088f68:	2318703a 	and	r12,r4,r12
 1088f6c:	6358b03a 	or	r12,r12,r13
 1088f70:	6018c03a 	cmpne	r12,r12,zero
 1088f74:	62d8b03a 	or	r12,r12,r11
 1088f78:	701b883a 	mov	r13,r14
 1088f7c:	003f7606 	br	1088d58 <_fpadd_parts+0xa4>
 1088f80:	4808907a 	slli	r4,r9,1
 1088f84:	02c007c4 	movi	r11,31
 1088f88:	5a97c83a 	sub	r11,r11,r10
 1088f8c:	22c8983a 	sll	r4,r4,r11
 1088f90:	4296d83a 	srl	r11,r8,r10
 1088f94:	4a9cd83a 	srl	r14,r9,r10
 1088f98:	22d6b03a 	or	r11,r4,r11
 1088f9c:	003f6106 	br	1088d24 <_fpadd_parts+0x70>
 1088fa0:	00c00044 	movi	r3,1
 1088fa4:	1a94983a 	sll	r10,r3,r10
 1088fa8:	0007883a 	mov	r3,zero
 1088fac:	003f6106 	br	1088d34 <_fpadd_parts+0x80>
 1088fb0:	013fff84 	movi	r4,-2
 1088fb4:	21ff7c2e 	bgeu	r4,r7,1088da8 <_fpadd_parts+0xf4>
 1088fb8:	003f9106 	br	1088e00 <_fpadd_parts+0x14c>
 1088fbc:	00c00044 	movi	r3,1
 1088fc0:	1a94983a 	sll	r10,r3,r10
 1088fc4:	0007883a 	mov	r3,zero
 1088fc8:	003fe306 	br	1088f58 <_fpadd_parts+0x2a4>
 1088fcc:	6816907a 	slli	r11,r13,1
 1088fd0:	010007c4 	movi	r4,31
 1088fd4:	2289c83a 	sub	r4,r4,r10
 1088fd8:	5908983a 	sll	r4,r11,r4
 1088fdc:	6296d83a 	srl	r11,r12,r10
 1088fe0:	6a9cd83a 	srl	r14,r13,r10
 1088fe4:	22d6b03a 	or	r11,r4,r11
 1088fe8:	003fd706 	br	1088f48 <_fpadd_parts+0x294>
 1088fec:	193f971e 	bne	r3,r4,1088e4c <_fpadd_parts+0x198>
 1088ff0:	11000117 	ldw	r4,4(r2)
 1088ff4:	28c00117 	ldw	r3,4(r5)
 1088ff8:	20ff9426 	beq	r4,r3,1088e4c <_fpadd_parts+0x198>
 1088ffc:	00804274 	movhi	r2,265
 1089000:	10afa704 	addi	r2,r2,-16740
 1089004:	f800283a 	ret

01089008 <__adddf3>:
 1089008:	deffec04 	addi	sp,sp,-80
 108900c:	d9001115 	stw	r4,68(sp)
 1089010:	d9401215 	stw	r5,72(sp)
 1089014:	d9001104 	addi	r4,sp,68
 1089018:	d9400a04 	addi	r5,sp,40
 108901c:	dfc01315 	stw	ra,76(sp)
 1089020:	d9c01015 	stw	r7,64(sp)
 1089024:	d9800f15 	stw	r6,60(sp)
 1089028:	1080c540 	call	1080c54 <__unpack_d>
 108902c:	d9000f04 	addi	r4,sp,60
 1089030:	d9400504 	addi	r5,sp,20
 1089034:	1080c540 	call	1080c54 <__unpack_d>
 1089038:	d9000a04 	addi	r4,sp,40
 108903c:	d9400504 	addi	r5,sp,20
 1089040:	d80d883a 	mov	r6,sp
 1089044:	1088cb40 	call	1088cb4 <_fpadd_parts>
 1089048:	1009883a 	mov	r4,r2
 108904c:	1080a300 	call	1080a30 <__pack_d>
 1089050:	dfc01317 	ldw	ra,76(sp)
 1089054:	dec01404 	addi	sp,sp,80
 1089058:	f800283a 	ret

0108905c <__subdf3>:
 108905c:	deffec04 	addi	sp,sp,-80
 1089060:	d9001115 	stw	r4,68(sp)
 1089064:	d9401215 	stw	r5,72(sp)
 1089068:	d9001104 	addi	r4,sp,68
 108906c:	d9400a04 	addi	r5,sp,40
 1089070:	dfc01315 	stw	ra,76(sp)
 1089074:	d9c01015 	stw	r7,64(sp)
 1089078:	d9800f15 	stw	r6,60(sp)
 108907c:	1080c540 	call	1080c54 <__unpack_d>
 1089080:	d9000f04 	addi	r4,sp,60
 1089084:	d9400504 	addi	r5,sp,20
 1089088:	1080c540 	call	1080c54 <__unpack_d>
 108908c:	d8800617 	ldw	r2,24(sp)
 1089090:	d9000a04 	addi	r4,sp,40
 1089094:	d9400504 	addi	r5,sp,20
 1089098:	d80d883a 	mov	r6,sp
 108909c:	1080005c 	xori	r2,r2,1
 10890a0:	d8800615 	stw	r2,24(sp)
 10890a4:	1088cb40 	call	1088cb4 <_fpadd_parts>
 10890a8:	1009883a 	mov	r4,r2
 10890ac:	1080a300 	call	1080a30 <__pack_d>
 10890b0:	dfc01317 	ldw	ra,76(sp)
 10890b4:	dec01404 	addi	sp,sp,80
 10890b8:	f800283a 	ret

010890bc <__eqdf2>:
 10890bc:	defff104 	addi	sp,sp,-60
 10890c0:	d9000c15 	stw	r4,48(sp)
 10890c4:	d9400d15 	stw	r5,52(sp)
 10890c8:	d9000c04 	addi	r4,sp,48
 10890cc:	d9400504 	addi	r5,sp,20
 10890d0:	dfc00e15 	stw	ra,56(sp)
 10890d4:	d9800a15 	stw	r6,40(sp)
 10890d8:	d9c00b15 	stw	r7,44(sp)
 10890dc:	1080c540 	call	1080c54 <__unpack_d>
 10890e0:	d9000a04 	addi	r4,sp,40
 10890e4:	d80b883a 	mov	r5,sp
 10890e8:	1080c540 	call	1080c54 <__unpack_d>
 10890ec:	d8c00517 	ldw	r3,20(sp)
 10890f0:	00800044 	movi	r2,1
 10890f4:	10c0052e 	bgeu	r2,r3,108910c <__eqdf2+0x50>
 10890f8:	d8c00017 	ldw	r3,0(sp)
 10890fc:	10c0032e 	bgeu	r2,r3,108910c <__eqdf2+0x50>
 1089100:	d9000504 	addi	r4,sp,20
 1089104:	d80b883a 	mov	r5,sp
 1089108:	10895b80 	call	10895b8 <__fpcmp_parts_d>
 108910c:	dfc00e17 	ldw	ra,56(sp)
 1089110:	dec00f04 	addi	sp,sp,60
 1089114:	f800283a 	ret

01089118 <__nedf2>:
 1089118:	defff104 	addi	sp,sp,-60
 108911c:	d9000c15 	stw	r4,48(sp)
 1089120:	d9400d15 	stw	r5,52(sp)
 1089124:	d9000c04 	addi	r4,sp,48
 1089128:	d9400504 	addi	r5,sp,20
 108912c:	dfc00e15 	stw	ra,56(sp)
 1089130:	d9800a15 	stw	r6,40(sp)
 1089134:	d9c00b15 	stw	r7,44(sp)
 1089138:	1080c540 	call	1080c54 <__unpack_d>
 108913c:	d9000a04 	addi	r4,sp,40
 1089140:	d80b883a 	mov	r5,sp
 1089144:	1080c540 	call	1080c54 <__unpack_d>
 1089148:	d8c00517 	ldw	r3,20(sp)
 108914c:	00800044 	movi	r2,1
 1089150:	10c0052e 	bgeu	r2,r3,1089168 <__nedf2+0x50>
 1089154:	d8c00017 	ldw	r3,0(sp)
 1089158:	10c0032e 	bgeu	r2,r3,1089168 <__nedf2+0x50>
 108915c:	d9000504 	addi	r4,sp,20
 1089160:	d80b883a 	mov	r5,sp
 1089164:	10895b80 	call	10895b8 <__fpcmp_parts_d>
 1089168:	dfc00e17 	ldw	ra,56(sp)
 108916c:	dec00f04 	addi	sp,sp,60
 1089170:	f800283a 	ret

01089174 <__gtdf2>:
 1089174:	defff104 	addi	sp,sp,-60
 1089178:	d9000c15 	stw	r4,48(sp)
 108917c:	d9400d15 	stw	r5,52(sp)
 1089180:	d9000c04 	addi	r4,sp,48
 1089184:	d9400504 	addi	r5,sp,20
 1089188:	dfc00e15 	stw	ra,56(sp)
 108918c:	d9800a15 	stw	r6,40(sp)
 1089190:	d9c00b15 	stw	r7,44(sp)
 1089194:	1080c540 	call	1080c54 <__unpack_d>
 1089198:	d9000a04 	addi	r4,sp,40
 108919c:	d80b883a 	mov	r5,sp
 10891a0:	1080c540 	call	1080c54 <__unpack_d>
 10891a4:	d8c00517 	ldw	r3,20(sp)
 10891a8:	00800044 	movi	r2,1
 10891ac:	10c0082e 	bgeu	r2,r3,10891d0 <__gtdf2+0x5c>
 10891b0:	d8c00017 	ldw	r3,0(sp)
 10891b4:	10c0062e 	bgeu	r2,r3,10891d0 <__gtdf2+0x5c>
 10891b8:	d9000504 	addi	r4,sp,20
 10891bc:	d80b883a 	mov	r5,sp
 10891c0:	10895b80 	call	10895b8 <__fpcmp_parts_d>
 10891c4:	dfc00e17 	ldw	ra,56(sp)
 10891c8:	dec00f04 	addi	sp,sp,60
 10891cc:	f800283a 	ret
 10891d0:	00bfffc4 	movi	r2,-1
 10891d4:	003ffb06 	br	10891c4 <__gtdf2+0x50>

010891d8 <__gedf2>:
 10891d8:	defff104 	addi	sp,sp,-60
 10891dc:	d9000c15 	stw	r4,48(sp)
 10891e0:	d9400d15 	stw	r5,52(sp)
 10891e4:	d9000c04 	addi	r4,sp,48
 10891e8:	d9400504 	addi	r5,sp,20
 10891ec:	dfc00e15 	stw	ra,56(sp)
 10891f0:	d9800a15 	stw	r6,40(sp)
 10891f4:	d9c00b15 	stw	r7,44(sp)
 10891f8:	1080c540 	call	1080c54 <__unpack_d>
 10891fc:	d9000a04 	addi	r4,sp,40
 1089200:	d80b883a 	mov	r5,sp
 1089204:	1080c540 	call	1080c54 <__unpack_d>
 1089208:	d8c00517 	ldw	r3,20(sp)
 108920c:	00800044 	movi	r2,1
 1089210:	10c0082e 	bgeu	r2,r3,1089234 <__gedf2+0x5c>
 1089214:	d8c00017 	ldw	r3,0(sp)
 1089218:	10c0062e 	bgeu	r2,r3,1089234 <__gedf2+0x5c>
 108921c:	d9000504 	addi	r4,sp,20
 1089220:	d80b883a 	mov	r5,sp
 1089224:	10895b80 	call	10895b8 <__fpcmp_parts_d>
 1089228:	dfc00e17 	ldw	ra,56(sp)
 108922c:	dec00f04 	addi	sp,sp,60
 1089230:	f800283a 	ret
 1089234:	00bfffc4 	movi	r2,-1
 1089238:	003ffb06 	br	1089228 <__gedf2+0x50>

0108923c <__ltdf2>:
 108923c:	defff104 	addi	sp,sp,-60
 1089240:	d9000c15 	stw	r4,48(sp)
 1089244:	d9400d15 	stw	r5,52(sp)
 1089248:	d9000c04 	addi	r4,sp,48
 108924c:	d9400504 	addi	r5,sp,20
 1089250:	dfc00e15 	stw	ra,56(sp)
 1089254:	d9800a15 	stw	r6,40(sp)
 1089258:	d9c00b15 	stw	r7,44(sp)
 108925c:	1080c540 	call	1080c54 <__unpack_d>
 1089260:	d9000a04 	addi	r4,sp,40
 1089264:	d80b883a 	mov	r5,sp
 1089268:	1080c540 	call	1080c54 <__unpack_d>
 108926c:	d8c00517 	ldw	r3,20(sp)
 1089270:	00800044 	movi	r2,1
 1089274:	10c0052e 	bgeu	r2,r3,108928c <__ltdf2+0x50>
 1089278:	d8c00017 	ldw	r3,0(sp)
 108927c:	10c0032e 	bgeu	r2,r3,108928c <__ltdf2+0x50>
 1089280:	d9000504 	addi	r4,sp,20
 1089284:	d80b883a 	mov	r5,sp
 1089288:	10895b80 	call	10895b8 <__fpcmp_parts_d>
 108928c:	dfc00e17 	ldw	ra,56(sp)
 1089290:	dec00f04 	addi	sp,sp,60
 1089294:	f800283a 	ret

01089298 <__fixdfsi>:
 1089298:	defff804 	addi	sp,sp,-32
 108929c:	d9000515 	stw	r4,20(sp)
 10892a0:	d9400615 	stw	r5,24(sp)
 10892a4:	d9000504 	addi	r4,sp,20
 10892a8:	d80b883a 	mov	r5,sp
 10892ac:	dfc00715 	stw	ra,28(sp)
 10892b0:	1080c540 	call	1080c54 <__unpack_d>
 10892b4:	d8800017 	ldw	r2,0(sp)
 10892b8:	00c00084 	movi	r3,2
 10892bc:	10c01c26 	beq	r2,r3,1089330 <__fixdfsi+0x98>
 10892c0:	00c00044 	movi	r3,1
 10892c4:	18801a2e 	bgeu	r3,r2,1089330 <__fixdfsi+0x98>
 10892c8:	00c00104 	movi	r3,4
 10892cc:	10c01126 	beq	r2,r3,1089314 <__fixdfsi+0x7c>
 10892d0:	d8800217 	ldw	r2,8(sp)
 10892d4:	10001616 	blt	r2,zero,1089330 <__fixdfsi+0x98>
 10892d8:	00c00784 	movi	r3,30
 10892dc:	18800d16 	blt	r3,r2,1089314 <__fixdfsi+0x7c>
 10892e0:	00c00f04 	movi	r3,60
 10892e4:	1885c83a 	sub	r2,r3,r2
 10892e8:	10fff804 	addi	r3,r2,-32
 10892ec:	d9400317 	ldw	r5,12(sp)
 10892f0:	d9000417 	ldw	r4,16(sp)
 10892f4:	18001616 	blt	r3,zero,1089350 <__fixdfsi+0xb8>
 10892f8:	20c4d83a 	srl	r2,r4,r3
 10892fc:	d8c00117 	ldw	r3,4(sp)
 1089300:	18000126 	beq	r3,zero,1089308 <__fixdfsi+0x70>
 1089304:	0085c83a 	sub	r2,zero,r2
 1089308:	dfc00717 	ldw	ra,28(sp)
 108930c:	dec00804 	addi	sp,sp,32
 1089310:	f800283a 	ret
 1089314:	d8800117 	ldw	r2,4(sp)
 1089318:	1000091e 	bne	r2,zero,1089340 <__fixdfsi+0xa8>
 108931c:	00a00034 	movhi	r2,32768
 1089320:	10bfffc4 	addi	r2,r2,-1
 1089324:	dfc00717 	ldw	ra,28(sp)
 1089328:	dec00804 	addi	sp,sp,32
 108932c:	f800283a 	ret
 1089330:	0005883a 	mov	r2,zero
 1089334:	dfc00717 	ldw	ra,28(sp)
 1089338:	dec00804 	addi	sp,sp,32
 108933c:	f800283a 	ret
 1089340:	00a00034 	movhi	r2,32768
 1089344:	dfc00717 	ldw	ra,28(sp)
 1089348:	dec00804 	addi	sp,sp,32
 108934c:	f800283a 	ret
 1089350:	2008907a 	slli	r4,r4,1
 1089354:	018007c4 	movi	r6,31
 1089358:	308dc83a 	sub	r6,r6,r2
 108935c:	2188983a 	sll	r4,r4,r6
 1089360:	2884d83a 	srl	r2,r5,r2
 1089364:	2084b03a 	or	r2,r4,r2
 1089368:	003fe406 	br	10892fc <__fixdfsi+0x64>

0108936c <__floatunsidf>:
 108936c:	defff904 	addi	sp,sp,-28
 1089370:	dc000515 	stw	r16,20(sp)
 1089374:	dfc00615 	stw	ra,24(sp)
 1089378:	d8000115 	stw	zero,4(sp)
 108937c:	2021883a 	mov	r16,r4
 1089380:	20001726 	beq	r4,zero,10893e0 <__floatunsidf+0x74>
 1089384:	008000c4 	movi	r2,3
 1089388:	d8800015 	stw	r2,0(sp)
 108938c:	00800f04 	movi	r2,60
 1089390:	d8800215 	stw	r2,8(sp)
 1089394:	10809840 	call	1080984 <__clzsi2>
 1089398:	10c00744 	addi	r3,r2,29
 108939c:	18001816 	blt	r3,zero,1089400 <__floatunsidf+0x94>
 10893a0:	18002d26 	beq	r3,zero,1089458 <__floatunsidf+0xec>
 10893a4:	113fff44 	addi	r4,r2,-3
 10893a8:	20002e16 	blt	r4,zero,1089464 <__floatunsidf+0xf8>
 10893ac:	8108983a 	sll	r4,r16,r4
 10893b0:	0021883a 	mov	r16,zero
 10893b4:	014007c4 	movi	r5,31
 10893b8:	2885c83a 	sub	r2,r5,r2
 10893bc:	dc000315 	stw	r16,12(sp)
 10893c0:	d9000415 	stw	r4,16(sp)
 10893c4:	d8800215 	stw	r2,8(sp)
 10893c8:	d809883a 	mov	r4,sp
 10893cc:	1080a300 	call	1080a30 <__pack_d>
 10893d0:	dfc00617 	ldw	ra,24(sp)
 10893d4:	dc000517 	ldw	r16,20(sp)
 10893d8:	dec00704 	addi	sp,sp,28
 10893dc:	f800283a 	ret
 10893e0:	00800084 	movi	r2,2
 10893e4:	d809883a 	mov	r4,sp
 10893e8:	d8800015 	stw	r2,0(sp)
 10893ec:	1080a300 	call	1080a30 <__pack_d>
 10893f0:	dfc00617 	ldw	ra,24(sp)
 10893f4:	dc000517 	ldw	r16,20(sp)
 10893f8:	dec00704 	addi	sp,sp,28
 10893fc:	f800283a 	ret
 1089400:	00c7c83a 	sub	r3,zero,r3
 1089404:	193ff804 	addi	r4,r3,-32
 1089408:	20001c16 	blt	r4,zero,108947c <__floatunsidf+0x110>
 108940c:	000b883a 	mov	r5,zero
 1089410:	2009d7fa 	srai	r4,r4,31
 1089414:	80c6d83a 	srl	r3,r16,r3
 1089418:	297fffc4 	addi	r5,r5,-1
 108941c:	2c20703a 	and	r16,r5,r16
 1089420:	8020c03a 	cmpne	r16,r16,zero
 1089424:	1906703a 	and	r3,r3,r4
 1089428:	010007c4 	movi	r4,31
 108942c:	80c6b03a 	or	r3,r16,r3
 1089430:	2085c83a 	sub	r2,r4,r2
 1089434:	d809883a 	mov	r4,sp
 1089438:	d8c00315 	stw	r3,12(sp)
 108943c:	d8000415 	stw	zero,16(sp)
 1089440:	d8800215 	stw	r2,8(sp)
 1089444:	1080a300 	call	1080a30 <__pack_d>
 1089448:	dfc00617 	ldw	ra,24(sp)
 108944c:	dc000517 	ldw	r16,20(sp)
 1089450:	dec00704 	addi	sp,sp,28
 1089454:	f800283a 	ret
 1089458:	dc000315 	stw	r16,12(sp)
 108945c:	d8000415 	stw	zero,16(sp)
 1089460:	003fd906 	br	10893c8 <__floatunsidf+0x5c>
 1089464:	800ad07a 	srli	r5,r16,1
 1089468:	010007c4 	movi	r4,31
 108946c:	20c9c83a 	sub	r4,r4,r3
 1089470:	2908d83a 	srl	r4,r5,r4
 1089474:	80e0983a 	sll	r16,r16,r3
 1089478:	003fce06 	br	10893b4 <__floatunsidf+0x48>
 108947c:	01400044 	movi	r5,1
 1089480:	28ca983a 	sll	r5,r5,r3
 1089484:	003fe206 	br	1089410 <__floatunsidf+0xa4>

01089488 <udivmodsi4>:
 1089488:	2005883a 	mov	r2,r4
 108948c:	2900182e 	bgeu	r5,r4,10894f0 <udivmodsi4+0x68>
 1089490:	28001716 	blt	r5,zero,10894f0 <udivmodsi4+0x68>
 1089494:	01000804 	movi	r4,32
 1089498:	00c00044 	movi	r3,1
 108949c:	00000206 	br	10894a8 <udivmodsi4+0x20>
 10894a0:	20001126 	beq	r4,zero,10894e8 <udivmodsi4+0x60>
 10894a4:	28000516 	blt	r5,zero,10894bc <udivmodsi4+0x34>
 10894a8:	294b883a 	add	r5,r5,r5
 10894ac:	213fffc4 	addi	r4,r4,-1
 10894b0:	18c7883a 	add	r3,r3,r3
 10894b4:	28bffa36 	bltu	r5,r2,10894a0 <udivmodsi4+0x18>
 10894b8:	18000b26 	beq	r3,zero,10894e8 <udivmodsi4+0x60>
 10894bc:	0009883a 	mov	r4,zero
 10894c0:	11400236 	bltu	r2,r5,10894cc <udivmodsi4+0x44>
 10894c4:	1145c83a 	sub	r2,r2,r5
 10894c8:	20c8b03a 	or	r4,r4,r3
 10894cc:	1806d07a 	srli	r3,r3,1
 10894d0:	280ad07a 	srli	r5,r5,1
 10894d4:	183ffa1e 	bne	r3,zero,10894c0 <udivmodsi4+0x38>
 10894d8:	3000021e 	bne	r6,zero,10894e4 <udivmodsi4+0x5c>
 10894dc:	2005883a 	mov	r2,r4
 10894e0:	f800283a 	ret
 10894e4:	f800283a 	ret
 10894e8:	0009883a 	mov	r4,zero
 10894ec:	003ffa06 	br	10894d8 <udivmodsi4+0x50>
 10894f0:	00c00044 	movi	r3,1
 10894f4:	0009883a 	mov	r4,zero
 10894f8:	003ff106 	br	10894c0 <udivmodsi4+0x38>

010894fc <__divsi3>:
 10894fc:	defffe04 	addi	sp,sp,-8
 1089500:	dfc00115 	stw	ra,4(sp)
 1089504:	dc000015 	stw	r16,0(sp)
 1089508:	20000a16 	blt	r4,zero,1089534 <__divsi3+0x38>
 108950c:	0021883a 	mov	r16,zero
 1089510:	28000b16 	blt	r5,zero,1089540 <__divsi3+0x44>
 1089514:	000d883a 	mov	r6,zero
 1089518:	10894880 	call	1089488 <udivmodsi4>
 108951c:	80000126 	beq	r16,zero,1089524 <__divsi3+0x28>
 1089520:	0085c83a 	sub	r2,zero,r2
 1089524:	dfc00117 	ldw	ra,4(sp)
 1089528:	dc000017 	ldw	r16,0(sp)
 108952c:	dec00204 	addi	sp,sp,8
 1089530:	f800283a 	ret
 1089534:	0109c83a 	sub	r4,zero,r4
 1089538:	04000044 	movi	r16,1
 108953c:	283ff50e 	bge	r5,zero,1089514 <__divsi3+0x18>
 1089540:	014bc83a 	sub	r5,zero,r5
 1089544:	8400005c 	xori	r16,r16,1
 1089548:	003ff206 	br	1089514 <__divsi3+0x18>

0108954c <__modsi3>:
 108954c:	deffff04 	addi	sp,sp,-4
 1089550:	dfc00015 	stw	ra,0(sp)
 1089554:	20000516 	blt	r4,zero,108956c <__modsi3+0x20>
 1089558:	28000c16 	blt	r5,zero,108958c <__modsi3+0x40>
 108955c:	01800044 	movi	r6,1
 1089560:	dfc00017 	ldw	ra,0(sp)
 1089564:	dec00104 	addi	sp,sp,4
 1089568:	10894881 	jmpi	1089488 <udivmodsi4>
 108956c:	0109c83a 	sub	r4,zero,r4
 1089570:	28000b16 	blt	r5,zero,10895a0 <__modsi3+0x54>
 1089574:	01800044 	movi	r6,1
 1089578:	10894880 	call	1089488 <udivmodsi4>
 108957c:	0085c83a 	sub	r2,zero,r2
 1089580:	dfc00017 	ldw	ra,0(sp)
 1089584:	dec00104 	addi	sp,sp,4
 1089588:	f800283a 	ret
 108958c:	014bc83a 	sub	r5,zero,r5
 1089590:	01800044 	movi	r6,1
 1089594:	dfc00017 	ldw	ra,0(sp)
 1089598:	dec00104 	addi	sp,sp,4
 108959c:	10894881 	jmpi	1089488 <udivmodsi4>
 10895a0:	014bc83a 	sub	r5,zero,r5
 10895a4:	003ff306 	br	1089574 <__modsi3+0x28>

010895a8 <__udivsi3>:
 10895a8:	000d883a 	mov	r6,zero
 10895ac:	10894881 	jmpi	1089488 <udivmodsi4>

010895b0 <__umodsi3>:
 10895b0:	01800044 	movi	r6,1
 10895b4:	10894881 	jmpi	1089488 <udivmodsi4>

010895b8 <__fpcmp_parts_d>:
 10895b8:	20c00017 	ldw	r3,0(r4)
 10895bc:	00800044 	movi	r2,1
 10895c0:	10c0142e 	bgeu	r2,r3,1089614 <__fpcmp_parts_d+0x5c>
 10895c4:	29800017 	ldw	r6,0(r5)
 10895c8:	1180122e 	bgeu	r2,r6,1089614 <__fpcmp_parts_d+0x5c>
 10895cc:	01c00104 	movi	r7,4
 10895d0:	19c02826 	beq	r3,r7,1089674 <__fpcmp_parts_d+0xbc>
 10895d4:	31c00926 	beq	r6,r7,10895fc <__fpcmp_parts_d+0x44>
 10895d8:	01c00084 	movi	r7,2
 10895dc:	19c00626 	beq	r3,r7,10895f8 <__fpcmp_parts_d+0x40>
 10895e0:	31c00a26 	beq	r6,r7,108960c <__fpcmp_parts_d+0x54>
 10895e4:	20c00117 	ldw	r3,4(r4)
 10895e8:	29800117 	ldw	r6,4(r5)
 10895ec:	19800b26 	beq	r3,r6,108961c <__fpcmp_parts_d+0x64>
 10895f0:	1800041e 	bne	r3,zero,1089604 <__fpcmp_parts_d+0x4c>
 10895f4:	f800283a 	ret
 10895f8:	30c01a26 	beq	r6,r3,1089664 <__fpcmp_parts_d+0xac>
 10895fc:	28800117 	ldw	r2,4(r5)
 1089600:	1000041e 	bne	r2,zero,1089614 <__fpcmp_parts_d+0x5c>
 1089604:	00bfffc4 	movi	r2,-1
 1089608:	f800283a 	ret
 108960c:	20800117 	ldw	r2,4(r4)
 1089610:	103ffc1e 	bne	r2,zero,1089604 <__fpcmp_parts_d+0x4c>
 1089614:	00800044 	movi	r2,1
 1089618:	f800283a 	ret
 108961c:	21c00217 	ldw	r7,8(r4)
 1089620:	29800217 	ldw	r6,8(r5)
 1089624:	31c0020e 	bge	r6,r7,1089630 <__fpcmp_parts_d+0x78>
 1089628:	183ff61e 	bne	r3,zero,1089604 <__fpcmp_parts_d+0x4c>
 108962c:	f800283a 	ret
 1089630:	39800a16 	blt	r7,r6,108965c <__fpcmp_parts_d+0xa4>
 1089634:	20800417 	ldw	r2,16(r4)
 1089638:	29800417 	ldw	r6,16(r5)
 108963c:	21c00317 	ldw	r7,12(r4)
 1089640:	29000317 	ldw	r4,12(r5)
 1089644:	30800936 	bltu	r6,r2,108966c <__fpcmp_parts_d+0xb4>
 1089648:	1180011e 	bne	r2,r6,1089650 <__fpcmp_parts_d+0x98>
 108964c:	21c00736 	bltu	r4,r7,108966c <__fpcmp_parts_d+0xb4>
 1089650:	11800236 	bltu	r2,r6,108965c <__fpcmp_parts_d+0xa4>
 1089654:	3080031e 	bne	r6,r2,1089664 <__fpcmp_parts_d+0xac>
 1089658:	3900022e 	bgeu	r7,r4,1089664 <__fpcmp_parts_d+0xac>
 108965c:	183fe926 	beq	r3,zero,1089604 <__fpcmp_parts_d+0x4c>
 1089660:	003fec06 	br	1089614 <__fpcmp_parts_d+0x5c>
 1089664:	0005883a 	mov	r2,zero
 1089668:	f800283a 	ret
 108966c:	183fe926 	beq	r3,zero,1089614 <__fpcmp_parts_d+0x5c>
 1089670:	003fe406 	br	1089604 <__fpcmp_parts_d+0x4c>
 1089674:	30ffe51e 	bne	r6,r3,108960c <__fpcmp_parts_d+0x54>
 1089678:	28c00117 	ldw	r3,4(r5)
 108967c:	20800117 	ldw	r2,4(r4)
 1089680:	1885c83a 	sub	r2,r3,r2
 1089684:	f800283a 	ret

01089688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1089688:	defffe04 	addi	sp,sp,-8
 108968c:	dfc00115 	stw	ra,4(sp)
 1089690:	df000015 	stw	fp,0(sp)
 1089694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1089698:	00804274 	movhi	r2,265
 108969c:	10b70004 	addi	r2,r2,-9216
 10896a0:	10800017 	ldw	r2,0(r2)
 10896a4:	10000526 	beq	r2,zero,10896bc <alt_get_errno+0x34>
 10896a8:	00804274 	movhi	r2,265
 10896ac:	10b70004 	addi	r2,r2,-9216
 10896b0:	10800017 	ldw	r2,0(r2)
 10896b4:	103ee83a 	callr	r2
 10896b8:	00000206 	br	10896c4 <alt_get_errno+0x3c>
 10896bc:	00804274 	movhi	r2,265
 10896c0:	10bda104 	addi	r2,r2,-2428
}
 10896c4:	e037883a 	mov	sp,fp
 10896c8:	dfc00117 	ldw	ra,4(sp)
 10896cc:	df000017 	ldw	fp,0(sp)
 10896d0:	dec00204 	addi	sp,sp,8
 10896d4:	f800283a 	ret

010896d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10896d8:	defffb04 	addi	sp,sp,-20
 10896dc:	dfc00415 	stw	ra,16(sp)
 10896e0:	df000315 	stw	fp,12(sp)
 10896e4:	df000304 	addi	fp,sp,12
 10896e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10896ec:	e0bfff17 	ldw	r2,-4(fp)
 10896f0:	10000616 	blt	r2,zero,108970c <close+0x34>
 10896f4:	e0bfff17 	ldw	r2,-4(fp)
 10896f8:	10c00324 	muli	r3,r2,12
 10896fc:	00804274 	movhi	r2,265
 1089700:	10b27e04 	addi	r2,r2,-13832
 1089704:	1885883a 	add	r2,r3,r2
 1089708:	00000106 	br	1089710 <close+0x38>
 108970c:	0005883a 	mov	r2,zero
 1089710:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1089714:	e0bffd17 	ldw	r2,-12(fp)
 1089718:	10001826 	beq	r2,zero,108977c <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 108971c:	e0bffd17 	ldw	r2,-12(fp)
 1089720:	10800017 	ldw	r2,0(r2)
 1089724:	10800417 	ldw	r2,16(r2)
 1089728:	10000626 	beq	r2,zero,1089744 <close+0x6c>
 108972c:	e0bffd17 	ldw	r2,-12(fp)
 1089730:	10800017 	ldw	r2,0(r2)
 1089734:	10800417 	ldw	r2,16(r2)
 1089738:	e13ffd17 	ldw	r4,-12(fp)
 108973c:	103ee83a 	callr	r2
 1089740:	00000106 	br	1089748 <close+0x70>
 1089744:	0005883a 	mov	r2,zero
 1089748:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 108974c:	e13fff17 	ldw	r4,-4(fp)
 1089750:	1089dbc0 	call	1089dbc <alt_release_fd>
    if (rval < 0)
 1089754:	e0bffe17 	ldw	r2,-8(fp)
 1089758:	1000060e 	bge	r2,zero,1089774 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 108975c:	10896880 	call	1089688 <alt_get_errno>
 1089760:	e0fffe17 	ldw	r3,-8(fp)
 1089764:	00c7c83a 	sub	r3,zero,r3
 1089768:	10c00015 	stw	r3,0(r2)
      return -1;
 108976c:	00bfffc4 	movi	r2,-1
 1089770:	00000606 	br	108978c <close+0xb4>
    }
    return 0;
 1089774:	0005883a 	mov	r2,zero
 1089778:	00000406 	br	108978c <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 108977c:	10896880 	call	1089688 <alt_get_errno>
 1089780:	00c01444 	movi	r3,81
 1089784:	10c00015 	stw	r3,0(r2)
    return -1;
 1089788:	00bfffc4 	movi	r2,-1
  }
}
 108978c:	e037883a 	mov	sp,fp
 1089790:	dfc00117 	ldw	ra,4(sp)
 1089794:	df000017 	ldw	fp,0(sp)
 1089798:	dec00204 	addi	sp,sp,8
 108979c:	f800283a 	ret

010897a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10897a0:	defffc04 	addi	sp,sp,-16
 10897a4:	df000315 	stw	fp,12(sp)
 10897a8:	df000304 	addi	fp,sp,12
 10897ac:	e13ffd15 	stw	r4,-12(fp)
 10897b0:	e17ffe15 	stw	r5,-8(fp)
 10897b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10897b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10897bc:	e037883a 	mov	sp,fp
 10897c0:	df000017 	ldw	fp,0(sp)
 10897c4:	dec00104 	addi	sp,sp,4
 10897c8:	f800283a 	ret

010897cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10897cc:	defffe04 	addi	sp,sp,-8
 10897d0:	dfc00115 	stw	ra,4(sp)
 10897d4:	df000015 	stw	fp,0(sp)
 10897d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10897dc:	00804274 	movhi	r2,265
 10897e0:	10b70004 	addi	r2,r2,-9216
 10897e4:	10800017 	ldw	r2,0(r2)
 10897e8:	10000526 	beq	r2,zero,1089800 <alt_get_errno+0x34>
 10897ec:	00804274 	movhi	r2,265
 10897f0:	10b70004 	addi	r2,r2,-9216
 10897f4:	10800017 	ldw	r2,0(r2)
 10897f8:	103ee83a 	callr	r2
 10897fc:	00000206 	br	1089808 <alt_get_errno+0x3c>
 1089800:	00804274 	movhi	r2,265
 1089804:	10bda104 	addi	r2,r2,-2428
}
 1089808:	e037883a 	mov	sp,fp
 108980c:	dfc00117 	ldw	ra,4(sp)
 1089810:	df000017 	ldw	fp,0(sp)
 1089814:	dec00204 	addi	sp,sp,8
 1089818:	f800283a 	ret

0108981c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 108981c:	defffb04 	addi	sp,sp,-20
 1089820:	dfc00415 	stw	ra,16(sp)
 1089824:	df000315 	stw	fp,12(sp)
 1089828:	df000304 	addi	fp,sp,12
 108982c:	e13ffe15 	stw	r4,-8(fp)
 1089830:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1089834:	e0bffe17 	ldw	r2,-8(fp)
 1089838:	10000616 	blt	r2,zero,1089854 <fstat+0x38>
 108983c:	e0bffe17 	ldw	r2,-8(fp)
 1089840:	10c00324 	muli	r3,r2,12
 1089844:	00804274 	movhi	r2,265
 1089848:	10b27e04 	addi	r2,r2,-13832
 108984c:	1885883a 	add	r2,r3,r2
 1089850:	00000106 	br	1089858 <fstat+0x3c>
 1089854:	0005883a 	mov	r2,zero
 1089858:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 108985c:	e0bffd17 	ldw	r2,-12(fp)
 1089860:	10001026 	beq	r2,zero,10898a4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1089864:	e0bffd17 	ldw	r2,-12(fp)
 1089868:	10800017 	ldw	r2,0(r2)
 108986c:	10800817 	ldw	r2,32(r2)
 1089870:	10000726 	beq	r2,zero,1089890 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1089874:	e0bffd17 	ldw	r2,-12(fp)
 1089878:	10800017 	ldw	r2,0(r2)
 108987c:	10800817 	ldw	r2,32(r2)
 1089880:	e13ffd17 	ldw	r4,-12(fp)
 1089884:	e17fff17 	ldw	r5,-4(fp)
 1089888:	103ee83a 	callr	r2
 108988c:	00000906 	br	10898b4 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1089890:	e0bfff17 	ldw	r2,-4(fp)
 1089894:	00c80004 	movi	r3,8192
 1089898:	10c00115 	stw	r3,4(r2)
      return 0;
 108989c:	0005883a 	mov	r2,zero
 10898a0:	00000406 	br	10898b4 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10898a4:	10897cc0 	call	10897cc <alt_get_errno>
 10898a8:	00c01444 	movi	r3,81
 10898ac:	10c00015 	stw	r3,0(r2)
    return -1;
 10898b0:	00bfffc4 	movi	r2,-1
  }
}
 10898b4:	e037883a 	mov	sp,fp
 10898b8:	dfc00117 	ldw	ra,4(sp)
 10898bc:	df000017 	ldw	fp,0(sp)
 10898c0:	dec00204 	addi	sp,sp,8
 10898c4:	f800283a 	ret

010898c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10898c8:	defffe04 	addi	sp,sp,-8
 10898cc:	dfc00115 	stw	ra,4(sp)
 10898d0:	df000015 	stw	fp,0(sp)
 10898d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10898d8:	00804274 	movhi	r2,265
 10898dc:	10b70004 	addi	r2,r2,-9216
 10898e0:	10800017 	ldw	r2,0(r2)
 10898e4:	10000526 	beq	r2,zero,10898fc <alt_get_errno+0x34>
 10898e8:	00804274 	movhi	r2,265
 10898ec:	10b70004 	addi	r2,r2,-9216
 10898f0:	10800017 	ldw	r2,0(r2)
 10898f4:	103ee83a 	callr	r2
 10898f8:	00000206 	br	1089904 <alt_get_errno+0x3c>
 10898fc:	00804274 	movhi	r2,265
 1089900:	10bda104 	addi	r2,r2,-2428
}
 1089904:	e037883a 	mov	sp,fp
 1089908:	dfc00117 	ldw	ra,4(sp)
 108990c:	df000017 	ldw	fp,0(sp)
 1089910:	dec00204 	addi	sp,sp,8
 1089914:	f800283a 	ret

01089918 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1089918:	deffed04 	addi	sp,sp,-76
 108991c:	dfc01215 	stw	ra,72(sp)
 1089920:	df001115 	stw	fp,68(sp)
 1089924:	df001104 	addi	fp,sp,68
 1089928:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 108992c:	e0bfff17 	ldw	r2,-4(fp)
 1089930:	10000616 	blt	r2,zero,108994c <isatty+0x34>
 1089934:	e0bfff17 	ldw	r2,-4(fp)
 1089938:	10c00324 	muli	r3,r2,12
 108993c:	00804274 	movhi	r2,265
 1089940:	10b27e04 	addi	r2,r2,-13832
 1089944:	1885883a 	add	r2,r3,r2
 1089948:	00000106 	br	1089950 <isatty+0x38>
 108994c:	0005883a 	mov	r2,zero
 1089950:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1089954:	e0bfef17 	ldw	r2,-68(fp)
 1089958:	10000e26 	beq	r2,zero,1089994 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 108995c:	e0bfef17 	ldw	r2,-68(fp)
 1089960:	10800017 	ldw	r2,0(r2)
 1089964:	10800817 	ldw	r2,32(r2)
 1089968:	1000021e 	bne	r2,zero,1089974 <isatty+0x5c>
    {
      return 1;
 108996c:	00800044 	movi	r2,1
 1089970:	00000c06 	br	10899a4 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1089974:	e0bff004 	addi	r2,fp,-64
 1089978:	e13fff17 	ldw	r4,-4(fp)
 108997c:	100b883a 	mov	r5,r2
 1089980:	108981c0 	call	108981c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1089984:	e0bff117 	ldw	r2,-60(fp)
 1089988:	10880020 	cmpeqi	r2,r2,8192
 108998c:	10803fcc 	andi	r2,r2,255
 1089990:	00000406 	br	10899a4 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1089994:	10898c80 	call	10898c8 <alt_get_errno>
 1089998:	00c01444 	movi	r3,81
 108999c:	10c00015 	stw	r3,0(r2)
    return 0;
 10899a0:	0005883a 	mov	r2,zero
  }
}
 10899a4:	e037883a 	mov	sp,fp
 10899a8:	dfc00117 	ldw	ra,4(sp)
 10899ac:	df000017 	ldw	fp,0(sp)
 10899b0:	dec00204 	addi	sp,sp,8
 10899b4:	f800283a 	ret

010899b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10899b8:	defffc04 	addi	sp,sp,-16
 10899bc:	df000315 	stw	fp,12(sp)
 10899c0:	df000304 	addi	fp,sp,12
 10899c4:	e13ffd15 	stw	r4,-12(fp)
 10899c8:	e17ffe15 	stw	r5,-8(fp)
 10899cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10899d0:	e0fffe17 	ldw	r3,-8(fp)
 10899d4:	e0bffd17 	ldw	r2,-12(fp)
 10899d8:	18800e26 	beq	r3,r2,1089a14 <alt_load_section+0x5c>
  {
    while( to != end )
 10899dc:	00000a06 	br	1089a08 <alt_load_section+0x50>
    {
      *to++ = *from++;
 10899e0:	e0bffd17 	ldw	r2,-12(fp)
 10899e4:	10c00017 	ldw	r3,0(r2)
 10899e8:	e0bffe17 	ldw	r2,-8(fp)
 10899ec:	10c00015 	stw	r3,0(r2)
 10899f0:	e0bffe17 	ldw	r2,-8(fp)
 10899f4:	10800104 	addi	r2,r2,4
 10899f8:	e0bffe15 	stw	r2,-8(fp)
 10899fc:	e0bffd17 	ldw	r2,-12(fp)
 1089a00:	10800104 	addi	r2,r2,4
 1089a04:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1089a08:	e0fffe17 	ldw	r3,-8(fp)
 1089a0c:	e0bfff17 	ldw	r2,-4(fp)
 1089a10:	18bff31e 	bne	r3,r2,10899e0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1089a14:	e037883a 	mov	sp,fp
 1089a18:	df000017 	ldw	fp,0(sp)
 1089a1c:	dec00104 	addi	sp,sp,4
 1089a20:	f800283a 	ret

01089a24 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1089a24:	defffe04 	addi	sp,sp,-8
 1089a28:	dfc00115 	stw	ra,4(sp)
 1089a2c:	df000015 	stw	fp,0(sp)
 1089a30:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1089a34:	01004274 	movhi	r4,265
 1089a38:	21370504 	addi	r4,r4,-9196
 1089a3c:	01404274 	movhi	r5,265
 1089a40:	29706f04 	addi	r5,r5,-15940
 1089a44:	01804274 	movhi	r6,265
 1089a48:	31b70504 	addi	r6,r6,-9196
 1089a4c:	10899b80 	call	10899b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1089a50:	01004234 	movhi	r4,264
 1089a54:	21000804 	addi	r4,r4,32
 1089a58:	01404234 	movhi	r5,264
 1089a5c:	29400804 	addi	r5,r5,32
 1089a60:	01804234 	movhi	r6,264
 1089a64:	31806e04 	addi	r6,r6,440
 1089a68:	10899b80 	call	10899b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1089a6c:	01004274 	movhi	r4,265
 1089a70:	212f9d04 	addi	r4,r4,-16780
 1089a74:	01404274 	movhi	r5,265
 1089a78:	296f9d04 	addi	r5,r5,-16780
 1089a7c:	01804274 	movhi	r6,265
 1089a80:	31b06f04 	addi	r6,r6,-15940
 1089a84:	10899b80 	call	10899b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1089a88:	108ad740 	call	108ad74 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1089a8c:	108af600 	call	108af60 <alt_icache_flush_all>
}
 1089a90:	e037883a 	mov	sp,fp
 1089a94:	dfc00117 	ldw	ra,4(sp)
 1089a98:	df000017 	ldw	fp,0(sp)
 1089a9c:	dec00204 	addi	sp,sp,8
 1089aa0:	f800283a 	ret

01089aa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1089aa4:	defffe04 	addi	sp,sp,-8
 1089aa8:	dfc00115 	stw	ra,4(sp)
 1089aac:	df000015 	stw	fp,0(sp)
 1089ab0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1089ab4:	00804274 	movhi	r2,265
 1089ab8:	10b70004 	addi	r2,r2,-9216
 1089abc:	10800017 	ldw	r2,0(r2)
 1089ac0:	10000526 	beq	r2,zero,1089ad8 <alt_get_errno+0x34>
 1089ac4:	00804274 	movhi	r2,265
 1089ac8:	10b70004 	addi	r2,r2,-9216
 1089acc:	10800017 	ldw	r2,0(r2)
 1089ad0:	103ee83a 	callr	r2
 1089ad4:	00000206 	br	1089ae0 <alt_get_errno+0x3c>
 1089ad8:	00804274 	movhi	r2,265
 1089adc:	10bda104 	addi	r2,r2,-2428
}
 1089ae0:	e037883a 	mov	sp,fp
 1089ae4:	dfc00117 	ldw	ra,4(sp)
 1089ae8:	df000017 	ldw	fp,0(sp)
 1089aec:	dec00204 	addi	sp,sp,8
 1089af0:	f800283a 	ret

01089af4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1089af4:	defff904 	addi	sp,sp,-28
 1089af8:	dfc00615 	stw	ra,24(sp)
 1089afc:	df000515 	stw	fp,20(sp)
 1089b00:	df000504 	addi	fp,sp,20
 1089b04:	e13ffd15 	stw	r4,-12(fp)
 1089b08:	e17ffe15 	stw	r5,-8(fp)
 1089b0c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1089b10:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1089b14:	e0bffd17 	ldw	r2,-12(fp)
 1089b18:	10000616 	blt	r2,zero,1089b34 <lseek+0x40>
 1089b1c:	e0bffd17 	ldw	r2,-12(fp)
 1089b20:	10c00324 	muli	r3,r2,12
 1089b24:	00804274 	movhi	r2,265
 1089b28:	10b27e04 	addi	r2,r2,-13832
 1089b2c:	1885883a 	add	r2,r3,r2
 1089b30:	00000106 	br	1089b38 <lseek+0x44>
 1089b34:	0005883a 	mov	r2,zero
 1089b38:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1089b3c:	e0bffc17 	ldw	r2,-16(fp)
 1089b40:	10001026 	beq	r2,zero,1089b84 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1089b44:	e0bffc17 	ldw	r2,-16(fp)
 1089b48:	10800017 	ldw	r2,0(r2)
 1089b4c:	10800717 	ldw	r2,28(r2)
 1089b50:	10000926 	beq	r2,zero,1089b78 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1089b54:	e0bffc17 	ldw	r2,-16(fp)
 1089b58:	10800017 	ldw	r2,0(r2)
 1089b5c:	10800717 	ldw	r2,28(r2)
 1089b60:	e13ffc17 	ldw	r4,-16(fp)
 1089b64:	e17ffe17 	ldw	r5,-8(fp)
 1089b68:	e1bfff17 	ldw	r6,-4(fp)
 1089b6c:	103ee83a 	callr	r2
 1089b70:	e0bffb15 	stw	r2,-20(fp)
 1089b74:	00000506 	br	1089b8c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1089b78:	00bfde84 	movi	r2,-134
 1089b7c:	e0bffb15 	stw	r2,-20(fp)
 1089b80:	00000206 	br	1089b8c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1089b84:	00bfebc4 	movi	r2,-81
 1089b88:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1089b8c:	e0bffb17 	ldw	r2,-20(fp)
 1089b90:	1000060e 	bge	r2,zero,1089bac <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 1089b94:	1089aa40 	call	1089aa4 <alt_get_errno>
 1089b98:	e0fffb17 	ldw	r3,-20(fp)
 1089b9c:	00c7c83a 	sub	r3,zero,r3
 1089ba0:	10c00015 	stw	r3,0(r2)
    rc = -1;
 1089ba4:	00bfffc4 	movi	r2,-1
 1089ba8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1089bac:	e0bffb17 	ldw	r2,-20(fp)
}
 1089bb0:	e037883a 	mov	sp,fp
 1089bb4:	dfc00117 	ldw	ra,4(sp)
 1089bb8:	df000017 	ldw	fp,0(sp)
 1089bbc:	dec00204 	addi	sp,sp,8
 1089bc0:	f800283a 	ret

01089bc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1089bc4:	defffd04 	addi	sp,sp,-12
 1089bc8:	dfc00215 	stw	ra,8(sp)
 1089bcc:	df000115 	stw	fp,4(sp)
 1089bd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1089bd4:	0009883a 	mov	r4,zero
 1089bd8:	108a0400 	call	108a040 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1089bdc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1089be0:	108a0740 	call	108a074 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1089be4:	01004274 	movhi	r4,265
 1089be8:	21306704 	addi	r4,r4,-15972
 1089bec:	01404274 	movhi	r5,265
 1089bf0:	29706704 	addi	r5,r5,-15972
 1089bf4:	01804274 	movhi	r6,265
 1089bf8:	31b06704 	addi	r6,r6,-15972
 1089bfc:	108b3180 	call	108b318 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1089c00:	108aea80 	call	108aea8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1089c04:	01004274 	movhi	r4,265
 1089c08:	212bc104 	addi	r4,r4,-20732
 1089c0c:	108baa00 	call	108baa0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1089c10:	d126ac17 	ldw	r4,-25936(gp)
 1089c14:	d0e6ad17 	ldw	r3,-25932(gp)
 1089c18:	d0a6ae17 	ldw	r2,-25928(gp)
 1089c1c:	180b883a 	mov	r5,r3
 1089c20:	100d883a 	mov	r6,r2
 1089c24:	10802040 	call	1080204 <main>
 1089c28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1089c2c:	01000044 	movi	r4,1
 1089c30:	10896d80 	call	10896d8 <close>
  exit (result);
 1089c34:	e13fff17 	ldw	r4,-4(fp)
 1089c38:	108bab40 	call	108bab4 <exit>

01089c3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1089c3c:	defffe04 	addi	sp,sp,-8
 1089c40:	df000115 	stw	fp,4(sp)
 1089c44:	df000104 	addi	fp,sp,4
 1089c48:	e13fff15 	stw	r4,-4(fp)
}
 1089c4c:	e037883a 	mov	sp,fp
 1089c50:	df000017 	ldw	fp,0(sp)
 1089c54:	dec00104 	addi	sp,sp,4
 1089c58:	f800283a 	ret

01089c5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1089c5c:	defffe04 	addi	sp,sp,-8
 1089c60:	df000115 	stw	fp,4(sp)
 1089c64:	df000104 	addi	fp,sp,4
 1089c68:	e13fff15 	stw	r4,-4(fp)
}
 1089c6c:	e037883a 	mov	sp,fp
 1089c70:	df000017 	ldw	fp,0(sp)
 1089c74:	dec00104 	addi	sp,sp,4
 1089c78:	f800283a 	ret

01089c7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1089c7c:	defffe04 	addi	sp,sp,-8
 1089c80:	dfc00115 	stw	ra,4(sp)
 1089c84:	df000015 	stw	fp,0(sp)
 1089c88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1089c8c:	00804274 	movhi	r2,265
 1089c90:	10b70004 	addi	r2,r2,-9216
 1089c94:	10800017 	ldw	r2,0(r2)
 1089c98:	10000526 	beq	r2,zero,1089cb0 <alt_get_errno+0x34>
 1089c9c:	00804274 	movhi	r2,265
 1089ca0:	10b70004 	addi	r2,r2,-9216
 1089ca4:	10800017 	ldw	r2,0(r2)
 1089ca8:	103ee83a 	callr	r2
 1089cac:	00000206 	br	1089cb8 <alt_get_errno+0x3c>
 1089cb0:	00804274 	movhi	r2,265
 1089cb4:	10bda104 	addi	r2,r2,-2428
}
 1089cb8:	e037883a 	mov	sp,fp
 1089cbc:	dfc00117 	ldw	ra,4(sp)
 1089cc0:	df000017 	ldw	fp,0(sp)
 1089cc4:	dec00204 	addi	sp,sp,8
 1089cc8:	f800283a 	ret

01089ccc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1089ccc:	defff904 	addi	sp,sp,-28
 1089cd0:	dfc00615 	stw	ra,24(sp)
 1089cd4:	df000515 	stw	fp,20(sp)
 1089cd8:	df000504 	addi	fp,sp,20
 1089cdc:	e13ffd15 	stw	r4,-12(fp)
 1089ce0:	e17ffe15 	stw	r5,-8(fp)
 1089ce4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1089ce8:	e0bffd17 	ldw	r2,-12(fp)
 1089cec:	10000616 	blt	r2,zero,1089d08 <read+0x3c>
 1089cf0:	e0bffd17 	ldw	r2,-12(fp)
 1089cf4:	10c00324 	muli	r3,r2,12
 1089cf8:	00804274 	movhi	r2,265
 1089cfc:	10b27e04 	addi	r2,r2,-13832
 1089d00:	1885883a 	add	r2,r3,r2
 1089d04:	00000106 	br	1089d0c <read+0x40>
 1089d08:	0005883a 	mov	r2,zero
 1089d0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1089d10:	e0bffb17 	ldw	r2,-20(fp)
 1089d14:	10002026 	beq	r2,zero,1089d98 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1089d18:	e0bffb17 	ldw	r2,-20(fp)
 1089d1c:	10800217 	ldw	r2,8(r2)
 1089d20:	108000cc 	andi	r2,r2,3
 1089d24:	10800060 	cmpeqi	r2,r2,1
 1089d28:	1000171e 	bne	r2,zero,1089d88 <read+0xbc>
        (fd->dev->read))
 1089d2c:	e0bffb17 	ldw	r2,-20(fp)
 1089d30:	10800017 	ldw	r2,0(r2)
 1089d34:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1089d38:	10001326 	beq	r2,zero,1089d88 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1089d3c:	e0bffb17 	ldw	r2,-20(fp)
 1089d40:	10800017 	ldw	r2,0(r2)
 1089d44:	10c00517 	ldw	r3,20(r2)
 1089d48:	e0bfff17 	ldw	r2,-4(fp)
 1089d4c:	e13ffb17 	ldw	r4,-20(fp)
 1089d50:	e17ffe17 	ldw	r5,-8(fp)
 1089d54:	100d883a 	mov	r6,r2
 1089d58:	183ee83a 	callr	r3
 1089d5c:	e0bffc15 	stw	r2,-16(fp)
 1089d60:	e0bffc17 	ldw	r2,-16(fp)
 1089d64:	1000060e 	bge	r2,zero,1089d80 <read+0xb4>
        {
          ALT_ERRNO = -rval;
 1089d68:	1089c7c0 	call	1089c7c <alt_get_errno>
 1089d6c:	e0fffc17 	ldw	r3,-16(fp)
 1089d70:	00c7c83a 	sub	r3,zero,r3
 1089d74:	10c00015 	stw	r3,0(r2)
          return -1;
 1089d78:	00bfffc4 	movi	r2,-1
 1089d7c:	00000a06 	br	1089da8 <read+0xdc>
        }
        return rval;
 1089d80:	e0bffc17 	ldw	r2,-16(fp)
 1089d84:	00000806 	br	1089da8 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1089d88:	1089c7c0 	call	1089c7c <alt_get_errno>
 1089d8c:	00c00344 	movi	r3,13
 1089d90:	10c00015 	stw	r3,0(r2)
 1089d94:	00000306 	br	1089da4 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1089d98:	1089c7c0 	call	1089c7c <alt_get_errno>
 1089d9c:	00c01444 	movi	r3,81
 1089da0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 1089da4:	00bfffc4 	movi	r2,-1
}
 1089da8:	e037883a 	mov	sp,fp
 1089dac:	dfc00117 	ldw	ra,4(sp)
 1089db0:	df000017 	ldw	fp,0(sp)
 1089db4:	dec00204 	addi	sp,sp,8
 1089db8:	f800283a 	ret

01089dbc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1089dbc:	defffe04 	addi	sp,sp,-8
 1089dc0:	df000115 	stw	fp,4(sp)
 1089dc4:	df000104 	addi	fp,sp,4
 1089dc8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1089dcc:	e0bfff17 	ldw	r2,-4(fp)
 1089dd0:	108000d0 	cmplti	r2,r2,3
 1089dd4:	10000d1e 	bne	r2,zero,1089e0c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1089dd8:	00c04274 	movhi	r3,265
 1089ddc:	18f27e04 	addi	r3,r3,-13832
 1089de0:	e0bfff17 	ldw	r2,-4(fp)
 1089de4:	10800324 	muli	r2,r2,12
 1089de8:	1885883a 	add	r2,r3,r2
 1089dec:	10800204 	addi	r2,r2,8
 1089df0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1089df4:	00c04274 	movhi	r3,265
 1089df8:	18f27e04 	addi	r3,r3,-13832
 1089dfc:	e0bfff17 	ldw	r2,-4(fp)
 1089e00:	10800324 	muli	r2,r2,12
 1089e04:	1885883a 	add	r2,r3,r2
 1089e08:	10000015 	stw	zero,0(r2)
  }
}
 1089e0c:	e037883a 	mov	sp,fp
 1089e10:	df000017 	ldw	fp,0(sp)
 1089e14:	dec00104 	addi	sp,sp,4
 1089e18:	f800283a 	ret

01089e1c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1089e1c:	defff904 	addi	sp,sp,-28
 1089e20:	df000615 	stw	fp,24(sp)
 1089e24:	df000604 	addi	fp,sp,24
 1089e28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1089e2c:	0005303a 	rdctl	r2,status
 1089e30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1089e34:	e0fffc17 	ldw	r3,-16(fp)
 1089e38:	00bfff84 	movi	r2,-2
 1089e3c:	1884703a 	and	r2,r3,r2
 1089e40:	1001703a 	wrctl	status,r2
  
  return context;
 1089e44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1089e48:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1089e4c:	d0a00b17 	ldw	r2,-32724(gp)
 1089e50:	10c000c4 	addi	r3,r2,3
 1089e54:	00bfff04 	movi	r2,-4
 1089e58:	1884703a 	and	r2,r3,r2
 1089e5c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1089e60:	d0e00b17 	ldw	r3,-32724(gp)
 1089e64:	e0bfff17 	ldw	r2,-4(fp)
 1089e68:	1885883a 	add	r2,r3,r2
 1089e6c:	00c04374 	movhi	r3,269
 1089e70:	18f88004 	addi	r3,r3,-7680
 1089e74:	1880062e 	bgeu	r3,r2,1089e90 <sbrk+0x74>
 1089e78:	e0bffa17 	ldw	r2,-24(fp)
 1089e7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1089e80:	e0bffd17 	ldw	r2,-12(fp)
 1089e84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1089e88:	00bfffc4 	movi	r2,-1
 1089e8c:	00000b06 	br	1089ebc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1089e90:	d0a00b17 	ldw	r2,-32724(gp)
 1089e94:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 1089e98:	d0e00b17 	ldw	r3,-32724(gp)
 1089e9c:	e0bfff17 	ldw	r2,-4(fp)
 1089ea0:	1885883a 	add	r2,r3,r2
 1089ea4:	d0a00b15 	stw	r2,-32724(gp)
 1089ea8:	e0bffa17 	ldw	r2,-24(fp)
 1089eac:	e0bffe15 	stw	r2,-8(fp)
 1089eb0:	e0bffe17 	ldw	r2,-8(fp)
 1089eb4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1089eb8:	e0bffb17 	ldw	r2,-20(fp)
} 
 1089ebc:	e037883a 	mov	sp,fp
 1089ec0:	df000017 	ldw	fp,0(sp)
 1089ec4:	dec00104 	addi	sp,sp,4
 1089ec8:	f800283a 	ret

01089ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1089ecc:	defffe04 	addi	sp,sp,-8
 1089ed0:	dfc00115 	stw	ra,4(sp)
 1089ed4:	df000015 	stw	fp,0(sp)
 1089ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1089edc:	00804274 	movhi	r2,265
 1089ee0:	10b70004 	addi	r2,r2,-9216
 1089ee4:	10800017 	ldw	r2,0(r2)
 1089ee8:	10000526 	beq	r2,zero,1089f00 <alt_get_errno+0x34>
 1089eec:	00804274 	movhi	r2,265
 1089ef0:	10b70004 	addi	r2,r2,-9216
 1089ef4:	10800017 	ldw	r2,0(r2)
 1089ef8:	103ee83a 	callr	r2
 1089efc:	00000206 	br	1089f08 <alt_get_errno+0x3c>
 1089f00:	00804274 	movhi	r2,265
 1089f04:	10bda104 	addi	r2,r2,-2428
}
 1089f08:	e037883a 	mov	sp,fp
 1089f0c:	dfc00117 	ldw	ra,4(sp)
 1089f10:	df000017 	ldw	fp,0(sp)
 1089f14:	dec00204 	addi	sp,sp,8
 1089f18:	f800283a 	ret

01089f1c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1089f1c:	defff904 	addi	sp,sp,-28
 1089f20:	dfc00615 	stw	ra,24(sp)
 1089f24:	df000515 	stw	fp,20(sp)
 1089f28:	df000504 	addi	fp,sp,20
 1089f2c:	e13ffd15 	stw	r4,-12(fp)
 1089f30:	e17ffe15 	stw	r5,-8(fp)
 1089f34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1089f38:	e0bffd17 	ldw	r2,-12(fp)
 1089f3c:	10000616 	blt	r2,zero,1089f58 <write+0x3c>
 1089f40:	e0bffd17 	ldw	r2,-12(fp)
 1089f44:	10c00324 	muli	r3,r2,12
 1089f48:	00804274 	movhi	r2,265
 1089f4c:	10b27e04 	addi	r2,r2,-13832
 1089f50:	1885883a 	add	r2,r3,r2
 1089f54:	00000106 	br	1089f5c <write+0x40>
 1089f58:	0005883a 	mov	r2,zero
 1089f5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1089f60:	e0bffb17 	ldw	r2,-20(fp)
 1089f64:	10001f26 	beq	r2,zero,1089fe4 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1089f68:	e0bffb17 	ldw	r2,-20(fp)
 1089f6c:	10800217 	ldw	r2,8(r2)
 1089f70:	108000cc 	andi	r2,r2,3
 1089f74:	10001726 	beq	r2,zero,1089fd4 <write+0xb8>
 1089f78:	e0bffb17 	ldw	r2,-20(fp)
 1089f7c:	10800017 	ldw	r2,0(r2)
 1089f80:	10800617 	ldw	r2,24(r2)
 1089f84:	10001326 	beq	r2,zero,1089fd4 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1089f88:	e0bffb17 	ldw	r2,-20(fp)
 1089f8c:	10800017 	ldw	r2,0(r2)
 1089f90:	10c00617 	ldw	r3,24(r2)
 1089f94:	e0bfff17 	ldw	r2,-4(fp)
 1089f98:	e13ffb17 	ldw	r4,-20(fp)
 1089f9c:	e17ffe17 	ldw	r5,-8(fp)
 1089fa0:	100d883a 	mov	r6,r2
 1089fa4:	183ee83a 	callr	r3
 1089fa8:	e0bffc15 	stw	r2,-16(fp)
 1089fac:	e0bffc17 	ldw	r2,-16(fp)
 1089fb0:	1000060e 	bge	r2,zero,1089fcc <write+0xb0>
      {
        ALT_ERRNO = -rval;
 1089fb4:	1089ecc0 	call	1089ecc <alt_get_errno>
 1089fb8:	e0fffc17 	ldw	r3,-16(fp)
 1089fbc:	00c7c83a 	sub	r3,zero,r3
 1089fc0:	10c00015 	stw	r3,0(r2)
        return -1;
 1089fc4:	00bfffc4 	movi	r2,-1
 1089fc8:	00000a06 	br	1089ff4 <write+0xd8>
      }
      return rval;
 1089fcc:	e0bffc17 	ldw	r2,-16(fp)
 1089fd0:	00000806 	br	1089ff4 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1089fd4:	1089ecc0 	call	1089ecc <alt_get_errno>
 1089fd8:	00c00344 	movi	r3,13
 1089fdc:	10c00015 	stw	r3,0(r2)
 1089fe0:	00000306 	br	1089ff0 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1089fe4:	1089ecc0 	call	1089ecc <alt_get_errno>
 1089fe8:	00c01444 	movi	r3,81
 1089fec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 1089ff0:	00bfffc4 	movi	r2,-1
}
 1089ff4:	e037883a 	mov	sp,fp
 1089ff8:	dfc00117 	ldw	ra,4(sp)
 1089ffc:	df000017 	ldw	fp,0(sp)
 108a000:	dec00204 	addi	sp,sp,8
 108a004:	f800283a 	ret

0108a008 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 108a008:	defffd04 	addi	sp,sp,-12
 108a00c:	dfc00215 	stw	ra,8(sp)
 108a010:	df000115 	stw	fp,4(sp)
 108a014:	df000104 	addi	fp,sp,4
 108a018:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 108a01c:	e13fff17 	ldw	r4,-4(fp)
 108a020:	01404274 	movhi	r5,265
 108a024:	2976fd04 	addi	r5,r5,-9228
 108a028:	108ae080 	call	108ae08 <alt_dev_llist_insert>
}
 108a02c:	e037883a 	mov	sp,fp
 108a030:	dfc00117 	ldw	ra,4(sp)
 108a034:	df000017 	ldw	fp,0(sp)
 108a038:	dec00204 	addi	sp,sp,8
 108a03c:	f800283a 	ret

0108a040 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 108a040:	defffd04 	addi	sp,sp,-12
 108a044:	dfc00215 	stw	ra,8(sp)
 108a048:	df000115 	stw	fp,4(sp)
 108a04c:	df000104 	addi	fp,sp,4
 108a050:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 108a054:	108b79c0 	call	108b79c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 108a058:	00800044 	movi	r2,1
 108a05c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 108a060:	e037883a 	mov	sp,fp
 108a064:	dfc00117 	ldw	ra,4(sp)
 108a068:	df000017 	ldw	fp,0(sp)
 108a06c:	dec00204 	addi	sp,sp,8
 108a070:	f800283a 	ret

0108a074 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 108a074:	defffe04 	addi	sp,sp,-8
 108a078:	dfc00115 	stw	ra,4(sp)
 108a07c:	df000015 	stw	fp,0(sp)
 108a080:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 108a084:	0009883a 	mov	r4,zero
 108a088:	000b883a 	mov	r5,zero
 108a08c:	01800044 	movi	r6,1
 108a090:	01c0fa04 	movi	r7,1000
 108a094:	108abac0 	call	108abac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 108a098:	01004274 	movhi	r4,265
 108a09c:	2132e804 	addi	r4,r4,-13408
 108a0a0:	000b883a 	mov	r5,zero
 108a0a4:	000d883a 	mov	r6,zero
 108a0a8:	108a2380 	call	108a238 <altera_avalon_jtag_uart_init>
 108a0ac:	01004274 	movhi	r4,265
 108a0b0:	2132de04 	addi	r4,r4,-13448
 108a0b4:	108a0080 	call	108a008 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 108a0b8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 108a0bc:	0001883a 	nop
}
 108a0c0:	e037883a 	mov	sp,fp
 108a0c4:	dfc00117 	ldw	ra,4(sp)
 108a0c8:	df000017 	ldw	fp,0(sp)
 108a0cc:	dec00204 	addi	sp,sp,8
 108a0d0:	f800283a 	ret

0108a0d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 108a0d4:	defffa04 	addi	sp,sp,-24
 108a0d8:	dfc00515 	stw	ra,20(sp)
 108a0dc:	df000415 	stw	fp,16(sp)
 108a0e0:	df000404 	addi	fp,sp,16
 108a0e4:	e13ffd15 	stw	r4,-12(fp)
 108a0e8:	e17ffe15 	stw	r5,-8(fp)
 108a0ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 108a0f0:	e0bffd17 	ldw	r2,-12(fp)
 108a0f4:	10800017 	ldw	r2,0(r2)
 108a0f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 108a0fc:	e0bffc17 	ldw	r2,-16(fp)
 108a100:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 108a104:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 108a108:	10800217 	ldw	r2,8(r2)
 108a10c:	1809883a 	mov	r4,r3
 108a110:	e17ffe17 	ldw	r5,-8(fp)
 108a114:	e1bfff17 	ldw	r6,-4(fp)
 108a118:	100f883a 	mov	r7,r2
 108a11c:	108a6fc0 	call	108a6fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 108a120:	e037883a 	mov	sp,fp
 108a124:	dfc00117 	ldw	ra,4(sp)
 108a128:	df000017 	ldw	fp,0(sp)
 108a12c:	dec00204 	addi	sp,sp,8
 108a130:	f800283a 	ret

0108a134 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 108a134:	defffa04 	addi	sp,sp,-24
 108a138:	dfc00515 	stw	ra,20(sp)
 108a13c:	df000415 	stw	fp,16(sp)
 108a140:	df000404 	addi	fp,sp,16
 108a144:	e13ffd15 	stw	r4,-12(fp)
 108a148:	e17ffe15 	stw	r5,-8(fp)
 108a14c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 108a150:	e0bffd17 	ldw	r2,-12(fp)
 108a154:	10800017 	ldw	r2,0(r2)
 108a158:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 108a15c:	e0bffc17 	ldw	r2,-16(fp)
 108a160:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 108a164:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 108a168:	10800217 	ldw	r2,8(r2)
 108a16c:	1809883a 	mov	r4,r3
 108a170:	e17ffe17 	ldw	r5,-8(fp)
 108a174:	e1bfff17 	ldw	r6,-4(fp)
 108a178:	100f883a 	mov	r7,r2
 108a17c:	108a9140 	call	108a914 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 108a180:	e037883a 	mov	sp,fp
 108a184:	dfc00117 	ldw	ra,4(sp)
 108a188:	df000017 	ldw	fp,0(sp)
 108a18c:	dec00204 	addi	sp,sp,8
 108a190:	f800283a 	ret

0108a194 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 108a194:	defffc04 	addi	sp,sp,-16
 108a198:	dfc00315 	stw	ra,12(sp)
 108a19c:	df000215 	stw	fp,8(sp)
 108a1a0:	df000204 	addi	fp,sp,8
 108a1a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 108a1a8:	e0bfff17 	ldw	r2,-4(fp)
 108a1ac:	10800017 	ldw	r2,0(r2)
 108a1b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 108a1b4:	e0bffe17 	ldw	r2,-8(fp)
 108a1b8:	10c00a04 	addi	r3,r2,40
 108a1bc:	e0bfff17 	ldw	r2,-4(fp)
 108a1c0:	10800217 	ldw	r2,8(r2)
 108a1c4:	1809883a 	mov	r4,r3
 108a1c8:	100b883a 	mov	r5,r2
 108a1cc:	108a5a00 	call	108a5a0 <altera_avalon_jtag_uart_close>
}
 108a1d0:	e037883a 	mov	sp,fp
 108a1d4:	dfc00117 	ldw	ra,4(sp)
 108a1d8:	df000017 	ldw	fp,0(sp)
 108a1dc:	dec00204 	addi	sp,sp,8
 108a1e0:	f800283a 	ret

0108a1e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 108a1e4:	defffa04 	addi	sp,sp,-24
 108a1e8:	dfc00515 	stw	ra,20(sp)
 108a1ec:	df000415 	stw	fp,16(sp)
 108a1f0:	df000404 	addi	fp,sp,16
 108a1f4:	e13ffd15 	stw	r4,-12(fp)
 108a1f8:	e17ffe15 	stw	r5,-8(fp)
 108a1fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 108a200:	e0bffd17 	ldw	r2,-12(fp)
 108a204:	10800017 	ldw	r2,0(r2)
 108a208:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 108a20c:	e0bffc17 	ldw	r2,-16(fp)
 108a210:	10800a04 	addi	r2,r2,40
 108a214:	1009883a 	mov	r4,r2
 108a218:	e17ffe17 	ldw	r5,-8(fp)
 108a21c:	e1bfff17 	ldw	r6,-4(fp)
 108a220:	108a6080 	call	108a608 <altera_avalon_jtag_uart_ioctl>
}
 108a224:	e037883a 	mov	sp,fp
 108a228:	dfc00117 	ldw	ra,4(sp)
 108a22c:	df000017 	ldw	fp,0(sp)
 108a230:	dec00204 	addi	sp,sp,8
 108a234:	f800283a 	ret

0108a238 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 108a238:	defffa04 	addi	sp,sp,-24
 108a23c:	dfc00515 	stw	ra,20(sp)
 108a240:	df000415 	stw	fp,16(sp)
 108a244:	df000404 	addi	fp,sp,16
 108a248:	e13ffd15 	stw	r4,-12(fp)
 108a24c:	e17ffe15 	stw	r5,-8(fp)
 108a250:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 108a254:	e0bffd17 	ldw	r2,-12(fp)
 108a258:	00c00044 	movi	r3,1
 108a25c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 108a260:	e0bffd17 	ldw	r2,-12(fp)
 108a264:	10800017 	ldw	r2,0(r2)
 108a268:	10800104 	addi	r2,r2,4
 108a26c:	e0fffd17 	ldw	r3,-12(fp)
 108a270:	18c00817 	ldw	r3,32(r3)
 108a274:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 108a278:	e0fffe17 	ldw	r3,-8(fp)
 108a27c:	e0bfff17 	ldw	r2,-4(fp)
 108a280:	d8000015 	stw	zero,0(sp)
 108a284:	1809883a 	mov	r4,r3
 108a288:	100b883a 	mov	r5,r2
 108a28c:	01804274 	movhi	r6,265
 108a290:	31a8be04 	addi	r6,r6,-23816
 108a294:	e1fffd17 	ldw	r7,-12(fp)
 108a298:	108af900 	call	108af90 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 108a29c:	e0bffd17 	ldw	r2,-12(fp)
 108a2a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 108a2a4:	e0bffd17 	ldw	r2,-12(fp)
 108a2a8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 108a2ac:	00804274 	movhi	r2,265
 108a2b0:	10bda604 	addi	r2,r2,-2408
 108a2b4:	10800017 	ldw	r2,0(r2)
 108a2b8:	1809883a 	mov	r4,r3
 108a2bc:	100b883a 	mov	r5,r2
 108a2c0:	01804274 	movhi	r6,265
 108a2c4:	31a93f04 	addi	r6,r6,-23300
 108a2c8:	e1fffd17 	ldw	r7,-12(fp)
 108a2cc:	108ac340 	call	108ac34 <alt_alarm_start>
 108a2d0:	1000040e 	bge	r2,zero,108a2e4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 108a2d4:	e0bffd17 	ldw	r2,-12(fp)
 108a2d8:	00e00034 	movhi	r3,32768
 108a2dc:	18ffffc4 	addi	r3,r3,-1
 108a2e0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 108a2e4:	e037883a 	mov	sp,fp
 108a2e8:	dfc00117 	ldw	ra,4(sp)
 108a2ec:	df000017 	ldw	fp,0(sp)
 108a2f0:	dec00204 	addi	sp,sp,8
 108a2f4:	f800283a 	ret

0108a2f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 108a2f8:	defff804 	addi	sp,sp,-32
 108a2fc:	df000715 	stw	fp,28(sp)
 108a300:	df000704 	addi	fp,sp,28
 108a304:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 108a308:	e0bfff17 	ldw	r2,-4(fp)
 108a30c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 108a310:	e0bffb17 	ldw	r2,-20(fp)
 108a314:	10800017 	ldw	r2,0(r2)
 108a318:	e0bffc15 	stw	r2,-16(fp)
 108a31c:	00000106 	br	108a324 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 108a320:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 108a324:	e0bffc17 	ldw	r2,-16(fp)
 108a328:	10800104 	addi	r2,r2,4
 108a32c:	10800037 	ldwio	r2,0(r2)
 108a330:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 108a334:	e0bffd17 	ldw	r2,-12(fp)
 108a338:	1080c00c 	andi	r2,r2,768
 108a33c:	10006a26 	beq	r2,zero,108a4e8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 108a340:	e0bffd17 	ldw	r2,-12(fp)
 108a344:	1080400c 	andi	r2,r2,256
 108a348:	10003326 	beq	r2,zero,108a418 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 108a34c:	00800074 	movhi	r2,1
 108a350:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 108a354:	e0bffb17 	ldw	r2,-20(fp)
 108a358:	10800a17 	ldw	r2,40(r2)
 108a35c:	10800044 	addi	r2,r2,1
 108a360:	1081ffcc 	andi	r2,r2,2047
 108a364:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 108a368:	e0bffb17 	ldw	r2,-20(fp)
 108a36c:	10c00b17 	ldw	r3,44(r2)
 108a370:	e0bffe17 	ldw	r2,-8(fp)
 108a374:	18801426 	beq	r3,r2,108a3c8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 108a378:	e0bffc17 	ldw	r2,-16(fp)
 108a37c:	10800037 	ldwio	r2,0(r2)
 108a380:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 108a384:	e0bff917 	ldw	r2,-28(fp)
 108a388:	10a0000c 	andi	r2,r2,32768
 108a38c:	10001026 	beq	r2,zero,108a3d0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 108a390:	e0bffb17 	ldw	r2,-20(fp)
 108a394:	10800a17 	ldw	r2,40(r2)
 108a398:	e0fff917 	ldw	r3,-28(fp)
 108a39c:	e13ffb17 	ldw	r4,-20(fp)
 108a3a0:	2085883a 	add	r2,r4,r2
 108a3a4:	10800e04 	addi	r2,r2,56
 108a3a8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 108a3ac:	e0bffb17 	ldw	r2,-20(fp)
 108a3b0:	10800a17 	ldw	r2,40(r2)
 108a3b4:	10800044 	addi	r2,r2,1
 108a3b8:	10c1ffcc 	andi	r3,r2,2047
 108a3bc:	e0bffb17 	ldw	r2,-20(fp)
 108a3c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 108a3c4:	003fe306 	br	108a354 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 108a3c8:	0001883a 	nop
 108a3cc:	00000106 	br	108a3d4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 108a3d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 108a3d4:	e0bff917 	ldw	r2,-28(fp)
 108a3d8:	10bfffec 	andhi	r2,r2,65535
 108a3dc:	10000e26 	beq	r2,zero,108a418 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 108a3e0:	e0bffb17 	ldw	r2,-20(fp)
 108a3e4:	10c00817 	ldw	r3,32(r2)
 108a3e8:	00bfff84 	movi	r2,-2
 108a3ec:	1886703a 	and	r3,r3,r2
 108a3f0:	e0bffb17 	ldw	r2,-20(fp)
 108a3f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 108a3f8:	e0bffc17 	ldw	r2,-16(fp)
 108a3fc:	10800104 	addi	r2,r2,4
 108a400:	e0fffb17 	ldw	r3,-20(fp)
 108a404:	18c00817 	ldw	r3,32(r3)
 108a408:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 108a40c:	e0bffc17 	ldw	r2,-16(fp)
 108a410:	10800104 	addi	r2,r2,4
 108a414:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 108a418:	e0bffd17 	ldw	r2,-12(fp)
 108a41c:	1080800c 	andi	r2,r2,512
 108a420:	103fbf26 	beq	r2,zero,108a320 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 108a424:	e0bffd17 	ldw	r2,-12(fp)
 108a428:	1004d43a 	srli	r2,r2,16
 108a42c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 108a430:	00001406 	br	108a484 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 108a434:	e0bffc17 	ldw	r2,-16(fp)
 108a438:	e0fffb17 	ldw	r3,-20(fp)
 108a43c:	18c00d17 	ldw	r3,52(r3)
 108a440:	e13ffb17 	ldw	r4,-20(fp)
 108a444:	20c7883a 	add	r3,r4,r3
 108a448:	18c20e04 	addi	r3,r3,2104
 108a44c:	18c00003 	ldbu	r3,0(r3)
 108a450:	18c03fcc 	andi	r3,r3,255
 108a454:	18c0201c 	xori	r3,r3,128
 108a458:	18ffe004 	addi	r3,r3,-128
 108a45c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 108a460:	e0bffb17 	ldw	r2,-20(fp)
 108a464:	10800d17 	ldw	r2,52(r2)
 108a468:	10800044 	addi	r2,r2,1
 108a46c:	10c1ffcc 	andi	r3,r2,2047
 108a470:	e0bffb17 	ldw	r2,-20(fp)
 108a474:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 108a478:	e0bffa17 	ldw	r2,-24(fp)
 108a47c:	10bfffc4 	addi	r2,r2,-1
 108a480:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 108a484:	e0bffa17 	ldw	r2,-24(fp)
 108a488:	10000526 	beq	r2,zero,108a4a0 <altera_avalon_jtag_uart_irq+0x1a8>
 108a48c:	e0bffb17 	ldw	r2,-20(fp)
 108a490:	10c00d17 	ldw	r3,52(r2)
 108a494:	e0bffb17 	ldw	r2,-20(fp)
 108a498:	10800c17 	ldw	r2,48(r2)
 108a49c:	18bfe51e 	bne	r3,r2,108a434 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 108a4a0:	e0bffa17 	ldw	r2,-24(fp)
 108a4a4:	103f9e26 	beq	r2,zero,108a320 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 108a4a8:	e0bffb17 	ldw	r2,-20(fp)
 108a4ac:	10c00817 	ldw	r3,32(r2)
 108a4b0:	00bfff44 	movi	r2,-3
 108a4b4:	1886703a 	and	r3,r3,r2
 108a4b8:	e0bffb17 	ldw	r2,-20(fp)
 108a4bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 108a4c0:	e0bffb17 	ldw	r2,-20(fp)
 108a4c4:	10800017 	ldw	r2,0(r2)
 108a4c8:	10800104 	addi	r2,r2,4
 108a4cc:	e0fffb17 	ldw	r3,-20(fp)
 108a4d0:	18c00817 	ldw	r3,32(r3)
 108a4d4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 108a4d8:	e0bffc17 	ldw	r2,-16(fp)
 108a4dc:	10800104 	addi	r2,r2,4
 108a4e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 108a4e4:	003f8e06 	br	108a320 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 108a4e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 108a4ec:	e037883a 	mov	sp,fp
 108a4f0:	df000017 	ldw	fp,0(sp)
 108a4f4:	dec00104 	addi	sp,sp,4
 108a4f8:	f800283a 	ret

0108a4fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 108a4fc:	defffc04 	addi	sp,sp,-16
 108a500:	df000315 	stw	fp,12(sp)
 108a504:	df000304 	addi	fp,sp,12
 108a508:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 108a50c:	e0bfff17 	ldw	r2,-4(fp)
 108a510:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 108a514:	e0bffd17 	ldw	r2,-12(fp)
 108a518:	10800017 	ldw	r2,0(r2)
 108a51c:	10800104 	addi	r2,r2,4
 108a520:	10800037 	ldwio	r2,0(r2)
 108a524:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 108a528:	e0bffe17 	ldw	r2,-8(fp)
 108a52c:	1081000c 	andi	r2,r2,1024
 108a530:	10000a26 	beq	r2,zero,108a55c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 108a534:	e0bffd17 	ldw	r2,-12(fp)
 108a538:	10800017 	ldw	r2,0(r2)
 108a53c:	10800104 	addi	r2,r2,4
 108a540:	e0fffd17 	ldw	r3,-12(fp)
 108a544:	18c00817 	ldw	r3,32(r3)
 108a548:	18c10014 	ori	r3,r3,1024
 108a54c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 108a550:	e0bffd17 	ldw	r2,-12(fp)
 108a554:	10000915 	stw	zero,36(r2)
 108a558:	00000a06 	br	108a584 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 108a55c:	e0bffd17 	ldw	r2,-12(fp)
 108a560:	10800917 	ldw	r2,36(r2)
 108a564:	00e00034 	movhi	r3,32768
 108a568:	18ffff04 	addi	r3,r3,-4
 108a56c:	18800536 	bltu	r3,r2,108a584 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 108a570:	e0bffd17 	ldw	r2,-12(fp)
 108a574:	10800917 	ldw	r2,36(r2)
 108a578:	10c00044 	addi	r3,r2,1
 108a57c:	e0bffd17 	ldw	r2,-12(fp)
 108a580:	10c00915 	stw	r3,36(r2)
 108a584:	00804274 	movhi	r2,265
 108a588:	10bda604 	addi	r2,r2,-2408
 108a58c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 108a590:	e037883a 	mov	sp,fp
 108a594:	df000017 	ldw	fp,0(sp)
 108a598:	dec00104 	addi	sp,sp,4
 108a59c:	f800283a 	ret

0108a5a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 108a5a0:	defffd04 	addi	sp,sp,-12
 108a5a4:	df000215 	stw	fp,8(sp)
 108a5a8:	df000204 	addi	fp,sp,8
 108a5ac:	e13ffe15 	stw	r4,-8(fp)
 108a5b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 108a5b4:	00000506 	br	108a5cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 108a5b8:	e0bfff17 	ldw	r2,-4(fp)
 108a5bc:	1090000c 	andi	r2,r2,16384
 108a5c0:	10000226 	beq	r2,zero,108a5cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 108a5c4:	00bffd44 	movi	r2,-11
 108a5c8:	00000b06 	br	108a5f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 108a5cc:	e0bffe17 	ldw	r2,-8(fp)
 108a5d0:	10c00d17 	ldw	r3,52(r2)
 108a5d4:	e0bffe17 	ldw	r2,-8(fp)
 108a5d8:	10800c17 	ldw	r2,48(r2)
 108a5dc:	18800526 	beq	r3,r2,108a5f4 <altera_avalon_jtag_uart_close+0x54>
 108a5e0:	e0bffe17 	ldw	r2,-8(fp)
 108a5e4:	10c00917 	ldw	r3,36(r2)
 108a5e8:	e0bffe17 	ldw	r2,-8(fp)
 108a5ec:	10800117 	ldw	r2,4(r2)
 108a5f0:	18bff136 	bltu	r3,r2,108a5b8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 108a5f4:	0005883a 	mov	r2,zero
}
 108a5f8:	e037883a 	mov	sp,fp
 108a5fc:	df000017 	ldw	fp,0(sp)
 108a600:	dec00104 	addi	sp,sp,4
 108a604:	f800283a 	ret

0108a608 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 108a608:	defffa04 	addi	sp,sp,-24
 108a60c:	df000515 	stw	fp,20(sp)
 108a610:	df000504 	addi	fp,sp,20
 108a614:	e13ffd15 	stw	r4,-12(fp)
 108a618:	e17ffe15 	stw	r5,-8(fp)
 108a61c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 108a620:	00bff9c4 	movi	r2,-25
 108a624:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 108a628:	e0bffe17 	ldw	r2,-8(fp)
 108a62c:	10da8060 	cmpeqi	r3,r2,27137
 108a630:	1800031e 	bne	r3,zero,108a640 <altera_avalon_jtag_uart_ioctl+0x38>
 108a634:	109a80a0 	cmpeqi	r2,r2,27138
 108a638:	1000181e 	bne	r2,zero,108a69c <altera_avalon_jtag_uart_ioctl+0x94>
 108a63c:	00002606 	br	108a6d8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 108a640:	e0bffd17 	ldw	r2,-12(fp)
 108a644:	10c00117 	ldw	r3,4(r2)
 108a648:	00a00034 	movhi	r2,32768
 108a64c:	10bfffc4 	addi	r2,r2,-1
 108a650:	18802226 	beq	r3,r2,108a6dc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 108a654:	e0bfff17 	ldw	r2,-4(fp)
 108a658:	10800017 	ldw	r2,0(r2)
 108a65c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 108a660:	e0bffc17 	ldw	r2,-16(fp)
 108a664:	10800090 	cmplti	r2,r2,2
 108a668:	1000061e 	bne	r2,zero,108a684 <altera_avalon_jtag_uart_ioctl+0x7c>
 108a66c:	e0fffc17 	ldw	r3,-16(fp)
 108a670:	00a00034 	movhi	r2,32768
 108a674:	10bfffc4 	addi	r2,r2,-1
 108a678:	18800226 	beq	r3,r2,108a684 <altera_avalon_jtag_uart_ioctl+0x7c>
 108a67c:	e0bffc17 	ldw	r2,-16(fp)
 108a680:	00000206 	br	108a68c <altera_avalon_jtag_uart_ioctl+0x84>
 108a684:	00a00034 	movhi	r2,32768
 108a688:	10bfff84 	addi	r2,r2,-2
 108a68c:	e0fffd17 	ldw	r3,-12(fp)
 108a690:	18800115 	stw	r2,4(r3)
      rc = 0;
 108a694:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 108a698:	00001006 	br	108a6dc <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 108a69c:	e0bffd17 	ldw	r2,-12(fp)
 108a6a0:	10c00117 	ldw	r3,4(r2)
 108a6a4:	00a00034 	movhi	r2,32768
 108a6a8:	10bfffc4 	addi	r2,r2,-1
 108a6ac:	18800d26 	beq	r3,r2,108a6e4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 108a6b0:	e0bffd17 	ldw	r2,-12(fp)
 108a6b4:	10c00917 	ldw	r3,36(r2)
 108a6b8:	e0bffd17 	ldw	r2,-12(fp)
 108a6bc:	10800117 	ldw	r2,4(r2)
 108a6c0:	1885803a 	cmpltu	r2,r3,r2
 108a6c4:	10c03fcc 	andi	r3,r2,255
 108a6c8:	e0bfff17 	ldw	r2,-4(fp)
 108a6cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 108a6d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 108a6d4:	00000306 	br	108a6e4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 108a6d8:	00000306 	br	108a6e8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 108a6dc:	0001883a 	nop
 108a6e0:	00000106 	br	108a6e8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 108a6e4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 108a6e8:	e0bffb17 	ldw	r2,-20(fp)
}
 108a6ec:	e037883a 	mov	sp,fp
 108a6f0:	df000017 	ldw	fp,0(sp)
 108a6f4:	dec00104 	addi	sp,sp,4
 108a6f8:	f800283a 	ret

0108a6fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 108a6fc:	defff304 	addi	sp,sp,-52
 108a700:	dfc00c15 	stw	ra,48(sp)
 108a704:	df000b15 	stw	fp,44(sp)
 108a708:	df000b04 	addi	fp,sp,44
 108a70c:	e13ffc15 	stw	r4,-16(fp)
 108a710:	e17ffd15 	stw	r5,-12(fp)
 108a714:	e1bffe15 	stw	r6,-8(fp)
 108a718:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 108a71c:	e0bffd17 	ldw	r2,-12(fp)
 108a720:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 108a724:	00004706 	br	108a844 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 108a728:	e0bffc17 	ldw	r2,-16(fp)
 108a72c:	10800a17 	ldw	r2,40(r2)
 108a730:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 108a734:	e0bffc17 	ldw	r2,-16(fp)
 108a738:	10800b17 	ldw	r2,44(r2)
 108a73c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 108a740:	e0fff717 	ldw	r3,-36(fp)
 108a744:	e0bff817 	ldw	r2,-32(fp)
 108a748:	18800536 	bltu	r3,r2,108a760 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 108a74c:	e0fff717 	ldw	r3,-36(fp)
 108a750:	e0bff817 	ldw	r2,-32(fp)
 108a754:	1885c83a 	sub	r2,r3,r2
 108a758:	e0bff615 	stw	r2,-40(fp)
 108a75c:	00000406 	br	108a770 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 108a760:	00c20004 	movi	r3,2048
 108a764:	e0bff817 	ldw	r2,-32(fp)
 108a768:	1885c83a 	sub	r2,r3,r2
 108a76c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 108a770:	e0bff617 	ldw	r2,-40(fp)
 108a774:	10001e26 	beq	r2,zero,108a7f0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 108a778:	e0fffe17 	ldw	r3,-8(fp)
 108a77c:	e0bff617 	ldw	r2,-40(fp)
 108a780:	1880022e 	bgeu	r3,r2,108a78c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 108a784:	e0bffe17 	ldw	r2,-8(fp)
 108a788:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 108a78c:	e0bff817 	ldw	r2,-32(fp)
 108a790:	10800e04 	addi	r2,r2,56
 108a794:	e0fffc17 	ldw	r3,-16(fp)
 108a798:	1885883a 	add	r2,r3,r2
 108a79c:	e13ff517 	ldw	r4,-44(fp)
 108a7a0:	100b883a 	mov	r5,r2
 108a7a4:	e1bff617 	ldw	r6,-40(fp)
 108a7a8:	10861940 	call	1086194 <memcpy>
      ptr   += n;
 108a7ac:	e0fff517 	ldw	r3,-44(fp)
 108a7b0:	e0bff617 	ldw	r2,-40(fp)
 108a7b4:	1885883a 	add	r2,r3,r2
 108a7b8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 108a7bc:	e0fffe17 	ldw	r3,-8(fp)
 108a7c0:	e0bff617 	ldw	r2,-40(fp)
 108a7c4:	1885c83a 	sub	r2,r3,r2
 108a7c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 108a7cc:	e0fff817 	ldw	r3,-32(fp)
 108a7d0:	e0bff617 	ldw	r2,-40(fp)
 108a7d4:	1885883a 	add	r2,r3,r2
 108a7d8:	10c1ffcc 	andi	r3,r2,2047
 108a7dc:	e0bffc17 	ldw	r2,-16(fp)
 108a7e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 108a7e4:	e0bffe17 	ldw	r2,-8(fp)
 108a7e8:	00bfcf16 	blt	zero,r2,108a728 <altera_avalon_jtag_uart_read+0x2c>
 108a7ec:	00000106 	br	108a7f4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 108a7f0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 108a7f4:	e0fff517 	ldw	r3,-44(fp)
 108a7f8:	e0bffd17 	ldw	r2,-12(fp)
 108a7fc:	1880141e 	bne	r3,r2,108a850 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 108a800:	e0bfff17 	ldw	r2,-4(fp)
 108a804:	1090000c 	andi	r2,r2,16384
 108a808:	1000131e 	bne	r2,zero,108a858 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 108a80c:	0001883a 	nop
 108a810:	e0bffc17 	ldw	r2,-16(fp)
 108a814:	10c00a17 	ldw	r3,40(r2)
 108a818:	e0bff717 	ldw	r2,-36(fp)
 108a81c:	1880051e 	bne	r3,r2,108a834 <altera_avalon_jtag_uart_read+0x138>
 108a820:	e0bffc17 	ldw	r2,-16(fp)
 108a824:	10c00917 	ldw	r3,36(r2)
 108a828:	e0bffc17 	ldw	r2,-16(fp)
 108a82c:	10800117 	ldw	r2,4(r2)
 108a830:	18bff736 	bltu	r3,r2,108a810 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 108a834:	e0bffc17 	ldw	r2,-16(fp)
 108a838:	10c00a17 	ldw	r3,40(r2)
 108a83c:	e0bff717 	ldw	r2,-36(fp)
 108a840:	18800726 	beq	r3,r2,108a860 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 108a844:	e0bffe17 	ldw	r2,-8(fp)
 108a848:	00bfb716 	blt	zero,r2,108a728 <altera_avalon_jtag_uart_read+0x2c>
 108a84c:	00000506 	br	108a864 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 108a850:	0001883a 	nop
 108a854:	00000306 	br	108a864 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 108a858:	0001883a 	nop
 108a85c:	00000106 	br	108a864 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 108a860:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 108a864:	e0fff517 	ldw	r3,-44(fp)
 108a868:	e0bffd17 	ldw	r2,-12(fp)
 108a86c:	18801726 	beq	r3,r2,108a8cc <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108a870:	0005303a 	rdctl	r2,status
 108a874:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108a878:	e0fffa17 	ldw	r3,-24(fp)
 108a87c:	00bfff84 	movi	r2,-2
 108a880:	1884703a 	and	r2,r3,r2
 108a884:	1001703a 	wrctl	status,r2
  
  return context;
 108a888:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 108a88c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 108a890:	e0bffc17 	ldw	r2,-16(fp)
 108a894:	10800817 	ldw	r2,32(r2)
 108a898:	10c00054 	ori	r3,r2,1
 108a89c:	e0bffc17 	ldw	r2,-16(fp)
 108a8a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 108a8a4:	e0bffc17 	ldw	r2,-16(fp)
 108a8a8:	10800017 	ldw	r2,0(r2)
 108a8ac:	10800104 	addi	r2,r2,4
 108a8b0:	e0fffc17 	ldw	r3,-16(fp)
 108a8b4:	18c00817 	ldw	r3,32(r3)
 108a8b8:	10c00035 	stwio	r3,0(r2)
 108a8bc:	e0bff917 	ldw	r2,-28(fp)
 108a8c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108a8c4:	e0bffb17 	ldw	r2,-20(fp)
 108a8c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 108a8cc:	e0fff517 	ldw	r3,-44(fp)
 108a8d0:	e0bffd17 	ldw	r2,-12(fp)
 108a8d4:	18800426 	beq	r3,r2,108a8e8 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 108a8d8:	e0fff517 	ldw	r3,-44(fp)
 108a8dc:	e0bffd17 	ldw	r2,-12(fp)
 108a8e0:	1885c83a 	sub	r2,r3,r2
 108a8e4:	00000606 	br	108a900 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 108a8e8:	e0bfff17 	ldw	r2,-4(fp)
 108a8ec:	1090000c 	andi	r2,r2,16384
 108a8f0:	10000226 	beq	r2,zero,108a8fc <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 108a8f4:	00bffd44 	movi	r2,-11
 108a8f8:	00000106 	br	108a900 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 108a8fc:	00bffec4 	movi	r2,-5
}
 108a900:	e037883a 	mov	sp,fp
 108a904:	dfc00117 	ldw	ra,4(sp)
 108a908:	df000017 	ldw	fp,0(sp)
 108a90c:	dec00204 	addi	sp,sp,8
 108a910:	f800283a 	ret

0108a914 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 108a914:	defff304 	addi	sp,sp,-52
 108a918:	dfc00c15 	stw	ra,48(sp)
 108a91c:	df000b15 	stw	fp,44(sp)
 108a920:	df000b04 	addi	fp,sp,44
 108a924:	e13ffc15 	stw	r4,-16(fp)
 108a928:	e17ffd15 	stw	r5,-12(fp)
 108a92c:	e1bffe15 	stw	r6,-8(fp)
 108a930:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 108a934:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 108a938:	e0bffd17 	ldw	r2,-12(fp)
 108a93c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 108a940:	00003706 	br	108aa20 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 108a944:	e0bffc17 	ldw	r2,-16(fp)
 108a948:	10800c17 	ldw	r2,48(r2)
 108a94c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 108a950:	e0bffc17 	ldw	r2,-16(fp)
 108a954:	10800d17 	ldw	r2,52(r2)
 108a958:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 108a95c:	e0fff817 	ldw	r3,-32(fp)
 108a960:	e0bff517 	ldw	r2,-44(fp)
 108a964:	1880062e 	bgeu	r3,r2,108a980 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 108a968:	e0fff517 	ldw	r3,-44(fp)
 108a96c:	e0bff817 	ldw	r2,-32(fp)
 108a970:	1885c83a 	sub	r2,r3,r2
 108a974:	10bfffc4 	addi	r2,r2,-1
 108a978:	e0bff615 	stw	r2,-40(fp)
 108a97c:	00000b06 	br	108a9ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 108a980:	e0bff517 	ldw	r2,-44(fp)
 108a984:	10000526 	beq	r2,zero,108a99c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 108a988:	00c20004 	movi	r3,2048
 108a98c:	e0bff817 	ldw	r2,-32(fp)
 108a990:	1885c83a 	sub	r2,r3,r2
 108a994:	e0bff615 	stw	r2,-40(fp)
 108a998:	00000406 	br	108a9ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 108a99c:	00c1ffc4 	movi	r3,2047
 108a9a0:	e0bff817 	ldw	r2,-32(fp)
 108a9a4:	1885c83a 	sub	r2,r3,r2
 108a9a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 108a9ac:	e0bff617 	ldw	r2,-40(fp)
 108a9b0:	10001e26 	beq	r2,zero,108aa2c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 108a9b4:	e0fffe17 	ldw	r3,-8(fp)
 108a9b8:	e0bff617 	ldw	r2,-40(fp)
 108a9bc:	1880022e 	bgeu	r3,r2,108a9c8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 108a9c0:	e0bffe17 	ldw	r2,-8(fp)
 108a9c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 108a9c8:	e0bff817 	ldw	r2,-32(fp)
 108a9cc:	10820e04 	addi	r2,r2,2104
 108a9d0:	e0fffc17 	ldw	r3,-16(fp)
 108a9d4:	1885883a 	add	r2,r3,r2
 108a9d8:	1009883a 	mov	r4,r2
 108a9dc:	e17ffd17 	ldw	r5,-12(fp)
 108a9e0:	e1bff617 	ldw	r6,-40(fp)
 108a9e4:	10861940 	call	1086194 <memcpy>
      ptr   += n;
 108a9e8:	e0fffd17 	ldw	r3,-12(fp)
 108a9ec:	e0bff617 	ldw	r2,-40(fp)
 108a9f0:	1885883a 	add	r2,r3,r2
 108a9f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 108a9f8:	e0fffe17 	ldw	r3,-8(fp)
 108a9fc:	e0bff617 	ldw	r2,-40(fp)
 108aa00:	1885c83a 	sub	r2,r3,r2
 108aa04:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 108aa08:	e0fff817 	ldw	r3,-32(fp)
 108aa0c:	e0bff617 	ldw	r2,-40(fp)
 108aa10:	1885883a 	add	r2,r3,r2
 108aa14:	10c1ffcc 	andi	r3,r2,2047
 108aa18:	e0bffc17 	ldw	r2,-16(fp)
 108aa1c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 108aa20:	e0bffe17 	ldw	r2,-8(fp)
 108aa24:	00bfc716 	blt	zero,r2,108a944 <altera_avalon_jtag_uart_write+0x30>
 108aa28:	00000106 	br	108aa30 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 108aa2c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108aa30:	0005303a 	rdctl	r2,status
 108aa34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108aa38:	e0fffa17 	ldw	r3,-24(fp)
 108aa3c:	00bfff84 	movi	r2,-2
 108aa40:	1884703a 	and	r2,r3,r2
 108aa44:	1001703a 	wrctl	status,r2
  
  return context;
 108aa48:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 108aa4c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 108aa50:	e0bffc17 	ldw	r2,-16(fp)
 108aa54:	10800817 	ldw	r2,32(r2)
 108aa58:	10c00094 	ori	r3,r2,2
 108aa5c:	e0bffc17 	ldw	r2,-16(fp)
 108aa60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 108aa64:	e0bffc17 	ldw	r2,-16(fp)
 108aa68:	10800017 	ldw	r2,0(r2)
 108aa6c:	10800104 	addi	r2,r2,4
 108aa70:	e0fffc17 	ldw	r3,-16(fp)
 108aa74:	18c00817 	ldw	r3,32(r3)
 108aa78:	10c00035 	stwio	r3,0(r2)
 108aa7c:	e0bff917 	ldw	r2,-28(fp)
 108aa80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108aa84:	e0bffb17 	ldw	r2,-20(fp)
 108aa88:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 108aa8c:	e0bffe17 	ldw	r2,-8(fp)
 108aa90:	0080110e 	bge	zero,r2,108aad8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 108aa94:	e0bfff17 	ldw	r2,-4(fp)
 108aa98:	1090000c 	andi	r2,r2,16384
 108aa9c:	1000111e 	bne	r2,zero,108aae4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 108aaa0:	0001883a 	nop
 108aaa4:	e0bffc17 	ldw	r2,-16(fp)
 108aaa8:	10c00d17 	ldw	r3,52(r2)
 108aaac:	e0bff517 	ldw	r2,-44(fp)
 108aab0:	1880051e 	bne	r3,r2,108aac8 <altera_avalon_jtag_uart_write+0x1b4>
 108aab4:	e0bffc17 	ldw	r2,-16(fp)
 108aab8:	10c00917 	ldw	r3,36(r2)
 108aabc:	e0bffc17 	ldw	r2,-16(fp)
 108aac0:	10800117 	ldw	r2,4(r2)
 108aac4:	18bff736 	bltu	r3,r2,108aaa4 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 108aac8:	e0bffc17 	ldw	r2,-16(fp)
 108aacc:	10c00d17 	ldw	r3,52(r2)
 108aad0:	e0bff517 	ldw	r2,-44(fp)
 108aad4:	18800526 	beq	r3,r2,108aaec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 108aad8:	e0bffe17 	ldw	r2,-8(fp)
 108aadc:	00bfd016 	blt	zero,r2,108aa20 <altera_avalon_jtag_uart_write+0x10c>
 108aae0:	00000306 	br	108aaf0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 108aae4:	0001883a 	nop
 108aae8:	00000106 	br	108aaf0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 108aaec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 108aaf0:	e0fffd17 	ldw	r3,-12(fp)
 108aaf4:	e0bff717 	ldw	r2,-36(fp)
 108aaf8:	18800426 	beq	r3,r2,108ab0c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 108aafc:	e0fffd17 	ldw	r3,-12(fp)
 108ab00:	e0bff717 	ldw	r2,-36(fp)
 108ab04:	1885c83a 	sub	r2,r3,r2
 108ab08:	00000606 	br	108ab24 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 108ab0c:	e0bfff17 	ldw	r2,-4(fp)
 108ab10:	1090000c 	andi	r2,r2,16384
 108ab14:	10000226 	beq	r2,zero,108ab20 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 108ab18:	00bffd44 	movi	r2,-11
 108ab1c:	00000106 	br	108ab24 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 108ab20:	00bffec4 	movi	r2,-5
}
 108ab24:	e037883a 	mov	sp,fp
 108ab28:	dfc00117 	ldw	ra,4(sp)
 108ab2c:	df000017 	ldw	fp,0(sp)
 108ab30:	dec00204 	addi	sp,sp,8
 108ab34:	f800283a 	ret

0108ab38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 108ab38:	defffa04 	addi	sp,sp,-24
 108ab3c:	dfc00515 	stw	ra,20(sp)
 108ab40:	df000415 	stw	fp,16(sp)
 108ab44:	df000404 	addi	fp,sp,16
 108ab48:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 108ab4c:	0007883a 	mov	r3,zero
 108ab50:	e0bfff17 	ldw	r2,-4(fp)
 108ab54:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 108ab58:	e0bfff17 	ldw	r2,-4(fp)
 108ab5c:	10800104 	addi	r2,r2,4
 108ab60:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108ab64:	0005303a 	rdctl	r2,status
 108ab68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108ab6c:	e0fffd17 	ldw	r3,-12(fp)
 108ab70:	00bfff84 	movi	r2,-2
 108ab74:	1884703a 	and	r2,r3,r2
 108ab78:	1001703a 	wrctl	status,r2
  
  return context;
 108ab7c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 108ab80:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 108ab84:	108b6980 	call	108b698 <alt_tick>
 108ab88:	e0bffc17 	ldw	r2,-16(fp)
 108ab8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108ab90:	e0bffe17 	ldw	r2,-8(fp)
 108ab94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 108ab98:	e037883a 	mov	sp,fp
 108ab9c:	dfc00117 	ldw	ra,4(sp)
 108aba0:	df000017 	ldw	fp,0(sp)
 108aba4:	dec00204 	addi	sp,sp,8
 108aba8:	f800283a 	ret

0108abac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 108abac:	defff804 	addi	sp,sp,-32
 108abb0:	dfc00715 	stw	ra,28(sp)
 108abb4:	df000615 	stw	fp,24(sp)
 108abb8:	df000604 	addi	fp,sp,24
 108abbc:	e13ffc15 	stw	r4,-16(fp)
 108abc0:	e17ffd15 	stw	r5,-12(fp)
 108abc4:	e1bffe15 	stw	r6,-8(fp)
 108abc8:	e1ffff15 	stw	r7,-4(fp)
 108abcc:	e0bfff17 	ldw	r2,-4(fp)
 108abd0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 108abd4:	00804274 	movhi	r2,265
 108abd8:	10bda604 	addi	r2,r2,-2408
 108abdc:	10800017 	ldw	r2,0(r2)
 108abe0:	1000041e 	bne	r2,zero,108abf4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 108abe4:	00804274 	movhi	r2,265
 108abe8:	10bda604 	addi	r2,r2,-2408
 108abec:	e0fffb17 	ldw	r3,-20(fp)
 108abf0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 108abf4:	e0bffc17 	ldw	r2,-16(fp)
 108abf8:	10800104 	addi	r2,r2,4
 108abfc:	00c001c4 	movi	r3,7
 108ac00:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 108ac04:	d8000015 	stw	zero,0(sp)
 108ac08:	e13ffd17 	ldw	r4,-12(fp)
 108ac0c:	e17ffe17 	ldw	r5,-8(fp)
 108ac10:	01804274 	movhi	r6,265
 108ac14:	31aace04 	addi	r6,r6,-21704
 108ac18:	e1fffc17 	ldw	r7,-16(fp)
 108ac1c:	108af900 	call	108af90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 108ac20:	e037883a 	mov	sp,fp
 108ac24:	dfc00117 	ldw	ra,4(sp)
 108ac28:	df000017 	ldw	fp,0(sp)
 108ac2c:	dec00204 	addi	sp,sp,8
 108ac30:	f800283a 	ret

0108ac34 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 108ac34:	defff504 	addi	sp,sp,-44
 108ac38:	df000a15 	stw	fp,40(sp)
 108ac3c:	df000a04 	addi	fp,sp,40
 108ac40:	e13ffc15 	stw	r4,-16(fp)
 108ac44:	e17ffd15 	stw	r5,-12(fp)
 108ac48:	e1bffe15 	stw	r6,-8(fp)
 108ac4c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 108ac50:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 108ac54:	00804274 	movhi	r2,265
 108ac58:	10bda604 	addi	r2,r2,-2408
 108ac5c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 108ac60:	10003f26 	beq	r2,zero,108ad60 <alt_alarm_start+0x12c>
  {
    if (alarm)
 108ac64:	e0bffc17 	ldw	r2,-16(fp)
 108ac68:	10003b26 	beq	r2,zero,108ad58 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 108ac6c:	e0bffc17 	ldw	r2,-16(fp)
 108ac70:	e0fffe17 	ldw	r3,-8(fp)
 108ac74:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 108ac78:	e0bffc17 	ldw	r2,-16(fp)
 108ac7c:	e0ffff17 	ldw	r3,-4(fp)
 108ac80:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108ac84:	0005303a 	rdctl	r2,status
 108ac88:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108ac8c:	e0fff817 	ldw	r3,-32(fp)
 108ac90:	00bfff84 	movi	r2,-2
 108ac94:	1884703a 	and	r2,r3,r2
 108ac98:	1001703a 	wrctl	status,r2
  
  return context;
 108ac9c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 108aca0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 108aca4:	00804274 	movhi	r2,265
 108aca8:	10bda704 	addi	r2,r2,-2404
 108acac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 108acb0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 108acb4:	e0fffd17 	ldw	r3,-12(fp)
 108acb8:	e0bff617 	ldw	r2,-40(fp)
 108acbc:	1885883a 	add	r2,r3,r2
 108acc0:	10c00044 	addi	r3,r2,1
 108acc4:	e0bffc17 	ldw	r2,-16(fp)
 108acc8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 108accc:	e0bffc17 	ldw	r2,-16(fp)
 108acd0:	10c00217 	ldw	r3,8(r2)
 108acd4:	e0bff617 	ldw	r2,-40(fp)
 108acd8:	1880042e 	bgeu	r3,r2,108acec <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 108acdc:	e0bffc17 	ldw	r2,-16(fp)
 108ace0:	00c00044 	movi	r3,1
 108ace4:	10c00405 	stb	r3,16(r2)
 108ace8:	00000206 	br	108acf4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 108acec:	e0bffc17 	ldw	r2,-16(fp)
 108acf0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 108acf4:	e0bffc17 	ldw	r2,-16(fp)
 108acf8:	00c04274 	movhi	r3,265
 108acfc:	18f70304 	addi	r3,r3,-9204
 108ad00:	e0fff915 	stw	r3,-28(fp)
 108ad04:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 108ad08:	e0bffa17 	ldw	r2,-24(fp)
 108ad0c:	e0fff917 	ldw	r3,-28(fp)
 108ad10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 108ad14:	e0bff917 	ldw	r2,-28(fp)
 108ad18:	10c00017 	ldw	r3,0(r2)
 108ad1c:	e0bffa17 	ldw	r2,-24(fp)
 108ad20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 108ad24:	e0bff917 	ldw	r2,-28(fp)
 108ad28:	10800017 	ldw	r2,0(r2)
 108ad2c:	e0fffa17 	ldw	r3,-24(fp)
 108ad30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 108ad34:	e0bff917 	ldw	r2,-28(fp)
 108ad38:	e0fffa17 	ldw	r3,-24(fp)
 108ad3c:	10c00015 	stw	r3,0(r2)
 108ad40:	e0bff717 	ldw	r2,-36(fp)
 108ad44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108ad48:	e0bffb17 	ldw	r2,-20(fp)
 108ad4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 108ad50:	0005883a 	mov	r2,zero
 108ad54:	00000306 	br	108ad64 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 108ad58:	00bffa84 	movi	r2,-22
 108ad5c:	00000106 	br	108ad64 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 108ad60:	00bfde84 	movi	r2,-134
  }
}
 108ad64:	e037883a 	mov	sp,fp
 108ad68:	df000017 	ldw	fp,0(sp)
 108ad6c:	dec00104 	addi	sp,sp,4
 108ad70:	f800283a 	ret

0108ad74 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 108ad74:	defffe04 	addi	sp,sp,-8
 108ad78:	df000115 	stw	fp,4(sp)
 108ad7c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 108ad80:	e03fff15 	stw	zero,-4(fp)
 108ad84:	00000506 	br	108ad9c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 108ad88:	e0bfff17 	ldw	r2,-4(fp)
 108ad8c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 108ad90:	e0bfff17 	ldw	r2,-4(fp)
 108ad94:	10800804 	addi	r2,r2,32
 108ad98:	e0bfff15 	stw	r2,-4(fp)
 108ad9c:	e0bfff17 	ldw	r2,-4(fp)
 108ada0:	10820030 	cmpltui	r2,r2,2048
 108ada4:	103ff81e 	bne	r2,zero,108ad88 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 108ada8:	e037883a 	mov	sp,fp
 108adac:	df000017 	ldw	fp,0(sp)
 108adb0:	dec00104 	addi	sp,sp,4
 108adb4:	f800283a 	ret

0108adb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 108adb8:	defffe04 	addi	sp,sp,-8
 108adbc:	dfc00115 	stw	ra,4(sp)
 108adc0:	df000015 	stw	fp,0(sp)
 108adc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 108adc8:	00804274 	movhi	r2,265
 108adcc:	10b70004 	addi	r2,r2,-9216
 108add0:	10800017 	ldw	r2,0(r2)
 108add4:	10000526 	beq	r2,zero,108adec <alt_get_errno+0x34>
 108add8:	00804274 	movhi	r2,265
 108addc:	10b70004 	addi	r2,r2,-9216
 108ade0:	10800017 	ldw	r2,0(r2)
 108ade4:	103ee83a 	callr	r2
 108ade8:	00000206 	br	108adf4 <alt_get_errno+0x3c>
 108adec:	00804274 	movhi	r2,265
 108adf0:	10bda104 	addi	r2,r2,-2428
}
 108adf4:	e037883a 	mov	sp,fp
 108adf8:	dfc00117 	ldw	ra,4(sp)
 108adfc:	df000017 	ldw	fp,0(sp)
 108ae00:	dec00204 	addi	sp,sp,8
 108ae04:	f800283a 	ret

0108ae08 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 108ae08:	defffa04 	addi	sp,sp,-24
 108ae0c:	dfc00515 	stw	ra,20(sp)
 108ae10:	df000415 	stw	fp,16(sp)
 108ae14:	df000404 	addi	fp,sp,16
 108ae18:	e13ffe15 	stw	r4,-8(fp)
 108ae1c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 108ae20:	e0bffe17 	ldw	r2,-8(fp)
 108ae24:	10000326 	beq	r2,zero,108ae34 <alt_dev_llist_insert+0x2c>
 108ae28:	e0bffe17 	ldw	r2,-8(fp)
 108ae2c:	10800217 	ldw	r2,8(r2)
 108ae30:	1000051e 	bne	r2,zero,108ae48 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 108ae34:	108adb80 	call	108adb8 <alt_get_errno>
 108ae38:	00c00584 	movi	r3,22
 108ae3c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 108ae40:	00bffa84 	movi	r2,-22
 108ae44:	00001306 	br	108ae94 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 108ae48:	e0bffe17 	ldw	r2,-8(fp)
 108ae4c:	e0ffff17 	ldw	r3,-4(fp)
 108ae50:	e0fffc15 	stw	r3,-16(fp)
 108ae54:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 108ae58:	e0bffd17 	ldw	r2,-12(fp)
 108ae5c:	e0fffc17 	ldw	r3,-16(fp)
 108ae60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 108ae64:	e0bffc17 	ldw	r2,-16(fp)
 108ae68:	10c00017 	ldw	r3,0(r2)
 108ae6c:	e0bffd17 	ldw	r2,-12(fp)
 108ae70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 108ae74:	e0bffc17 	ldw	r2,-16(fp)
 108ae78:	10800017 	ldw	r2,0(r2)
 108ae7c:	e0fffd17 	ldw	r3,-12(fp)
 108ae80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 108ae84:	e0bffc17 	ldw	r2,-16(fp)
 108ae88:	e0fffd17 	ldw	r3,-12(fp)
 108ae8c:	10c00015 	stw	r3,0(r2)

  return 0;  
 108ae90:	0005883a 	mov	r2,zero
}
 108ae94:	e037883a 	mov	sp,fp
 108ae98:	dfc00117 	ldw	ra,4(sp)
 108ae9c:	df000017 	ldw	fp,0(sp)
 108aea0:	dec00204 	addi	sp,sp,8
 108aea4:	f800283a 	ret

0108aea8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 108aea8:	defffd04 	addi	sp,sp,-12
 108aeac:	dfc00215 	stw	ra,8(sp)
 108aeb0:	df000115 	stw	fp,4(sp)
 108aeb4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 108aeb8:	00804274 	movhi	r2,265
 108aebc:	10af9c04 	addi	r2,r2,-16784
 108aec0:	e0bfff15 	stw	r2,-4(fp)
 108aec4:	00000606 	br	108aee0 <_do_ctors+0x38>
        (*ctor) (); 
 108aec8:	e0bfff17 	ldw	r2,-4(fp)
 108aecc:	10800017 	ldw	r2,0(r2)
 108aed0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 108aed4:	e0bfff17 	ldw	r2,-4(fp)
 108aed8:	10bfff04 	addi	r2,r2,-4
 108aedc:	e0bfff15 	stw	r2,-4(fp)
 108aee0:	e0ffff17 	ldw	r3,-4(fp)
 108aee4:	00804274 	movhi	r2,265
 108aee8:	10af9d04 	addi	r2,r2,-16780
 108aeec:	18bff62e 	bgeu	r3,r2,108aec8 <_do_ctors+0x20>
        (*ctor) (); 
}
 108aef0:	e037883a 	mov	sp,fp
 108aef4:	dfc00117 	ldw	ra,4(sp)
 108aef8:	df000017 	ldw	fp,0(sp)
 108aefc:	dec00204 	addi	sp,sp,8
 108af00:	f800283a 	ret

0108af04 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 108af04:	defffd04 	addi	sp,sp,-12
 108af08:	dfc00215 	stw	ra,8(sp)
 108af0c:	df000115 	stw	fp,4(sp)
 108af10:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 108af14:	00804274 	movhi	r2,265
 108af18:	10af9c04 	addi	r2,r2,-16784
 108af1c:	e0bfff15 	stw	r2,-4(fp)
 108af20:	00000606 	br	108af3c <_do_dtors+0x38>
        (*dtor) (); 
 108af24:	e0bfff17 	ldw	r2,-4(fp)
 108af28:	10800017 	ldw	r2,0(r2)
 108af2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 108af30:	e0bfff17 	ldw	r2,-4(fp)
 108af34:	10bfff04 	addi	r2,r2,-4
 108af38:	e0bfff15 	stw	r2,-4(fp)
 108af3c:	e0ffff17 	ldw	r3,-4(fp)
 108af40:	00804274 	movhi	r2,265
 108af44:	10af9d04 	addi	r2,r2,-16780
 108af48:	18bff62e 	bgeu	r3,r2,108af24 <_do_dtors+0x20>
        (*dtor) (); 
}
 108af4c:	e037883a 	mov	sp,fp
 108af50:	dfc00117 	ldw	ra,4(sp)
 108af54:	df000017 	ldw	fp,0(sp)
 108af58:	dec00204 	addi	sp,sp,8
 108af5c:	f800283a 	ret

0108af60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 108af60:	defffe04 	addi	sp,sp,-8
 108af64:	dfc00115 	stw	ra,4(sp)
 108af68:	df000015 	stw	fp,0(sp)
 108af6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 108af70:	0009883a 	mov	r4,zero
 108af74:	01440004 	movi	r5,4096
 108af78:	108ba140 	call	108ba14 <alt_icache_flush>
#endif
}
 108af7c:	e037883a 	mov	sp,fp
 108af80:	dfc00117 	ldw	ra,4(sp)
 108af84:	df000017 	ldw	fp,0(sp)
 108af88:	dec00204 	addi	sp,sp,8
 108af8c:	f800283a 	ret

0108af90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 108af90:	defff904 	addi	sp,sp,-28
 108af94:	dfc00615 	stw	ra,24(sp)
 108af98:	df000515 	stw	fp,20(sp)
 108af9c:	df000504 	addi	fp,sp,20
 108afa0:	e13ffc15 	stw	r4,-16(fp)
 108afa4:	e17ffd15 	stw	r5,-12(fp)
 108afa8:	e1bffe15 	stw	r6,-8(fp)
 108afac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 108afb0:	e0800217 	ldw	r2,8(fp)
 108afb4:	d8800015 	stw	r2,0(sp)
 108afb8:	e13ffc17 	ldw	r4,-16(fp)
 108afbc:	e17ffd17 	ldw	r5,-12(fp)
 108afc0:	e1bffe17 	ldw	r6,-8(fp)
 108afc4:	e1ffff17 	ldw	r7,-4(fp)
 108afc8:	108b1680 	call	108b168 <alt_iic_isr_register>
}  
 108afcc:	e037883a 	mov	sp,fp
 108afd0:	dfc00117 	ldw	ra,4(sp)
 108afd4:	df000017 	ldw	fp,0(sp)
 108afd8:	dec00204 	addi	sp,sp,8
 108afdc:	f800283a 	ret

0108afe0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 108afe0:	defff904 	addi	sp,sp,-28
 108afe4:	df000615 	stw	fp,24(sp)
 108afe8:	df000604 	addi	fp,sp,24
 108afec:	e13ffe15 	stw	r4,-8(fp)
 108aff0:	e17fff15 	stw	r5,-4(fp)
 108aff4:	e0bfff17 	ldw	r2,-4(fp)
 108aff8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108affc:	0005303a 	rdctl	r2,status
 108b000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108b004:	e0fffb17 	ldw	r3,-20(fp)
 108b008:	00bfff84 	movi	r2,-2
 108b00c:	1884703a 	and	r2,r3,r2
 108b010:	1001703a 	wrctl	status,r2
  
  return context;
 108b014:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 108b018:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 108b01c:	e0bffa17 	ldw	r2,-24(fp)
 108b020:	00c00044 	movi	r3,1
 108b024:	1884983a 	sll	r2,r3,r2
 108b028:	1007883a 	mov	r3,r2
 108b02c:	00804274 	movhi	r2,265
 108b030:	10bda504 	addi	r2,r2,-2412
 108b034:	10800017 	ldw	r2,0(r2)
 108b038:	1886b03a 	or	r3,r3,r2
 108b03c:	00804274 	movhi	r2,265
 108b040:	10bda504 	addi	r2,r2,-2412
 108b044:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 108b048:	00804274 	movhi	r2,265
 108b04c:	10bda504 	addi	r2,r2,-2412
 108b050:	10800017 	ldw	r2,0(r2)
 108b054:	100170fa 	wrctl	ienable,r2
 108b058:	e0bffc17 	ldw	r2,-16(fp)
 108b05c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108b060:	e0bffd17 	ldw	r2,-12(fp)
 108b064:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 108b068:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 108b06c:	e037883a 	mov	sp,fp
 108b070:	df000017 	ldw	fp,0(sp)
 108b074:	dec00104 	addi	sp,sp,4
 108b078:	f800283a 	ret

0108b07c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 108b07c:	defff904 	addi	sp,sp,-28
 108b080:	df000615 	stw	fp,24(sp)
 108b084:	df000604 	addi	fp,sp,24
 108b088:	e13ffe15 	stw	r4,-8(fp)
 108b08c:	e17fff15 	stw	r5,-4(fp)
 108b090:	e0bfff17 	ldw	r2,-4(fp)
 108b094:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108b098:	0005303a 	rdctl	r2,status
 108b09c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108b0a0:	e0fffb17 	ldw	r3,-20(fp)
 108b0a4:	00bfff84 	movi	r2,-2
 108b0a8:	1884703a 	and	r2,r3,r2
 108b0ac:	1001703a 	wrctl	status,r2
  
  return context;
 108b0b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 108b0b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 108b0b8:	e0bffa17 	ldw	r2,-24(fp)
 108b0bc:	00c00044 	movi	r3,1
 108b0c0:	1884983a 	sll	r2,r3,r2
 108b0c4:	0084303a 	nor	r2,zero,r2
 108b0c8:	1007883a 	mov	r3,r2
 108b0cc:	00804274 	movhi	r2,265
 108b0d0:	10bda504 	addi	r2,r2,-2412
 108b0d4:	10800017 	ldw	r2,0(r2)
 108b0d8:	1886703a 	and	r3,r3,r2
 108b0dc:	00804274 	movhi	r2,265
 108b0e0:	10bda504 	addi	r2,r2,-2412
 108b0e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 108b0e8:	00804274 	movhi	r2,265
 108b0ec:	10bda504 	addi	r2,r2,-2412
 108b0f0:	10800017 	ldw	r2,0(r2)
 108b0f4:	100170fa 	wrctl	ienable,r2
 108b0f8:	e0bffc17 	ldw	r2,-16(fp)
 108b0fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108b100:	e0bffd17 	ldw	r2,-12(fp)
 108b104:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 108b108:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 108b10c:	e037883a 	mov	sp,fp
 108b110:	df000017 	ldw	fp,0(sp)
 108b114:	dec00104 	addi	sp,sp,4
 108b118:	f800283a 	ret

0108b11c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 108b11c:	defffc04 	addi	sp,sp,-16
 108b120:	df000315 	stw	fp,12(sp)
 108b124:	df000304 	addi	fp,sp,12
 108b128:	e13ffe15 	stw	r4,-8(fp)
 108b12c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 108b130:	000530fa 	rdctl	r2,ienable
 108b134:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 108b138:	e0bfff17 	ldw	r2,-4(fp)
 108b13c:	00c00044 	movi	r3,1
 108b140:	1884983a 	sll	r2,r3,r2
 108b144:	1007883a 	mov	r3,r2
 108b148:	e0bffd17 	ldw	r2,-12(fp)
 108b14c:	1884703a 	and	r2,r3,r2
 108b150:	1004c03a 	cmpne	r2,r2,zero
 108b154:	10803fcc 	andi	r2,r2,255
}
 108b158:	e037883a 	mov	sp,fp
 108b15c:	df000017 	ldw	fp,0(sp)
 108b160:	dec00104 	addi	sp,sp,4
 108b164:	f800283a 	ret

0108b168 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 108b168:	defff504 	addi	sp,sp,-44
 108b16c:	dfc00a15 	stw	ra,40(sp)
 108b170:	df000915 	stw	fp,36(sp)
 108b174:	df000904 	addi	fp,sp,36
 108b178:	e13ffc15 	stw	r4,-16(fp)
 108b17c:	e17ffd15 	stw	r5,-12(fp)
 108b180:	e1bffe15 	stw	r6,-8(fp)
 108b184:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 108b188:	00bffa84 	movi	r2,-22
 108b18c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 108b190:	e0bffd17 	ldw	r2,-12(fp)
 108b194:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 108b198:	e0bff817 	ldw	r2,-32(fp)
 108b19c:	10800808 	cmpgei	r2,r2,32
 108b1a0:	1000271e 	bne	r2,zero,108b240 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108b1a4:	0005303a 	rdctl	r2,status
 108b1a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108b1ac:	e0fffa17 	ldw	r3,-24(fp)
 108b1b0:	00bfff84 	movi	r2,-2
 108b1b4:	1884703a 	and	r2,r3,r2
 108b1b8:	1001703a 	wrctl	status,r2
  
  return context;
 108b1bc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 108b1c0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 108b1c4:	00c04274 	movhi	r3,265
 108b1c8:	18fdb204 	addi	r3,r3,-2360
 108b1cc:	e0bff817 	ldw	r2,-32(fp)
 108b1d0:	100490fa 	slli	r2,r2,3
 108b1d4:	1885883a 	add	r2,r3,r2
 108b1d8:	e0fffe17 	ldw	r3,-8(fp)
 108b1dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 108b1e0:	00c04274 	movhi	r3,265
 108b1e4:	18fdb204 	addi	r3,r3,-2360
 108b1e8:	e0bff817 	ldw	r2,-32(fp)
 108b1ec:	100490fa 	slli	r2,r2,3
 108b1f0:	1885883a 	add	r2,r3,r2
 108b1f4:	10800104 	addi	r2,r2,4
 108b1f8:	e0ffff17 	ldw	r3,-4(fp)
 108b1fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 108b200:	e0bffe17 	ldw	r2,-8(fp)
 108b204:	10000526 	beq	r2,zero,108b21c <alt_iic_isr_register+0xb4>
 108b208:	e0bff817 	ldw	r2,-32(fp)
 108b20c:	e13ffc17 	ldw	r4,-16(fp)
 108b210:	100b883a 	mov	r5,r2
 108b214:	108afe00 	call	108afe0 <alt_ic_irq_enable>
 108b218:	00000406 	br	108b22c <alt_iic_isr_register+0xc4>
 108b21c:	e0bff817 	ldw	r2,-32(fp)
 108b220:	e13ffc17 	ldw	r4,-16(fp)
 108b224:	100b883a 	mov	r5,r2
 108b228:	108b07c0 	call	108b07c <alt_ic_irq_disable>
 108b22c:	e0bff715 	stw	r2,-36(fp)
 108b230:	e0bff917 	ldw	r2,-28(fp)
 108b234:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108b238:	e0bffb17 	ldw	r2,-20(fp)
 108b23c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 108b240:	e0bff717 	ldw	r2,-36(fp)
}
 108b244:	e037883a 	mov	sp,fp
 108b248:	dfc00117 	ldw	ra,4(sp)
 108b24c:	df000017 	ldw	fp,0(sp)
 108b250:	dec00204 	addi	sp,sp,8
 108b254:	f800283a 	ret

0108b258 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 108b258:	defff904 	addi	sp,sp,-28
 108b25c:	dfc00615 	stw	ra,24(sp)
 108b260:	df000515 	stw	fp,20(sp)
 108b264:	df000504 	addi	fp,sp,20
 108b268:	e13ffc15 	stw	r4,-16(fp)
 108b26c:	e17ffd15 	stw	r5,-12(fp)
 108b270:	e1bffe15 	stw	r6,-8(fp)
 108b274:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 108b278:	e13ffd17 	ldw	r4,-12(fp)
 108b27c:	e17ffe17 	ldw	r5,-8(fp)
 108b280:	e1bfff17 	ldw	r6,-4(fp)
 108b284:	108b4ac0 	call	108b4ac <open>
 108b288:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 108b28c:	e0bffb17 	ldw	r2,-20(fp)
 108b290:	10001c16 	blt	r2,zero,108b304 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 108b294:	00c04274 	movhi	r3,265
 108b298:	18f27e04 	addi	r3,r3,-13832
 108b29c:	e0bffb17 	ldw	r2,-20(fp)
 108b2a0:	10800324 	muli	r2,r2,12
 108b2a4:	1885883a 	add	r2,r3,r2
 108b2a8:	10c00017 	ldw	r3,0(r2)
 108b2ac:	e0bffc17 	ldw	r2,-16(fp)
 108b2b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 108b2b4:	00c04274 	movhi	r3,265
 108b2b8:	18f27e04 	addi	r3,r3,-13832
 108b2bc:	e0bffb17 	ldw	r2,-20(fp)
 108b2c0:	10800324 	muli	r2,r2,12
 108b2c4:	1885883a 	add	r2,r3,r2
 108b2c8:	10800104 	addi	r2,r2,4
 108b2cc:	10c00017 	ldw	r3,0(r2)
 108b2d0:	e0bffc17 	ldw	r2,-16(fp)
 108b2d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 108b2d8:	00c04274 	movhi	r3,265
 108b2dc:	18f27e04 	addi	r3,r3,-13832
 108b2e0:	e0bffb17 	ldw	r2,-20(fp)
 108b2e4:	10800324 	muli	r2,r2,12
 108b2e8:	1885883a 	add	r2,r3,r2
 108b2ec:	10800204 	addi	r2,r2,8
 108b2f0:	10c00017 	ldw	r3,0(r2)
 108b2f4:	e0bffc17 	ldw	r2,-16(fp)
 108b2f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 108b2fc:	e13ffb17 	ldw	r4,-20(fp)
 108b300:	1089dbc0 	call	1089dbc <alt_release_fd>
  }
} 
 108b304:	e037883a 	mov	sp,fp
 108b308:	dfc00117 	ldw	ra,4(sp)
 108b30c:	df000017 	ldw	fp,0(sp)
 108b310:	dec00204 	addi	sp,sp,8
 108b314:	f800283a 	ret

0108b318 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 108b318:	defffb04 	addi	sp,sp,-20
 108b31c:	dfc00415 	stw	ra,16(sp)
 108b320:	df000315 	stw	fp,12(sp)
 108b324:	df000304 	addi	fp,sp,12
 108b328:	e13ffd15 	stw	r4,-12(fp)
 108b32c:	e17ffe15 	stw	r5,-8(fp)
 108b330:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 108b334:	01004274 	movhi	r4,265
 108b338:	21328104 	addi	r4,r4,-13820
 108b33c:	e17ffd17 	ldw	r5,-12(fp)
 108b340:	01800044 	movi	r6,1
 108b344:	01c07fc4 	movi	r7,511
 108b348:	108b2580 	call	108b258 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 108b34c:	01004274 	movhi	r4,265
 108b350:	21327e04 	addi	r4,r4,-13832
 108b354:	e17ffe17 	ldw	r5,-8(fp)
 108b358:	000d883a 	mov	r6,zero
 108b35c:	01c07fc4 	movi	r7,511
 108b360:	108b2580 	call	108b258 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 108b364:	01004274 	movhi	r4,265
 108b368:	21328404 	addi	r4,r4,-13808
 108b36c:	e17fff17 	ldw	r5,-4(fp)
 108b370:	01800044 	movi	r6,1
 108b374:	01c07fc4 	movi	r7,511
 108b378:	108b2580 	call	108b258 <alt_open_fd>
}  
 108b37c:	e037883a 	mov	sp,fp
 108b380:	dfc00117 	ldw	ra,4(sp)
 108b384:	df000017 	ldw	fp,0(sp)
 108b388:	dec00204 	addi	sp,sp,8
 108b38c:	f800283a 	ret

0108b390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 108b390:	defffe04 	addi	sp,sp,-8
 108b394:	dfc00115 	stw	ra,4(sp)
 108b398:	df000015 	stw	fp,0(sp)
 108b39c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 108b3a0:	00804274 	movhi	r2,265
 108b3a4:	10b70004 	addi	r2,r2,-9216
 108b3a8:	10800017 	ldw	r2,0(r2)
 108b3ac:	10000526 	beq	r2,zero,108b3c4 <alt_get_errno+0x34>
 108b3b0:	00804274 	movhi	r2,265
 108b3b4:	10b70004 	addi	r2,r2,-9216
 108b3b8:	10800017 	ldw	r2,0(r2)
 108b3bc:	103ee83a 	callr	r2
 108b3c0:	00000206 	br	108b3cc <alt_get_errno+0x3c>
 108b3c4:	00804274 	movhi	r2,265
 108b3c8:	10bda104 	addi	r2,r2,-2428
}
 108b3cc:	e037883a 	mov	sp,fp
 108b3d0:	dfc00117 	ldw	ra,4(sp)
 108b3d4:	df000017 	ldw	fp,0(sp)
 108b3d8:	dec00204 	addi	sp,sp,8
 108b3dc:	f800283a 	ret

0108b3e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 108b3e0:	defffd04 	addi	sp,sp,-12
 108b3e4:	df000215 	stw	fp,8(sp)
 108b3e8:	df000204 	addi	fp,sp,8
 108b3ec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 108b3f0:	e0bfff17 	ldw	r2,-4(fp)
 108b3f4:	10800217 	ldw	r2,8(r2)
 108b3f8:	10d00034 	orhi	r3,r2,16384
 108b3fc:	e0bfff17 	ldw	r2,-4(fp)
 108b400:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 108b404:	e03ffe15 	stw	zero,-8(fp)
 108b408:	00001d06 	br	108b480 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 108b40c:	00c04274 	movhi	r3,265
 108b410:	18f27e04 	addi	r3,r3,-13832
 108b414:	e0bffe17 	ldw	r2,-8(fp)
 108b418:	10800324 	muli	r2,r2,12
 108b41c:	1885883a 	add	r2,r3,r2
 108b420:	10c00017 	ldw	r3,0(r2)
 108b424:	e0bfff17 	ldw	r2,-4(fp)
 108b428:	10800017 	ldw	r2,0(r2)
 108b42c:	1880111e 	bne	r3,r2,108b474 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 108b430:	00c04274 	movhi	r3,265
 108b434:	18f27e04 	addi	r3,r3,-13832
 108b438:	e0bffe17 	ldw	r2,-8(fp)
 108b43c:	10800324 	muli	r2,r2,12
 108b440:	1885883a 	add	r2,r3,r2
 108b444:	10800204 	addi	r2,r2,8
 108b448:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 108b44c:	1000090e 	bge	r2,zero,108b474 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 108b450:	e0bffe17 	ldw	r2,-8(fp)
 108b454:	10c00324 	muli	r3,r2,12
 108b458:	00804274 	movhi	r2,265
 108b45c:	10b27e04 	addi	r2,r2,-13832
 108b460:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 108b464:	e0bfff17 	ldw	r2,-4(fp)
 108b468:	18800226 	beq	r3,r2,108b474 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 108b46c:	00bffcc4 	movi	r2,-13
 108b470:	00000a06 	br	108b49c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 108b474:	e0bffe17 	ldw	r2,-8(fp)
 108b478:	10800044 	addi	r2,r2,1
 108b47c:	e0bffe15 	stw	r2,-8(fp)
 108b480:	00804274 	movhi	r2,265
 108b484:	10b6ff04 	addi	r2,r2,-9220
 108b488:	10800017 	ldw	r2,0(r2)
 108b48c:	1007883a 	mov	r3,r2
 108b490:	e0bffe17 	ldw	r2,-8(fp)
 108b494:	18bfdd2e 	bgeu	r3,r2,108b40c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 108b498:	0005883a 	mov	r2,zero
}
 108b49c:	e037883a 	mov	sp,fp
 108b4a0:	df000017 	ldw	fp,0(sp)
 108b4a4:	dec00104 	addi	sp,sp,4
 108b4a8:	f800283a 	ret

0108b4ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 108b4ac:	defff604 	addi	sp,sp,-40
 108b4b0:	dfc00915 	stw	ra,36(sp)
 108b4b4:	df000815 	stw	fp,32(sp)
 108b4b8:	df000804 	addi	fp,sp,32
 108b4bc:	e13ffd15 	stw	r4,-12(fp)
 108b4c0:	e17ffe15 	stw	r5,-8(fp)
 108b4c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 108b4c8:	00bfffc4 	movi	r2,-1
 108b4cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 108b4d0:	00bffb44 	movi	r2,-19
 108b4d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 108b4d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 108b4dc:	e13ffd17 	ldw	r4,-12(fp)
 108b4e0:	01404274 	movhi	r5,265
 108b4e4:	2976fd04 	addi	r5,r5,-9228
 108b4e8:	108b7bc0 	call	108b7bc <alt_find_dev>
 108b4ec:	e0bff815 	stw	r2,-32(fp)
 108b4f0:	e0bff817 	ldw	r2,-32(fp)
 108b4f4:	1000051e 	bne	r2,zero,108b50c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 108b4f8:	e13ffd17 	ldw	r4,-12(fp)
 108b4fc:	108b84c0 	call	108b84c <alt_find_file>
 108b500:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 108b504:	00800044 	movi	r2,1
 108b508:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 108b50c:	e0bff817 	ldw	r2,-32(fp)
 108b510:	10002926 	beq	r2,zero,108b5b8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 108b514:	e13ff817 	ldw	r4,-32(fp)
 108b518:	108b9600 	call	108b960 <alt_get_fd>
 108b51c:	e0bff915 	stw	r2,-28(fp)
 108b520:	e0bff917 	ldw	r2,-28(fp)
 108b524:	1000030e 	bge	r2,zero,108b534 <open+0x88>
    {
      status = index;
 108b528:	e0bff917 	ldw	r2,-28(fp)
 108b52c:	e0bffa15 	stw	r2,-24(fp)
 108b530:	00002306 	br	108b5c0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 108b534:	e0bff917 	ldw	r2,-28(fp)
 108b538:	10c00324 	muli	r3,r2,12
 108b53c:	00804274 	movhi	r2,265
 108b540:	10b27e04 	addi	r2,r2,-13832
 108b544:	1885883a 	add	r2,r3,r2
 108b548:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 108b54c:	e0fffe17 	ldw	r3,-8(fp)
 108b550:	00900034 	movhi	r2,16384
 108b554:	10bfffc4 	addi	r2,r2,-1
 108b558:	1886703a 	and	r3,r3,r2
 108b55c:	e0bffc17 	ldw	r2,-16(fp)
 108b560:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 108b564:	e0bffb17 	ldw	r2,-20(fp)
 108b568:	1000051e 	bne	r2,zero,108b580 <open+0xd4>
 108b56c:	e13ffc17 	ldw	r4,-16(fp)
 108b570:	108b3e00 	call	108b3e0 <alt_file_locked>
 108b574:	e0bffa15 	stw	r2,-24(fp)
 108b578:	e0bffa17 	ldw	r2,-24(fp)
 108b57c:	10001016 	blt	r2,zero,108b5c0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 108b580:	e0bff817 	ldw	r2,-32(fp)
 108b584:	10800317 	ldw	r2,12(r2)
 108b588:	10000826 	beq	r2,zero,108b5ac <open+0x100>
 108b58c:	e0bff817 	ldw	r2,-32(fp)
 108b590:	10800317 	ldw	r2,12(r2)
 108b594:	e13ffc17 	ldw	r4,-16(fp)
 108b598:	e17ffd17 	ldw	r5,-12(fp)
 108b59c:	e1bffe17 	ldw	r6,-8(fp)
 108b5a0:	e1ffff17 	ldw	r7,-4(fp)
 108b5a4:	103ee83a 	callr	r2
 108b5a8:	00000106 	br	108b5b0 <open+0x104>
 108b5ac:	0005883a 	mov	r2,zero
 108b5b0:	e0bffa15 	stw	r2,-24(fp)
 108b5b4:	00000206 	br	108b5c0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 108b5b8:	00bffb44 	movi	r2,-19
 108b5bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 108b5c0:	e0bffa17 	ldw	r2,-24(fp)
 108b5c4:	1000080e 	bge	r2,zero,108b5e8 <open+0x13c>
  {
    alt_release_fd (index);  
 108b5c8:	e13ff917 	ldw	r4,-28(fp)
 108b5cc:	1089dbc0 	call	1089dbc <alt_release_fd>
    ALT_ERRNO = -status;
 108b5d0:	108b3900 	call	108b390 <alt_get_errno>
 108b5d4:	e0fffa17 	ldw	r3,-24(fp)
 108b5d8:	00c7c83a 	sub	r3,zero,r3
 108b5dc:	10c00015 	stw	r3,0(r2)
    return -1;
 108b5e0:	00bfffc4 	movi	r2,-1
 108b5e4:	00000106 	br	108b5ec <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 108b5e8:	e0bff917 	ldw	r2,-28(fp)
}
 108b5ec:	e037883a 	mov	sp,fp
 108b5f0:	dfc00117 	ldw	ra,4(sp)
 108b5f4:	df000017 	ldw	fp,0(sp)
 108b5f8:	dec00204 	addi	sp,sp,8
 108b5fc:	f800283a 	ret

0108b600 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 108b600:	defffa04 	addi	sp,sp,-24
 108b604:	df000515 	stw	fp,20(sp)
 108b608:	df000504 	addi	fp,sp,20
 108b60c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108b610:	0005303a 	rdctl	r2,status
 108b614:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108b618:	e0fffc17 	ldw	r3,-16(fp)
 108b61c:	00bfff84 	movi	r2,-2
 108b620:	1884703a 	and	r2,r3,r2
 108b624:	1001703a 	wrctl	status,r2
  
  return context;
 108b628:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 108b62c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 108b630:	e0bfff17 	ldw	r2,-4(fp)
 108b634:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 108b638:	e0bffd17 	ldw	r2,-12(fp)
 108b63c:	10800017 	ldw	r2,0(r2)
 108b640:	e0fffd17 	ldw	r3,-12(fp)
 108b644:	18c00117 	ldw	r3,4(r3)
 108b648:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 108b64c:	e0bffd17 	ldw	r2,-12(fp)
 108b650:	10800117 	ldw	r2,4(r2)
 108b654:	e0fffd17 	ldw	r3,-12(fp)
 108b658:	18c00017 	ldw	r3,0(r3)
 108b65c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 108b660:	e0bffd17 	ldw	r2,-12(fp)
 108b664:	e0fffd17 	ldw	r3,-12(fp)
 108b668:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 108b66c:	e0bffd17 	ldw	r2,-12(fp)
 108b670:	e0fffd17 	ldw	r3,-12(fp)
 108b674:	10c00015 	stw	r3,0(r2)
 108b678:	e0bffb17 	ldw	r2,-20(fp)
 108b67c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108b680:	e0bffe17 	ldw	r2,-8(fp)
 108b684:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 108b688:	e037883a 	mov	sp,fp
 108b68c:	df000017 	ldw	fp,0(sp)
 108b690:	dec00104 	addi	sp,sp,4
 108b694:	f800283a 	ret

0108b698 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 108b698:	defffb04 	addi	sp,sp,-20
 108b69c:	dfc00415 	stw	ra,16(sp)
 108b6a0:	df000315 	stw	fp,12(sp)
 108b6a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 108b6a8:	d0a00d17 	ldw	r2,-32716(gp)
 108b6ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 108b6b0:	d0a6b117 	ldw	r2,-25916(gp)
 108b6b4:	10800044 	addi	r2,r2,1
 108b6b8:	d0a6b115 	stw	r2,-25916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 108b6bc:	00002e06 	br	108b778 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 108b6c0:	e0bffd17 	ldw	r2,-12(fp)
 108b6c4:	10800017 	ldw	r2,0(r2)
 108b6c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 108b6cc:	e0bffd17 	ldw	r2,-12(fp)
 108b6d0:	10800403 	ldbu	r2,16(r2)
 108b6d4:	10803fcc 	andi	r2,r2,255
 108b6d8:	10000426 	beq	r2,zero,108b6ec <alt_tick+0x54>
 108b6dc:	d0a6b117 	ldw	r2,-25916(gp)
 108b6e0:	1000021e 	bne	r2,zero,108b6ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
 108b6e4:	e0bffd17 	ldw	r2,-12(fp)
 108b6e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 108b6ec:	e0bffd17 	ldw	r2,-12(fp)
 108b6f0:	10800217 	ldw	r2,8(r2)
 108b6f4:	d0e6b117 	ldw	r3,-25916(gp)
 108b6f8:	18801d36 	bltu	r3,r2,108b770 <alt_tick+0xd8>
 108b6fc:	e0bffd17 	ldw	r2,-12(fp)
 108b700:	10800403 	ldbu	r2,16(r2)
 108b704:	10803fcc 	andi	r2,r2,255
 108b708:	1000191e 	bne	r2,zero,108b770 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 108b70c:	e0bffd17 	ldw	r2,-12(fp)
 108b710:	10c00317 	ldw	r3,12(r2)
 108b714:	e0bffd17 	ldw	r2,-12(fp)
 108b718:	10800517 	ldw	r2,20(r2)
 108b71c:	1009883a 	mov	r4,r2
 108b720:	183ee83a 	callr	r3
 108b724:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 108b728:	e0bfff17 	ldw	r2,-4(fp)
 108b72c:	1000031e 	bne	r2,zero,108b73c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 108b730:	e13ffd17 	ldw	r4,-12(fp)
 108b734:	108b6000 	call	108b600 <alt_alarm_stop>
 108b738:	00000d06 	br	108b770 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 108b73c:	e0bffd17 	ldw	r2,-12(fp)
 108b740:	10c00217 	ldw	r3,8(r2)
 108b744:	e0bfff17 	ldw	r2,-4(fp)
 108b748:	1887883a 	add	r3,r3,r2
 108b74c:	e0bffd17 	ldw	r2,-12(fp)
 108b750:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 108b754:	e0bffd17 	ldw	r2,-12(fp)
 108b758:	10c00217 	ldw	r3,8(r2)
 108b75c:	d0a6b117 	ldw	r2,-25916(gp)
 108b760:	1880032e 	bgeu	r3,r2,108b770 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 108b764:	e0bffd17 	ldw	r2,-12(fp)
 108b768:	00c00044 	movi	r3,1
 108b76c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 108b770:	e0bffe17 	ldw	r2,-8(fp)
 108b774:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 108b778:	e0fffd17 	ldw	r3,-12(fp)
 108b77c:	d0a00d04 	addi	r2,gp,-32716
 108b780:	18bfcf1e 	bne	r3,r2,108b6c0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 108b784:	0001883a 	nop
}
 108b788:	e037883a 	mov	sp,fp
 108b78c:	dfc00117 	ldw	ra,4(sp)
 108b790:	df000017 	ldw	fp,0(sp)
 108b794:	dec00204 	addi	sp,sp,8
 108b798:	f800283a 	ret

0108b79c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 108b79c:	deffff04 	addi	sp,sp,-4
 108b7a0:	df000015 	stw	fp,0(sp)
 108b7a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 108b7a8:	000170fa 	wrctl	ienable,zero
}
 108b7ac:	e037883a 	mov	sp,fp
 108b7b0:	df000017 	ldw	fp,0(sp)
 108b7b4:	dec00104 	addi	sp,sp,4
 108b7b8:	f800283a 	ret

0108b7bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 108b7bc:	defffa04 	addi	sp,sp,-24
 108b7c0:	dfc00515 	stw	ra,20(sp)
 108b7c4:	df000415 	stw	fp,16(sp)
 108b7c8:	df000404 	addi	fp,sp,16
 108b7cc:	e13ffe15 	stw	r4,-8(fp)
 108b7d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 108b7d4:	e0bfff17 	ldw	r2,-4(fp)
 108b7d8:	10800017 	ldw	r2,0(r2)
 108b7dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 108b7e0:	e13ffe17 	ldw	r4,-8(fp)
 108b7e4:	1080ee00 	call	1080ee0 <strlen>
 108b7e8:	10800044 	addi	r2,r2,1
 108b7ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 108b7f0:	00000d06 	br	108b828 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 108b7f4:	e0bffc17 	ldw	r2,-16(fp)
 108b7f8:	10c00217 	ldw	r3,8(r2)
 108b7fc:	e0bffd17 	ldw	r2,-12(fp)
 108b800:	1809883a 	mov	r4,r3
 108b804:	e17ffe17 	ldw	r5,-8(fp)
 108b808:	100d883a 	mov	r6,r2
 108b80c:	108baec0 	call	108baec <memcmp>
 108b810:	1000021e 	bne	r2,zero,108b81c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 108b814:	e0bffc17 	ldw	r2,-16(fp)
 108b818:	00000706 	br	108b838 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 108b81c:	e0bffc17 	ldw	r2,-16(fp)
 108b820:	10800017 	ldw	r2,0(r2)
 108b824:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 108b828:	e0fffc17 	ldw	r3,-16(fp)
 108b82c:	e0bfff17 	ldw	r2,-4(fp)
 108b830:	18bff01e 	bne	r3,r2,108b7f4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 108b834:	0005883a 	mov	r2,zero
}
 108b838:	e037883a 	mov	sp,fp
 108b83c:	dfc00117 	ldw	ra,4(sp)
 108b840:	df000017 	ldw	fp,0(sp)
 108b844:	dec00204 	addi	sp,sp,8
 108b848:	f800283a 	ret

0108b84c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 108b84c:	defffb04 	addi	sp,sp,-20
 108b850:	dfc00415 	stw	ra,16(sp)
 108b854:	df000315 	stw	fp,12(sp)
 108b858:	df000304 	addi	fp,sp,12
 108b85c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 108b860:	00804274 	movhi	r2,265
 108b864:	10b6fb04 	addi	r2,r2,-9236
 108b868:	10800017 	ldw	r2,0(r2)
 108b86c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 108b870:	00003106 	br	108b938 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 108b874:	e0bffd17 	ldw	r2,-12(fp)
 108b878:	10800217 	ldw	r2,8(r2)
 108b87c:	1009883a 	mov	r4,r2
 108b880:	1080ee00 	call	1080ee0 <strlen>
 108b884:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 108b888:	e0bffd17 	ldw	r2,-12(fp)
 108b88c:	10c00217 	ldw	r3,8(r2)
 108b890:	e0bffe17 	ldw	r2,-8(fp)
 108b894:	10bfffc4 	addi	r2,r2,-1
 108b898:	1885883a 	add	r2,r3,r2
 108b89c:	10800003 	ldbu	r2,0(r2)
 108b8a0:	10803fcc 	andi	r2,r2,255
 108b8a4:	1080201c 	xori	r2,r2,128
 108b8a8:	10bfe004 	addi	r2,r2,-128
 108b8ac:	10800bd8 	cmpnei	r2,r2,47
 108b8b0:	1000031e 	bne	r2,zero,108b8c0 <alt_find_file+0x74>
    {
      len -= 1;
 108b8b4:	e0bffe17 	ldw	r2,-8(fp)
 108b8b8:	10bfffc4 	addi	r2,r2,-1
 108b8bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 108b8c0:	e0bffe17 	ldw	r2,-8(fp)
 108b8c4:	e0ffff17 	ldw	r3,-4(fp)
 108b8c8:	1885883a 	add	r2,r3,r2
 108b8cc:	10800003 	ldbu	r2,0(r2)
 108b8d0:	10803fcc 	andi	r2,r2,255
 108b8d4:	1080201c 	xori	r2,r2,128
 108b8d8:	10bfe004 	addi	r2,r2,-128
 108b8dc:	10800be0 	cmpeqi	r2,r2,47
 108b8e0:	1000081e 	bne	r2,zero,108b904 <alt_find_file+0xb8>
 108b8e4:	e0bffe17 	ldw	r2,-8(fp)
 108b8e8:	e0ffff17 	ldw	r3,-4(fp)
 108b8ec:	1885883a 	add	r2,r3,r2
 108b8f0:	10800003 	ldbu	r2,0(r2)
 108b8f4:	10803fcc 	andi	r2,r2,255
 108b8f8:	1080201c 	xori	r2,r2,128
 108b8fc:	10bfe004 	addi	r2,r2,-128
 108b900:	10000a1e 	bne	r2,zero,108b92c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 108b904:	e0bffd17 	ldw	r2,-12(fp)
 108b908:	10c00217 	ldw	r3,8(r2)
 108b90c:	e0bffe17 	ldw	r2,-8(fp)
 108b910:	1809883a 	mov	r4,r3
 108b914:	e17fff17 	ldw	r5,-4(fp)
 108b918:	100d883a 	mov	r6,r2
 108b91c:	108baec0 	call	108baec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 108b920:	1000021e 	bne	r2,zero,108b92c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 108b924:	e0bffd17 	ldw	r2,-12(fp)
 108b928:	00000806 	br	108b94c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 108b92c:	e0bffd17 	ldw	r2,-12(fp)
 108b930:	10800017 	ldw	r2,0(r2)
 108b934:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 108b938:	e0fffd17 	ldw	r3,-12(fp)
 108b93c:	00804274 	movhi	r2,265
 108b940:	10b6fb04 	addi	r2,r2,-9236
 108b944:	18bfcb1e 	bne	r3,r2,108b874 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 108b948:	0005883a 	mov	r2,zero
}
 108b94c:	e037883a 	mov	sp,fp
 108b950:	dfc00117 	ldw	ra,4(sp)
 108b954:	df000017 	ldw	fp,0(sp)
 108b958:	dec00204 	addi	sp,sp,8
 108b95c:	f800283a 	ret

0108b960 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 108b960:	defffc04 	addi	sp,sp,-16
 108b964:	df000315 	stw	fp,12(sp)
 108b968:	df000304 	addi	fp,sp,12
 108b96c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 108b970:	00bffa04 	movi	r2,-24
 108b974:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 108b978:	e03ffd15 	stw	zero,-12(fp)
 108b97c:	00001d06 	br	108b9f4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 108b980:	00c04274 	movhi	r3,265
 108b984:	18f27e04 	addi	r3,r3,-13832
 108b988:	e0bffd17 	ldw	r2,-12(fp)
 108b98c:	10800324 	muli	r2,r2,12
 108b990:	1885883a 	add	r2,r3,r2
 108b994:	10800017 	ldw	r2,0(r2)
 108b998:	1000131e 	bne	r2,zero,108b9e8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 108b99c:	00c04274 	movhi	r3,265
 108b9a0:	18f27e04 	addi	r3,r3,-13832
 108b9a4:	e0bffd17 	ldw	r2,-12(fp)
 108b9a8:	10800324 	muli	r2,r2,12
 108b9ac:	1885883a 	add	r2,r3,r2
 108b9b0:	e0ffff17 	ldw	r3,-4(fp)
 108b9b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 108b9b8:	00804274 	movhi	r2,265
 108b9bc:	10b6ff04 	addi	r2,r2,-9220
 108b9c0:	10c00017 	ldw	r3,0(r2)
 108b9c4:	e0bffd17 	ldw	r2,-12(fp)
 108b9c8:	1880040e 	bge	r3,r2,108b9dc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 108b9cc:	00804274 	movhi	r2,265
 108b9d0:	10b6ff04 	addi	r2,r2,-9220
 108b9d4:	e0fffd17 	ldw	r3,-12(fp)
 108b9d8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 108b9dc:	e0bffd17 	ldw	r2,-12(fp)
 108b9e0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 108b9e4:	00000606 	br	108ba00 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 108b9e8:	e0bffd17 	ldw	r2,-12(fp)
 108b9ec:	10800044 	addi	r2,r2,1
 108b9f0:	e0bffd15 	stw	r2,-12(fp)
 108b9f4:	e0bffd17 	ldw	r2,-12(fp)
 108b9f8:	10800810 	cmplti	r2,r2,32
 108b9fc:	103fe01e 	bne	r2,zero,108b980 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 108ba00:	e0bffe17 	ldw	r2,-8(fp)
}
 108ba04:	e037883a 	mov	sp,fp
 108ba08:	df000017 	ldw	fp,0(sp)
 108ba0c:	dec00104 	addi	sp,sp,4
 108ba10:	f800283a 	ret

0108ba14 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 108ba14:	defffb04 	addi	sp,sp,-20
 108ba18:	df000415 	stw	fp,16(sp)
 108ba1c:	df000404 	addi	fp,sp,16
 108ba20:	e13ffe15 	stw	r4,-8(fp)
 108ba24:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 108ba28:	e0bfff17 	ldw	r2,-4(fp)
 108ba2c:	10840070 	cmpltui	r2,r2,4097
 108ba30:	1000021e 	bne	r2,zero,108ba3c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 108ba34:	00840004 	movi	r2,4096
 108ba38:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 108ba3c:	e0fffe17 	ldw	r3,-8(fp)
 108ba40:	e0bfff17 	ldw	r2,-4(fp)
 108ba44:	1885883a 	add	r2,r3,r2
 108ba48:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 108ba4c:	e0bffe17 	ldw	r2,-8(fp)
 108ba50:	e0bffc15 	stw	r2,-16(fp)
 108ba54:	00000506 	br	108ba6c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 108ba58:	e0bffc17 	ldw	r2,-16(fp)
 108ba5c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 108ba60:	e0bffc17 	ldw	r2,-16(fp)
 108ba64:	10800804 	addi	r2,r2,32
 108ba68:	e0bffc15 	stw	r2,-16(fp)
 108ba6c:	e0fffc17 	ldw	r3,-16(fp)
 108ba70:	e0bffd17 	ldw	r2,-12(fp)
 108ba74:	18bff836 	bltu	r3,r2,108ba58 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 108ba78:	e0bffe17 	ldw	r2,-8(fp)
 108ba7c:	108007cc 	andi	r2,r2,31
 108ba80:	10000226 	beq	r2,zero,108ba8c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 108ba84:	e0bffc17 	ldw	r2,-16(fp)
 108ba88:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 108ba8c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 108ba90:	e037883a 	mov	sp,fp
 108ba94:	df000017 	ldw	fp,0(sp)
 108ba98:	dec00104 	addi	sp,sp,4
 108ba9c:	f800283a 	ret

0108baa0 <atexit>:
 108baa0:	200b883a 	mov	r5,r4
 108baa4:	000d883a 	mov	r6,zero
 108baa8:	0009883a 	mov	r4,zero
 108baac:	000f883a 	mov	r7,zero
 108bab0:	108bb681 	jmpi	108bb68 <__register_exitproc>

0108bab4 <exit>:
 108bab4:	defffe04 	addi	sp,sp,-8
 108bab8:	000b883a 	mov	r5,zero
 108babc:	dc000015 	stw	r16,0(sp)
 108bac0:	dfc00115 	stw	ra,4(sp)
 108bac4:	2021883a 	mov	r16,r4
 108bac8:	108bc980 	call	108bc98 <__call_exitprocs>
 108bacc:	00804274 	movhi	r2,265
 108bad0:	10b6f604 	addi	r2,r2,-9256
 108bad4:	11000017 	ldw	r4,0(r2)
 108bad8:	20800f17 	ldw	r2,60(r4)
 108badc:	10000126 	beq	r2,zero,108bae4 <exit+0x30>
 108bae0:	103ee83a 	callr	r2
 108bae4:	8009883a 	mov	r4,r16
 108bae8:	108be380 	call	108be38 <_exit>

0108baec <memcmp>:
 108baec:	01c000c4 	movi	r7,3
 108baf0:	3980192e 	bgeu	r7,r6,108bb58 <memcmp+0x6c>
 108baf4:	2904b03a 	or	r2,r5,r4
 108baf8:	11c4703a 	and	r2,r2,r7
 108bafc:	10000f26 	beq	r2,zero,108bb3c <memcmp+0x50>
 108bb00:	20c00003 	ldbu	r3,0(r4)
 108bb04:	28800003 	ldbu	r2,0(r5)
 108bb08:	1880151e 	bne	r3,r2,108bb60 <memcmp+0x74>
 108bb0c:	31bfff84 	addi	r6,r6,-2
 108bb10:	01ffffc4 	movi	r7,-1
 108bb14:	00000406 	br	108bb28 <memcmp+0x3c>
 108bb18:	20c00003 	ldbu	r3,0(r4)
 108bb1c:	28800003 	ldbu	r2,0(r5)
 108bb20:	31bfffc4 	addi	r6,r6,-1
 108bb24:	18800e1e 	bne	r3,r2,108bb60 <memcmp+0x74>
 108bb28:	21000044 	addi	r4,r4,1
 108bb2c:	29400044 	addi	r5,r5,1
 108bb30:	31fff91e 	bne	r6,r7,108bb18 <memcmp+0x2c>
 108bb34:	0005883a 	mov	r2,zero
 108bb38:	f800283a 	ret
 108bb3c:	20c00017 	ldw	r3,0(r4)
 108bb40:	28800017 	ldw	r2,0(r5)
 108bb44:	1880041e 	bne	r3,r2,108bb58 <memcmp+0x6c>
 108bb48:	31bfff04 	addi	r6,r6,-4
 108bb4c:	21000104 	addi	r4,r4,4
 108bb50:	29400104 	addi	r5,r5,4
 108bb54:	39bff936 	bltu	r7,r6,108bb3c <memcmp+0x50>
 108bb58:	303fe91e 	bne	r6,zero,108bb00 <memcmp+0x14>
 108bb5c:	003ff506 	br	108bb34 <memcmp+0x48>
 108bb60:	1885c83a 	sub	r2,r3,r2
 108bb64:	f800283a 	ret

0108bb68 <__register_exitproc>:
 108bb68:	defffa04 	addi	sp,sp,-24
 108bb6c:	00804274 	movhi	r2,265
 108bb70:	10b6f604 	addi	r2,r2,-9256
 108bb74:	dc000315 	stw	r16,12(sp)
 108bb78:	14000017 	ldw	r16,0(r2)
 108bb7c:	dc400415 	stw	r17,16(sp)
 108bb80:	dfc00515 	stw	ra,20(sp)
 108bb84:	80805217 	ldw	r2,328(r16)
 108bb88:	2023883a 	mov	r17,r4
 108bb8c:	10003e26 	beq	r2,zero,108bc88 <__register_exitproc+0x120>
 108bb90:	10c00117 	ldw	r3,4(r2)
 108bb94:	020007c4 	movi	r8,31
 108bb98:	40c0180e 	bge	r8,r3,108bbfc <__register_exitproc+0x94>
 108bb9c:	00800034 	movhi	r2,0
 108bba0:	10800004 	addi	r2,r2,0
 108bba4:	1000061e 	bne	r2,zero,108bbc0 <__register_exitproc+0x58>
 108bba8:	00bfffc4 	movi	r2,-1
 108bbac:	dfc00517 	ldw	ra,20(sp)
 108bbb0:	dc400417 	ldw	r17,16(sp)
 108bbb4:	dc000317 	ldw	r16,12(sp)
 108bbb8:	dec00604 	addi	sp,sp,24
 108bbbc:	f800283a 	ret
 108bbc0:	01006404 	movi	r4,400
 108bbc4:	d9400015 	stw	r5,0(sp)
 108bbc8:	d9800115 	stw	r6,4(sp)
 108bbcc:	d9c00215 	stw	r7,8(sp)
 108bbd0:	00000000 	call	0 <__alt_mem_onchip_memory2-0x1080000>
 108bbd4:	d9400017 	ldw	r5,0(sp)
 108bbd8:	d9800117 	ldw	r6,4(sp)
 108bbdc:	d9c00217 	ldw	r7,8(sp)
 108bbe0:	103ff126 	beq	r2,zero,108bba8 <__register_exitproc+0x40>
 108bbe4:	80c05217 	ldw	r3,328(r16)
 108bbe8:	10000115 	stw	zero,4(r2)
 108bbec:	10c00015 	stw	r3,0(r2)
 108bbf0:	80805215 	stw	r2,328(r16)
 108bbf4:	10006215 	stw	zero,392(r2)
 108bbf8:	10006315 	stw	zero,396(r2)
 108bbfc:	10c00117 	ldw	r3,4(r2)
 108bc00:	88000d1e 	bne	r17,zero,108bc38 <__register_exitproc+0xd0>
 108bc04:	19000084 	addi	r4,r3,2
 108bc08:	2109883a 	add	r4,r4,r4
 108bc0c:	18c00044 	addi	r3,r3,1
 108bc10:	2109883a 	add	r4,r4,r4
 108bc14:	1109883a 	add	r4,r2,r4
 108bc18:	10c00115 	stw	r3,4(r2)
 108bc1c:	0005883a 	mov	r2,zero
 108bc20:	21400015 	stw	r5,0(r4)
 108bc24:	dfc00517 	ldw	ra,20(sp)
 108bc28:	dc400417 	ldw	r17,16(sp)
 108bc2c:	dc000317 	ldw	r16,12(sp)
 108bc30:	dec00604 	addi	sp,sp,24
 108bc34:	f800283a 	ret
 108bc38:	02400044 	movi	r9,1
 108bc3c:	12806217 	ldw	r10,392(r2)
 108bc40:	48d2983a 	sll	r9,r9,r3
 108bc44:	19000804 	addi	r4,r3,32
 108bc48:	18d1883a 	add	r8,r3,r3
 108bc4c:	2109883a 	add	r4,r4,r4
 108bc50:	4211883a 	add	r8,r8,r8
 108bc54:	2109883a 	add	r4,r4,r4
 108bc58:	1109883a 	add	r4,r2,r4
 108bc5c:	1211883a 	add	r8,r2,r8
 108bc60:	5254b03a 	or	r10,r10,r9
 108bc64:	21c02215 	stw	r7,136(r4)
 108bc68:	41802215 	stw	r6,136(r8)
 108bc6c:	12806215 	stw	r10,392(r2)
 108bc70:	01000084 	movi	r4,2
 108bc74:	893fe31e 	bne	r17,r4,108bc04 <__register_exitproc+0x9c>
 108bc78:	11006317 	ldw	r4,396(r2)
 108bc7c:	2252b03a 	or	r9,r4,r9
 108bc80:	12406315 	stw	r9,396(r2)
 108bc84:	003fdf06 	br	108bc04 <__register_exitproc+0x9c>
 108bc88:	00804274 	movhi	r2,265
 108bc8c:	10bdf204 	addi	r2,r2,-2104
 108bc90:	80805215 	stw	r2,328(r16)
 108bc94:	003fbe06 	br	108bb90 <__register_exitproc+0x28>

0108bc98 <__call_exitprocs>:
 108bc98:	00804274 	movhi	r2,265
 108bc9c:	10b6f604 	addi	r2,r2,-9256
 108bca0:	10800017 	ldw	r2,0(r2)
 108bca4:	defff304 	addi	sp,sp,-52
 108bca8:	df000b15 	stw	fp,44(sp)
 108bcac:	d8800015 	stw	r2,0(sp)
 108bcb0:	10805204 	addi	r2,r2,328
 108bcb4:	dd400815 	stw	r21,32(sp)
 108bcb8:	dfc00c15 	stw	ra,48(sp)
 108bcbc:	ddc00a15 	stw	r23,40(sp)
 108bcc0:	dd800915 	stw	r22,36(sp)
 108bcc4:	dd000715 	stw	r20,28(sp)
 108bcc8:	dcc00615 	stw	r19,24(sp)
 108bccc:	dc800515 	stw	r18,20(sp)
 108bcd0:	dc400415 	stw	r17,16(sp)
 108bcd4:	dc000315 	stw	r16,12(sp)
 108bcd8:	d9000115 	stw	r4,4(sp)
 108bcdc:	2839883a 	mov	fp,r5
 108bce0:	d8800215 	stw	r2,8(sp)
 108bce4:	057fffc4 	movi	r21,-1
 108bce8:	d8800017 	ldw	r2,0(sp)
 108bcec:	ddc00217 	ldw	r23,8(sp)
 108bcf0:	14805217 	ldw	r18,328(r2)
 108bcf4:	90001726 	beq	r18,zero,108bd54 <__call_exitprocs+0xbc>
 108bcf8:	94400117 	ldw	r17,4(r18)
 108bcfc:	8c3fffc4 	addi	r16,r17,-1
 108bd00:	80001116 	blt	r16,zero,108bd48 <__call_exitprocs+0xb0>
 108bd04:	8c400044 	addi	r17,r17,1
 108bd08:	8427883a 	add	r19,r16,r16
 108bd0c:	8c63883a 	add	r17,r17,r17
 108bd10:	95802204 	addi	r22,r18,136
 108bd14:	9ce7883a 	add	r19,r19,r19
 108bd18:	8c63883a 	add	r17,r17,r17
 108bd1c:	b4e7883a 	add	r19,r22,r19
 108bd20:	9463883a 	add	r17,r18,r17
 108bd24:	e0001726 	beq	fp,zero,108bd84 <__call_exitprocs+0xec>
 108bd28:	8c87c83a 	sub	r3,r17,r18
 108bd2c:	b0c7883a 	add	r3,r22,r3
 108bd30:	18c01e17 	ldw	r3,120(r3)
 108bd34:	1f001326 	beq	r3,fp,108bd84 <__call_exitprocs+0xec>
 108bd38:	843fffc4 	addi	r16,r16,-1
 108bd3c:	9cffff04 	addi	r19,r19,-4
 108bd40:	8c7fff04 	addi	r17,r17,-4
 108bd44:	857ff71e 	bne	r16,r21,108bd24 <__call_exitprocs+0x8c>
 108bd48:	00800034 	movhi	r2,0
 108bd4c:	10800004 	addi	r2,r2,0
 108bd50:	10002a1e 	bne	r2,zero,108bdfc <__call_exitprocs+0x164>
 108bd54:	dfc00c17 	ldw	ra,48(sp)
 108bd58:	df000b17 	ldw	fp,44(sp)
 108bd5c:	ddc00a17 	ldw	r23,40(sp)
 108bd60:	dd800917 	ldw	r22,36(sp)
 108bd64:	dd400817 	ldw	r21,32(sp)
 108bd68:	dd000717 	ldw	r20,28(sp)
 108bd6c:	dcc00617 	ldw	r19,24(sp)
 108bd70:	dc800517 	ldw	r18,20(sp)
 108bd74:	dc400417 	ldw	r17,16(sp)
 108bd78:	dc000317 	ldw	r16,12(sp)
 108bd7c:	dec00d04 	addi	sp,sp,52
 108bd80:	f800283a 	ret
 108bd84:	91000117 	ldw	r4,4(r18)
 108bd88:	88c00017 	ldw	r3,0(r17)
 108bd8c:	213fffc4 	addi	r4,r4,-1
 108bd90:	24001526 	beq	r4,r16,108bde8 <__call_exitprocs+0x150>
 108bd94:	88000015 	stw	zero,0(r17)
 108bd98:	183fe726 	beq	r3,zero,108bd38 <__call_exitprocs+0xa0>
 108bd9c:	00800044 	movi	r2,1
 108bda0:	1408983a 	sll	r4,r2,r16
 108bda4:	91406217 	ldw	r5,392(r18)
 108bda8:	95000117 	ldw	r20,4(r18)
 108bdac:	214a703a 	and	r5,r4,r5
 108bdb0:	28000b26 	beq	r5,zero,108bde0 <__call_exitprocs+0x148>
 108bdb4:	91406317 	ldw	r5,396(r18)
 108bdb8:	2148703a 	and	r4,r4,r5
 108bdbc:	20000c1e 	bne	r4,zero,108bdf0 <__call_exitprocs+0x158>
 108bdc0:	99400017 	ldw	r5,0(r19)
 108bdc4:	d9000117 	ldw	r4,4(sp)
 108bdc8:	183ee83a 	callr	r3
 108bdcc:	90c00117 	ldw	r3,4(r18)
 108bdd0:	1d3fc51e 	bne	r3,r20,108bce8 <__call_exitprocs+0x50>
 108bdd4:	b8c00017 	ldw	r3,0(r23)
 108bdd8:	1cbfd726 	beq	r3,r18,108bd38 <__call_exitprocs+0xa0>
 108bddc:	003fc206 	br	108bce8 <__call_exitprocs+0x50>
 108bde0:	183ee83a 	callr	r3
 108bde4:	003ff906 	br	108bdcc <__call_exitprocs+0x134>
 108bde8:	94000115 	stw	r16,4(r18)
 108bdec:	003fea06 	br	108bd98 <__call_exitprocs+0x100>
 108bdf0:	99000017 	ldw	r4,0(r19)
 108bdf4:	183ee83a 	callr	r3
 108bdf8:	003ff406 	br	108bdcc <__call_exitprocs+0x134>
 108bdfc:	90c00117 	ldw	r3,4(r18)
 108be00:	1800071e 	bne	r3,zero,108be20 <__call_exitprocs+0x188>
 108be04:	90c00017 	ldw	r3,0(r18)
 108be08:	18000926 	beq	r3,zero,108be30 <__call_exitprocs+0x198>
 108be0c:	9009883a 	mov	r4,r18
 108be10:	b8c00015 	stw	r3,0(r23)
 108be14:	00000000 	call	0 <__alt_mem_onchip_memory2-0x1080000>
 108be18:	bc800017 	ldw	r18,0(r23)
 108be1c:	003fb506 	br	108bcf4 <__call_exitprocs+0x5c>
 108be20:	90c00017 	ldw	r3,0(r18)
 108be24:	902f883a 	mov	r23,r18
 108be28:	1825883a 	mov	r18,r3
 108be2c:	003fb106 	br	108bcf4 <__call_exitprocs+0x5c>
 108be30:	0007883a 	mov	r3,zero
 108be34:	003ffb06 	br	108be24 <__call_exitprocs+0x18c>

0108be38 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 108be38:	defffc04 	addi	sp,sp,-16
 108be3c:	df000315 	stw	fp,12(sp)
 108be40:	df000304 	addi	fp,sp,12
 108be44:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 108be48:	0001883a 	nop
 108be4c:	e0bfff17 	ldw	r2,-4(fp)
 108be50:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 108be54:	e0bffd17 	ldw	r2,-12(fp)
 108be58:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 108be5c:	e0bffe17 	ldw	r2,-8(fp)
 108be60:	10000226 	beq	r2,zero,108be6c <_exit+0x34>
    ALT_SIM_FAIL();
 108be64:	002af070 	cmpltui	zero,zero,43969
 108be68:	00000106 	br	108be70 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 108be6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 108be70:	003fff06 	br	108be70 <_exit+0x38>
